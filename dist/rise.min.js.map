{"version":3,"file":"rise.min.js","sources":["rise.min.js"],"names":["global","Rise","this","VERSION","prototype","Object","create","getVersion","copyProperties","source","target","parent","keys","forEach","key","test","wrapMethod","method","parentMethod","backup","_super","apply","arguments","Class","extend","staticProperties","mixins","Constructor","init","constructor","i","length","Font","options","Logger","startGroup","log","style","variant","weight","size","lineHeight","family","isFontValid","warning","toString","endGroup","isValid","getStyle","setStyle","isFontStyleValid","getVariant","setVariant","isFontVariantValid","getWeight","setWeight","isFontWeightValid","getSize","setSize","isFontSizeValid","getLineHeight","setLineHeight","isFontLineHeightValid","getFamily","setFamily","isFontFamilyValid","join","unitsMap","fontStyleMap","fontVariantMap","fontWeightMap","fontSizeMap","fontLineHeightMap","isCssValueValid","value","some","unit","lastIndexOf","indexOf","font","fromString","fromNode","element","window","getComputedStyle","getPropertyValue","isAllowedLevel","level","currentLogLevel","prependLoggerInfo","string","Date","toLocaleTimeString","invokeConsole","type","args","Array","slice","call","console","Util","isFunction","chrome","VERBOSE","DEBUG","ERROR","WARNING","INFO","OFF","setLevel","getLevel","debug","error","info","isBoolean","startTime","endTime","$","RQuery","selector","document","pushElement","Element","elements","push","bind","get","isArray","HTMLCollection","Window","isString","querySelectorAll","index","isUndefined","count","each","cb","next","nextElementSibling","prev","previousElementSibling","siblings","filter","parentNode","children","contains","child","offset","boundingBox","getBoundingBox","left","body","scrollLeft","top","scrollTop","offsetWidth","offsetHeight","clientWidth","clientHeight","scrollWidth","scrollHeight","offsetLeft","offsetTop","position","focus","blur","hide","display","show","getType","find","attr","getAttribute","property","setAttribute","css","pseudoElement","removeProperty","getDashedString","getCamelizedString","isNaN","cssNumbersMap","wrap","html","wrapper","clone","insertBefore","append","unwrap","replaceChild","is","matches","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","addClass","names","split","name","classList","add","removeClass","remove","toggleClass","toggle","hasClass","every","on","eventType","handler","addEventListener","off","removeEventListener","ready","trigger","eventName","event","createEvent","initEvent","dispatch","live","self","founded","parentElement","removeChild","empty","innerHTML","insertAdjacentHTML","appendChild","prepend","firstChild","text","textContent","clones","cloneNode","currentBoundingBox","node","getBoundingClientRect","bottom","right","height","width","tag","createElement","replace","toLowerCase","isObject","object","isNumber","number","isFinite","array","bool","getRandomString","separator","undefined","Math","random"],"mappings":"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","sourcesContent":["(function(global) {\n    /**\n     * Current version of Rise\n     * @type {String}\n     * @private\n     */\n    var VERSION = '0.0.1 -> alpha';\n\n    /**\n     * Rise constuctor\n     * @constructor\n     */\n    function Rise() {\n        return this;\n    }\n\n    Rise.prototype = Object.create({});\n\n    /**\n     * Get current version\n     * @return {String} Returns current version\n     * @private\n     */\n    Rise.getVersion = function() {\n        return VERSION;\n    };\n\n    global.Rise = Rise;\n\n})(this);\n(function(global) {\n    'use strict';\n\n    /**\n     * Copy properties from parent to target object\n     * @param  {Object} source Object from where properties will be copied\n     * @param  {Object} target Object to where properties will copy\n     * @param  {Object} parent Parent object\n     * @private\n     */\n    function copyProperties(source, target, parent) {\n        Object.keys(source).forEach(function(key) {\n            if (\n                typeof source[key] == \"function\" &&\n                typeof parent[key] == \"function\" &&\n                /\\b_super\\b/.test(source[key])\n            ) {\n                target[key] = wrapMethod(source[key], parent[key]);\n            } else {\n                target[key] = source[key];\n            }\n        });\n    }\n\n    /**\n     * Wrap method with parent method.\n     * Useful for create this._super() in subclasses.\n     * @param  {Function} method       Method that need to be wrapped\n     * @param  {Function} parentMethod Parent method in other works - this._super();\n     * @return {Function}              Returns wrapped function\n     * @private\n     */\n    function wrapMethod(method, parentMethod) {\n        return function() {\n            var backup = this._super;\n            this._super = parentMethod;\n\n            try {\n                return method.apply(this, arguments);\n            } finally {\n                this._super = backup;\n            }\n        };\n    }\n\n    /**\n     * Empty function (interface)\n     * @private\n     */\n    function Class() {}\n\n    /**\n     * Create new Class or extend exists\n     * @static\n     * @param {Array} [mixins] Optional parameter. Array of mixins which need to inject in new Class\n     * @param {Object} prototype Prototype object for new Class\n     * @param {Object} staticProperties Object with static properties for new Class. Will send in Object.defineProperties.\n     * @return {Object} Returns new Class\n     *\n     * @example\n     * Rise.Class.extend([prototype])\n     * Rise.Class.extend([prototype], [staticProperties])\n     * Rise.Class.extend([prototype], [staticProperties], [mixins])\n     */\n    Class.extend = function(prototype, staticProperties, mixins) {\n        prototype = prototype || {};\n        staticProperties = staticProperties || {};\n        mixins = mixins || [];\n\n        function Constructor() {\n            return this.init && this.init.apply(this, arguments);\n        }\n\n        Constructor.prototype = Object.create(this.prototype);\n        Constructor.prototype.constructor = Constructor;\n        Constructor.extend = Class.extend;\n\n        copyProperties(staticProperties, Constructor, this);\n        copyProperties(prototype, Constructor.prototype, this.prototype);\n        for (var i = mixins.length - 1; i >= 0; i--) {\n            copyProperties(mixins[i], Constructor.prototype, this.prototype);\n        }\n\n        return Constructor;\n    };\n\n    global.Rise.Class = Class;\n\n})(this);\n(function(global) {\n    'use strict';\n\n    global.Rise.Font = Rise.Class.extend({\n        /**\n         * Create new Font object\n         * @constructor\n         * @param  {Object} options Font options\n         * @return {Rise.Font}      Returns Rise.Font instance\n         */\n        init: function(options) {\n            options = options || {};\n\n            Rise.Logger.startGroup(true, 'Rise.Font -> init()');\n            Rise.Logger.log('Trying to parse options object -> %O', options);\n\n            this.style = options.style || 'normal';\n            this.variant = options.variant || 'normal';\n            this.weight = options.weight || 'normal';\n            this.size = options.size || 'medium';\n            this.lineHeight = options.lineHeight || 'normal';\n            this.family = options.family || 'serif';\n\n            if (!Rise.Font.isFontValid(this)) {\n                Rise.Logger.warning('Something wrong with options -> %O', options);\n                Rise.Logger.warning('Rise.Font created with this font -> \"%s\"', this.toString());\n            }\n\n            Rise.Logger.log('Instantiated Rise.Font -> %O', this);\n            Rise.Logger.endGroup();\n\n            return this;\n        },\n\n        /**\n         * Check if Rise.Font is valid instance\n         * @return {Boolean} Returns true if Rise.Font instance valid\n         */\n        isValid: function() {\n            return Rise.Font.isFontValid(this);\n        },\n\n        /**\n         * Get current style\n         * @return {String} Returns CSS font style\n         */\n        getStyle: function() {\n            return this.style;\n        },\n\n        /**\n         * Set style to Rise.Font\n         * @param {String} style New CSS font style\n         * @return {Rise.Font} Returns Rise.Font instance\n         */\n        setStyle: function(style) {\n            if (Rise.Font.isFontStyleValid(style)) {\n                this.style = style;\n            } else {\n                Rise.Logger.warning('Rise.Font.setStyle() -> \"%s\" is not valid value', style);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font variant\n         * @return {String} Returns CSS font variant\n         */\n        getVariant: function() {\n            return this.variant;\n        },\n\n        /**\n         * Set font variant to Rise.Font\n         * @param {String} variant New CSS font variant\n         * @return {Rise.Font} Returns Rise.Font instance\n         */\n        setVariant: function(variant) {\n            if (Rise.Font.isFontVariantValid(variant)) {\n                this.variant = variant;\n            } else {\n                Rise.Logger.warning('Rise.Font.setVariant() -> \"%s\" is not valid value', variant);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font weight\n         * @return {String} Returns CSS font weight\n         */\n        getWeight: function() {\n            return this.weight;\n        },\n\n        /**\n         * Set font weight to Rise.Font\n         * @param {String} weight New CSS font weight\n         * @return {Rise.Font} Returns Rise.Font instance\n         */\n        setWeight: function(weight) {\n            if (Rise.Font.isFontWeightValid(weight)) {\n                this.weight = weight;\n            } else {\n                Rise.Logger.warning('Rise.Font.setWeight() -> \"%s\" is not valid value', weight);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font size\n         * @return {String} Returns CSS font size\n         */\n        getSize: function() {\n            return this.size;\n        },\n\n        /**\n         * Set font size to Rise.Font\n         * @param {String} size New CSS font size\n         * @return {Rise.Font} Returns Rise.Font instance\n         */\n        setSize: function(size) {\n            if (Rise.Font.isFontSizeValid(size)) {\n                this.size = size;\n            } else {\n                Rise.Logger.warning('Rise.Font.setSize() -> \"%s\" is not valid value', size);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font line height\n         * @return {String} Returns CSS font line-height\n         */\n        getLineHeight: function() {\n            return this.lineHeight;\n        },\n\n        /**\n         * Set font line height to Rise.Font\n         * @param {String} lineHeight New CSS font line-height\n         * @return {Rise.Font} Returns Rise.Font instance\n         */\n        setLineHeight: function(lineHeight) {\n            if (Rise.Font.isFontLineHeightValid(lineHeight)) {\n                this.lineHeight = lineHeight;\n            } else {\n                Rise.Logger.warning('Rise.Font.setLineHeight() -> \"%s\" is not valid value', lineHeight);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font family\n         * @return {String} Returns CSS font family\n         */\n        getFamily: function() {\n            return this.family;\n        },\n\n        /**\n         * Set font family to Rise.Font\n         * @param {String} family New CSS font family\n         * @return {Rise.Font} Returns Rise.Font instance\n         */\n        setFamily: function(family) {\n            if (Rise.Font.isFontFamilyValid(family)) {\n                this.family = family;\n            } else {\n                Rise.Logger.warning('Rise.Font.setFamily() -> \"%s\" is not valid value', family);\n            }\n\n            return this;\n        },\n\n        /**\n         * Convert Rise.Font to CSS string representation\n         * @return {String} Returns CSS string of Rise.Font representation\n         */\n        toString: function() {\n            return (\n                [\n                    this.getStyle(),\n                    this.getVariant(),\n                    this.getWeight(),\n                    this.getSize(),\n                    '/' + this.getLineHeight(),\n                    this.getFamily()\n                ].join(' ')\n            );\n        }\n    }, {\n        /**\n         * Map of CSS units\n         * @static\n         * @type {Array}\n         */\n        unitsMap: ['em', 'ex', 'pt', 'px', '%'],\n\n        /**\n         * Map of CSS font styles\n         * @static\n         * @type {Array}\n         */\n        fontStyleMap: ['normal', 'italic', 'oblique', 'inherit'],\n\n        /**\n         * Map of CSS font variants\n         * @static\n         * @type {Array}\n         */\n        fontVariantMap: ['normal', 'small-caps', 'inherit'],\n\n        /**\n         * Map of CSS font weights\n         * @static\n         * @type {Array}\n         */\n        fontWeightMap: ['bold', 'bolder', 'lighter', 'normal', '100', '200', '300', '400', '500', '600', '700', '800', '900'],\n\n        /**\n         * Map of CSS font sizes\n         * @static\n         * @type {Array}\n         */\n        fontSizeMap: ['xx-small', 'x-small', 'smaller', 'small', 'medium', 'large', 'larger', 'x-large', 'xx-large'],\n\n        /**\n         * Map of CSS font line heights\n         * @static\n         * @type {Array}\n         */\n        fontLineHeightMap: ['normal', 'inherit'],\n\n        /**\n         * Check if provided value is valid CSS value\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid CSS value\n         */\n        isCssValueValid: function(value) {\n            return Rise.Font.unitsMap.some(function(unit) {\n                return value.lastIndexOf(unit) != -1;\n            });\n        },\n\n        /**\n         * Check if provided value is valid CSS font style\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontStyleValid: function(value) {\n            return Rise.Font.fontStyleMap.indexOf(value) != -1;\n        },\n\n        /**\n         * Check if provided value is valid CSS font variant\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontVariantValid: function(value) {\n            return Rise.Font.fontVariantMap.indexOf(value) != -1;\n        },\n\n        /**\n         * Check if provided value is valid CSS font weight\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontWeightValid: function(value) {\n            return Rise.Font.fontWeightMap.indexOf(value) != -1;\n        },\n\n        /**\n         * Check if provided value is valid CSS font size\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontSizeValid: function(value) {\n            return (\n                Rise.Font.fontSizeMap.indexOf(value) != -1 ||\n                Rise.Font.isCssValueValid(value)\n            );\n        },\n\n        /**\n         * Check if provided value is valid CSS font line height\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontLineHeightValid: function(value) {\n            return (\n                Rise.Font.isCssValueValid(value) ||\n                Rise.Font.fontLineHeightMap.indexOf(value) != -1\n            );\n        },\n\n        /**\n         * Check if provided value is valid CSS font family\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontFamilyValid: function(value) {\n            // TODO: implement\n            return true;\n        },\n\n        /**\n         * Check whole Rise.Font instance for valid values\n         * @static\n         * @param  {Rise.Font}  font Rise.Font instance where need to check their font values\n         * @return {Boolean}         Returns true if Rise.Font is correct instance\n         */\n        isFontValid: function(font) {\n            return (\n                Rise.Font.isFontStyleValid(font.getStyle()) &&\n                Rise.Font.isFontVariantValid(font.getVariant()) &&\n                Rise.Font.isFontWeightValid(font.getWeight()) &&\n                Rise.Font.isFontSizeValid(font.getSize()) &&\n                Rise.Font.isFontLineHeightValid(font.getLineHeight()) &&\n                Rise.Font.isFontFamilyValid(font.getFamily())\n            );\n        },\n\n        /**\n         * Create Rise.Font instance from string representation\n         * @static\n         * @param  {String} font    Font string\n         * @return {Rise.Font}      Returns Rise.Font instance with parsed options from string\n         */\n        fromString: function(font) {\n            // TODO: implement\n            Rise.Logger.warning('Rise.Font -> fromString() not realized yet');\n            return new Rise.Font();\n        },\n\n        /**\n         * Create Rise.Font instance from exists node element\n         * @static\n         * @param  {Element} element Existing node element from where font options will parse\n         * @return {Rise.Font}       Returns Rise.Font instance\n         */\n        fromNode: function(element) {\n            var style = window.getComputedStyle(element, null);\n\n            return new Rise.Font({\n                style: style.getPropertyValue('font-style'),\n                variant: style.getPropertyValue('font-variant'),\n                weight: style.getPropertyValue('font-weight'),\n                size: style.getPropertyValue('font-size'),\n                lineHeight: style.getPropertyValue('line-height'),\n                family: style.getPropertyValue('font-family')\n            });\n        }\n    });\n})(this);\n(function(global) {\n    'use strict';\n\n    /**\n     * Current log level\n     * @type {Number}\n     * @private\n     */\n    var currentLogLevel = 3;\n\n    /**\n     * Check if level is allow to print message\n     * @param  {Integer}  level Level that need to check\n     * @return {Boolean}        Returns true if this level can be printed out\n     * @private\n     */\n    function isAllowedLevel(level) {\n        return level >= currentLogLevel;\n    }\n\n    /**\n     * Prepend message to every log message\n     * @param  {String} string Message to what will be prepended header message\n     * @return {String}        Returns resulting strint\n     * @private\n     */\n    function prependLoggerInfo(string) {\n        return ['Rise', new Date().toLocaleTimeString(), string].join(' -> ');\n    }\n\n    /**\n     * Invoke console methods\n     * @param  {String} type Type of console that need to be invoked\n     * @param  {Array} args Array of arguments to console method\n     * @private\n     * @example\n     * invokeConsole('log', ['test', 'test2']); // test test2\n     */\n    function invokeConsole(type, args) {\n        args = Array.prototype.slice.call(args, 0);\n\n        if (console[type] && Rise.Util.isFunction(console[type])) {\n            args[0] = prependLoggerInfo(args[0] ? args[0] : '');\n            console[type].apply(console, args);\n        }\n    }\n\n    /**\n     * Print welcome message to console\n     * @private\n     */\n    (function printWelcomeMessage() {\n        if (window.chrome) {\n            console.log.apply(console, [\n                '%c %c %c Rise v' + Rise.getVersion() + ' %c %c %c',\n                'background: #0E173E; font-size: 8pt;',\n                'background: #020C25; font-size: 9pt;',\n                'color: #FFFFFF; background: #0D0B0E; font-size: 10pt',\n                'background: #020C25; font-size: 9pt;',\n                'background: #0E173E; font-size: 8pt;',\n                'background: #0E173E; font-size: 8pt;'\n            ]);\n        } else {\n            console.log('Rise v' + Rise.getVersion());\n        }\n    })();\n\n    /**\n     * Logger object\n     * @static\n     * @type {Object}\n     */\n    var Logger = {\n        /**\n         * Allow print out all messages\n         * @static\n         * @type {Number}\n         */\n        VERBOSE: 1,\n\n        /**\n         * Allow print out only .debug(), .error(), .warn(), .info()\n         * @static\n         * @type {Number}\n         */\n        DEBUG: 2,\n\n        /**\n         * Allow print out only .error(), .warn(), .info()\n         * @static\n         * @type {Number}\n         */\n        ERROR: 3,\n\n        /**\n         * Allow print out only .warn() and .info()\n         * @static\n         * @type {Number}\n         */\n        WARNING: 4,\n\n        /**\n         * Allow print out only .info()\n         * @static\n         * @type {Number}\n         */\n        INFO: 5,\n\n        /**\n         * Disable all logs\n         * @static\n         * @type {Number}\n         */\n        OFF: 100,\n\n        /**\n         * Set current level for logger\n         * @param {Integer} level Predefined constant in Rise.Logger\n         * @return {Rise.Logger}\n         * @static\n         * @example\n         * Rise.Logger.setLevel(Rise.Logger.VERBOSE);\n         */\n        setLevel: function(level) {\n            currentLogLevel = level;\n            return this;\n        },\n\n        /**\n         * Get current log level\n         * @static\n         * @return {Integer} Returns integer value of current log level\n         */\n        getLevel: function() {\n            return currentLogLevel;\n        },\n\n        /**\n         * Log message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        log: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('log', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Debug message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        debug: function() {\n            if (isAllowedLevel(this.DEBUG)) {\n                invokeConsole('debug', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Error message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        error: function() {\n            if (isAllowedLevel(this.ERROR)) {\n                invokeConsole('error', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Warning message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        warning: function() {\n            if (isAllowedLevel(this.WARNING)) {\n                invokeConsole('warn', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Info message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        info: function() {\n            if (isAllowedLevel(this.INFO)) {\n                invokeConsole('info', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Start new group in console\n         * @static\n         * @param {Boolean} startCollapsed If you set true for first argument, group will be collapsed\n         * @return {Rise.Logger}\n         */\n        startGroup: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                if (Rise.Util.isBoolean(arguments[0]) && arguments[0] === true) {\n                    invokeConsole('groupCollapsed', Array.prototype.slice.call(arguments, 1));\n                } else {\n                    invokeConsole('group', arguments);\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * End current group in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        endGroup: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('groupEnd', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Start profiling time in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        startTime: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('time', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * End profiling time in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        endTime: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('timeEnd', arguments);\n            }\n\n            return this;\n        }\n    };\n\n    global.Rise.Logger = Logger;\n\n})(this);\n(function(global) {\n    'use strict';\n\n    /**\n     * Factory method that returns new Rise.RQuery instance\n     * @return {Rise.RQuery} Returns Rise.RQuery instance\n     */\n    global.Rise.$ = function() {\n        return Rise.RQuery.apply(Object.create(Rise.RQuery.prototype), arguments);\n    };\n\n    global.Rise.RQuery = Rise.Class.extend({\n        /**\n         * Create new Rise.RQuery instance\n         * @constructor\n         * @param  {String|Rise.RQuery|Element|Array} selector Selector or exists Elements\n         * @param  {Element|Document|Window} parent Parent from where selector will parse\n         * @return {Rise.RQuery} Returns Rise.RQuery instance\n         */\n        init: function(selector, parent) {\n            selector = selector || window;\n            parent = parent || document;\n\n            var pushElement = function(element) {\n                if (element instanceof Element) {\n                    this.elements.push(element);\n                }\n            }.bind(this);\n\n            this.elements = [];\n\n            Rise.Logger.startGroup(true, 'Rise.RQuery -> init()');\n            Rise.Logger.log('Parsing selector -> \"%O\" with parent -> %O', selector, parent);\n\n            if (selector instanceof Rise.RQuery) {\n                this.elements = selector.get();\n            } else if (Rise.Util.isArray(selector) || selector instanceof HTMLCollection) {\n                Array.prototype.forEach.call(selector, pushElement);\n            } else if (selector instanceof Element || selector instanceof Window) {\n                this.elements[0] = selector;\n            } else if (Rise.Util.isString(selector)) {\n                Array.prototype.forEach.call(parent.querySelectorAll(selector), pushElement);\n            } else {\n                Rise.Logger.warning('Selector is not valid -> %O', selector);\n            }\n\n            Rise.Logger.log('Instantiated Rise.RQuery -> %O', this);\n            Rise.Logger.endGroup();\n\n            return this;\n        },\n\n        /**\n         * Get Element by index\n         * @param  {Integer} index Index\n         * @return {Array|Element} Returns Element with corresponding index\n         */\n        get: function(index) {\n            return Rise.Util.isUndefined(index) ? this.elements : this.elements[index];\n        },\n\n        /**\n         * Get elements count\n         * @return {Integer} Returns count\n         */\n        count: function() {\n            return (this.elements && this.elements.length) || 0;\n        },\n\n        /**\n         * Iterate through all elements and call callback function\n         * @param  {Function} cb Callback which called at each iteration cb(element, index, array)\n         * @return {Rise.RQuery}\n         */\n        each: function(cb) {\n            Array.prototype.forEach.call(this.get(), cb);\n            return this;\n        },\n\n        /**\n         * Get next sibling element\n         * @return {Rise.RQuery} Returns next sibling element\n         */\n        next: function() {\n            return new Rise.RQuery(this.get(0).nextElementSibling);\n        },\n\n        /**\n         * Get previous sibling element\n         * @return {Rise.RQuery} Returns previous sibling element from current element\n         */\n        prev: function() {\n            return new Rise.RQuery(this.get(0).previousElementSibling);\n        },\n\n        /**\n         * Get all siblings elements\n         * @return {Rise.RQuery} Returns Rise.RQuery instance with all siblings elements\n         */\n        siblings: function() {\n            var element = this.get(0);\n\n            return new Rise.RQuery(Array.prototype.filter.call(element.parentNode.children, function(children) {\n                return element !== children;\n            }));\n        },\n\n        /**\n         * Get Rise.RQuery object with parent node\n         * @member Rise.RQuery\n         * @return {Rise.RQuery} Returns parent node of element\n         */\n        parent: function() {\n            return new Rise.RQuery(this.get(0).parentNode);\n        },\n\n        /**\n         * Get all childrens of Element\n         * @member Rise.RQuery\n         * @return {Rise.RQuery} Return Rise.RQuery object with child nodes of this element\n         */\n        children: function() {\n            return new Rise.RQuery(this.get(0).children);\n        },\n\n        /**\n         * Check if element contains other element\n         * @param {Rise.RQuery} child Child element which need check for existing in this element\n         * @return {Boolean} True if contains\n         */\n        contains: function(child) {\n            var element = this.get(0);\n            return element !== child && element.contains(child);\n        },\n\n        /**\n         * Get offset of element\n         * @return {Object} Returns object with left, top properties\n         */\n        offset: function() {\n            var boundingBox = this.getBoundingBox();\n\n            return {\n                left: boundingBox.left + document.body.scrollLeft,\n                top: boundingBox.top + document.body.scrollTop\n            };\n        },\n\n        /**\n         * Get width of element including padding, border, content.\n         * @member Rise.RQuery\n         * @return {Integer} Returns offsetWidth of element\n         */\n        offsetWidth: function() {\n            return this.get(0).offsetWidth;\n        },\n\n        /**\n         * Get height of element including padding, border and content.\n         * @member Rise.RQuery\n         * @return {Integer} Returns offsetHeight of element\n         */\n        offsetHeight: function() {\n            return this.get(0).offsetHeight;\n        },\n\n        /**\n         * Get actual width of element including only padding\n         * @member Rise.RQuery\n         * @return {Integer} Returns clientWidth of element\n         */\n        clientWidth: function() {\n            return this.get(0).clientWidth;\n        },\n\n        /**\n         * Get actual height of element including only padding\n         * @member Rise.RQuery\n         * @return {Integer} Returns clientHeight of element\n         */\n        clientHeight: function() {\n            return this.get(0).clientHeight;\n        },\n\n        /**\n         * Get entire width of element with scrollbar content.\n         * @member Rise.RQuery\n         * @return {Integer} Returns scrollWidth of element\n         */\n        scrollWidth: function() {\n            return this.get(0).scrollWidth;\n        },\n\n        /**\n         * Get entire height of element with scrollbar content\n         * @member Rise.RQuery\n         * @return {Integer} Returns scrollHeight of element\n         */\n        scrollHeight: function() {\n            return this.get(0).scrollHeight;\n        },\n\n        /**\n         * Get offsetLeft of element\n         * @member Rise.RQuery\n         * @return {Integer} Returns offsetLeft of element\n         */\n        offsetLeft: function() {\n            return this.get(0).offsetLeft;\n        },\n\n        /**\n         * Get offsetTop of element\n         * @member Rise.RQuery\n         * @return {Integer} Returns offsetTop of element\n         */\n        offsetTop: function() {\n            return this.get(0).offsetTop;\n        },\n\n        /**\n         * Get position of element\n         * @return {Object} Returns object with left, top properties\n         */\n        position: function() {\n            return {\n                left: this.offsetLeft(),\n                top: this.offsetTop()\n            };\n        },\n\n        /**\n         * Focus at this element\n         * @member Rise.RQuery\n         * @return {Rise.RQuery}\n         */\n        focus: function() {\n            this.get(0).focus();\n            return this;\n        },\n\n        /**\n         * Unfocus this element\n         * @member Rise.RQuery\n         * @return {Rise.RQuery}\n         */\n        blur: function() {\n            this.get(0).blur();\n            return this;\n        },\n\n        /**\n         * Hide element\n         * @return {Rise.RQuery}\n         */\n        hide: function() {\n            return this.each(function(element) {\n                element.style.display = 'none';\n            });\n        },\n\n        /**\n         * Show element\n         * @return {Rise.RQuery}\n         */\n        show: function() {\n            return this.each(function(element) {\n                element.style.display = '';\n            });\n        },\n\n        /**\n         * Select only elements which checked with filter\n         * @member Rise.RQuery\n         * @param  {Function} cb If your function return true then element will be appended to resulting array\n         * @return {Rise.RQuery} Returns Rise.RQuery objects with elements which only checked with filter.\n         */\n        filter: function(cb) {\n            if (Rise.Util.getType(cb) == 'function') {\n                return new Rise.RQuery(Array.prototype.filter.call(this.get(), cb));\n            } else {\n                Rise.Logger.warning('Rise.RQuery.filter() -> You must provide function');\n            }\n        },\n\n        /**\n         * Find elements by selector from this parent\n         * @member Rise.RQuery\n         * @param  {String} selector\n         * @return {Rise.RQuery}\n         */\n        find: function(selector) {\n            return new Rise.RQuery(selector, this.get(0));\n        },\n\n        /**\n         * Set or get attribute value\n         * @member Rise.RQuery\n         * @param  {String|Object} options If string then get attribute value or Object if set attributes\n         * @return {Rise.RQuery}\n         */\n        attr: function(options) {\n            if (Rise.Util.getType(options) == 'string') {\n                return this.get(0).getAttribute(options);\n            } else if (Rise.Util.getType(options) == 'object') {\n                Rise.Logger.startGroup('Rise.RQuery -> Setting attributes');\n                this.each(function(element) {\n                    for (var property in options) {\n                        Rise.Logger.log('Set %s -> %s to %O element', property, options[property], element);\n                        element.setAttribute(property, options[property]);\n                    }\n                });\n                Rise.Logger.endGroup();\n            }\n\n            return this;\n        },\n\n        /**\n         * Set or get css-rules\n         * @member Rise.RQuery\n         * @param  {String|Object} name String if you want get CSS-rule or Object for set CSS-rules\n         * @param {String} pseudoElement If you want you can provide pseudoElement selector\n         * @return {Rise.RQuery}\n         * @example\n         * Rise.RQuery('#someElement').css({\n         *     width: 200\n         * });\n         * Rise.RQuery('#someElement').css('width', ':after');\n         * Rise.RQuery('#someElement').css('width');\n         */\n        css: function(css, pseudoElement) {\n            pseudoElement = pseudoElement || null;\n\n            if (Rise.Util.getType(css) == 'string') {\n                return window.getComputedStyle(this.get(0), pseudoElement).getPropertyValue(css);\n            } else if (Rise.Util.getType(css) == 'object') {\n                Rise.Logger.startGroup('Rise.RQuery -> Setting CSS');\n                this.each(function(element) {\n                    for (var property in css) {\n                        Rise.Logger.log('Set %s -> %s to %O element', property, css[property], element);\n                        if (css[property] === false) {\n                            element.style.removeProperty(Rise.Util.getDashedString(property));\n                        } else if (isNaN(css[property]) || cssNumbersMap.indexOf(property) != -1) {\n                            element.style[Rise.Util.getCamelizedString(property)] = css[property];\n                        } else {\n                            element.style[Rise.Util.getCamelizedString(property)] = css[property] + 'px';\n                        }\n                    }\n                });\n                Rise.Logger.endGroup();\n            }\n\n            return this;\n        },\n\n        /**\n         * Wrap matched elements with new Element\n         * @param  {Rise.RQuery} html Rise.RQuery instance with HTML which will be a wrapper.\n         * @member Rise.RQuery\n         * @return {Rise.RQuery}\n         * @example\n         * Rise.RQuery('div').wrap(Rise.RQuery.create('a')); // Wrap all div with a\n         */\n        wrap: function(html) {\n            var wrapper;\n\n            return this.each(function(element) {\n                wrapper = html.clone();\n                element.parentNode.insertBefore(wrapper.get(0), element);\n                wrapper.append(element);\n            });\n        },\n\n        /**\n         * Unwrap Element.\n         * In other words remove parent node from Element.\n         * @member Rise.RQuery\n         * @return {Rise.RQuery}\n         */\n        unwrap: function() {\n            return this.each(function(element) {\n                element.parentNode.parentNode.replaceChild(element, element.parentNode);\n            });\n        },\n\n        /**\n         * Check if this element is matching selector.\n         * @member Rise.RQuery\n         * @param  {String} selector\n         * @return {Boolean} Return true if all elements is match the selector and false otherwise\n         */\n        is: function(selector) {\n            var element;\n\n            if (this.count() > 0) {\n                element = this.get(0);\n\n                return (\n                    element.matches ||\n                    element.matchesSelector ||\n                    element.msMatchesSelector ||\n                    element.mozMatchesSelector ||\n                    element.webkitMatchesSelector ||\n                    element.oMatchesSelector\n                ).call(element, selector);\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Add class name to elements\n         * @member Rise.RQuery\n         * @param {String} names Add class to elements\n         * @return {Rise.RQuery}\n         */\n        addClass: function(names) {\n            names = names.split(/[ ]+/);\n\n            return this.each(function(element) {\n                names.forEach(function(name) {\n                    element.classList.add(name);\n                });\n            });\n        },\n\n        /**\n         * Remove class name from elements\n         * @member Rise.RQuery\n         * @param  {String} names Remove class from elements\n         * @return {Rise.RQuery}\n         */\n        removeClass: function(names) {\n            names = names.split(/[ ]+/);\n\n            return this.each(function(element) {\n                names.forEach(function(name) {\n                    element.classList.remove(name);\n                });\n            });\n        },\n\n        /**\n         * Toggle class name for elements\n         * @member Rise.RQuery\n         * @param  {String} names Toggle class name for elements\n         * @return {Rise.RQuery}\n         */\n        toggleClass: function(names) {\n            names = names.split(/[ ]+/);\n\n            return this.each(function(element) {\n                names.forEach(function(name) {\n                    element.classList.toggle(name);\n                });\n            });\n        },\n\n        /**\n         * Check if elements have this class name\n         * @member Rise.RQuery\n         * @param  {String}  className Check if elements collection have this class name\n         * @return {Boolean}\n         */\n        hasClass: function(name) {\n            if (this.count() > 0) {\n                return Array.prototype.every.call(this.get(), function(element) {\n                    return element.classList.contains(name);\n                });\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Bind event to elements\n         * @member Rise.RQuery\n         * @param  {String|Object} eventType Event type. For example 'click' or 'dblclick'.\n         * @param  {Function} handler Your function which you want execute on event.\n         * @return {Rise.RQuery}\n         */\n        on: function(eventType, handler) {\n            if (Rise.Util.getType(eventType) == 'object') {\n                for (var property in eventType) {\n                    this.on(property, eventType[property]);\n                }\n            } else {\n                Rise.Logger.startGroup('Rise.RQuery -> Binding events');\n                this.each(function(element) {\n                    Rise.Logger.log('Binding event %s to %O', eventType, element);\n                    element.addEventListener(eventType, handler, false);\n                });\n                Rise.Logger.endGroup();\n            }\n\n            return this;\n        },\n\n        /**\n         * Unbind event to elements\n         * @member Rise.RQuery\n         * @param  {String} eventType Event type. For example 'click' or 'dblclick'.\n         * @param  {Function} handler Your function which you want unsubscribe from event.\n         * @return {Rise.RQuery}\n         */\n        off: function(eventType, handler) {\n            if (Rise.Util.getType(eventType) == 'object') {\n                for (var property in eventType) {\n                    this.off(property, eventType[property]);\n                }\n            } else {\n                Rise.Logger.startGroup('Rise.RQuery -> Unbinding events');\n                this.each(function(element) {\n                    Rise.Logger.log('Unbinding event %s from %O element', eventType, element);\n                    element.removeEventListener(eventType, handler, false);\n                });\n                Rise.Logger.endGroup();\n            }\n\n            return this;\n        },\n\n        /**\n         * Bind ready event\n         * @param  {Function} cb\n         * @return {Rise.RQuery}\n         */\n        ready: function(cb) {\n            document.addEventListener('DOMContentLoaded', cb);\n            return this;\n        },\n\n        /**\n         * Trigger native event for element\n         * @param  {String} eventName Name of event\n         * @return {Rise.RQuery}\n         */\n        trigger: function(eventName) {\n            var event = document.createEvent('HTMLEvents');\n\n            event.initEvent(eventName, true, false);\n            this.get(0).dispatch(event);\n\n            return this;\n        },\n\n        /**\n         * Bind live-event to this element\n         * @member Rise.RQuery\n         * @param  {String} eventType EventType name\n         * @param  {Function} handler Handler for event\n         * @return {Rise.RQuery}\n         */\n        live: function(eventType, handler) {\n            var self = this,\n                founded = false,\n                target;\n\n            document.addEventListener(eventType, function(event) {\n                target = event.target;\n                self.each(function(element) {\n                    while (target && !(founded = element === target)) {\n                        target = target.parentElement;\n                    }\n\n                    if (founded) {\n                        handler.call(new Rise.RQuery(element), event);\n                    }\n                });\n            });\n\n            Rise.Logger.log('Binded live event %s to elements %O', eventType, this.get());\n\n            return this;\n        },\n\n        /**\n         * Remove elements from the DOM\n         * @member Rise.RQuery\n         * @return {Rise.RQuery}\n         */\n        remove: function() {\n            return this.each(function(element) {\n                if (element && element.parentNode) {\n                    element.parentNode.removeChild(element);\n                }\n            });\n        },\n\n        /**\n         * Get or set HTML to Elements. If arguments not provided then returns exists HTML string.\n         * @member Rise.RQuery\n         * @param  {String|Rise.RQuery} [html] HTML-string\n         * @return {Rise.RQuery|String}\n         */\n        html: function(html) {\n            if (html) {\n                return this.each(function(element) {\n                    new Rise.RQuery(element).empty().append(html);\n                });\n            } else {\n                return this.get(0).innerHTML;\n            }\n        },\n\n        /**\n         * Append HTML before element's end\n         * @member Rise.RQuery\n         * @param  {String|Rise.RQuery|Element} html You can send String or existing Element\n         * @return {Rise.RQuery}\n         */\n        append: function(html) {\n            if (Rise.Util.getType(html) == 'string') {\n                this.each(function(element) {\n                    element.insertAdjacentHTML('beforeend', html);\n                });\n            } else if (html instanceof Rise.RQuery) {\n                this.each(function(element) {\n                    element.appendChild(html.get(0));\n                });\n            } else if (html instanceof Element) {\n                this.each(function(element) {\n                    element.appendChild(html);\n                });\n            }\n\n            return this;\n        },\n\n        /**\n         * Prepend HTML after element's begin\n         * @member Rise.RQuery\n         * @param  {String|Rise.RQuery|Element} html You can send String or existing Element\n         * @return {Rise.RQuery}\n         */\n        prepend: function(html) {\n            if (Rise.Util.getType(html) == 'string') {\n                this.each(function(element) {\n                    element.insertAdjacentHTML('afterbegin', html);\n                });\n            } else if (html instanceof Rise.RQuery) {\n                this.each(function(element) {\n                    element.insertBefore(html.get(0), element.firstChild);\n                });\n            } else if (html instanceof Element) {\n                this.each(function(element) {\n                    element.insertBefore(html, element.firstChild);\n                });\n            }\n\n            return this;\n        },\n\n        /**\n         * Set or get inner text. If text not provided then returns text.\n         * @member Rise.RQuery\n         * @param  {String} text Text which you want to set in elements\n         * @return {Rise.RQuery|String}\n         */\n        text: function(text) {\n            if (text) {\n                return this.each(function(element) {\n                    element.textContent = text;\n                });\n            } else {\n                return this.get(0).textContent;\n            }\n        },\n\n        /**\n         * Remove all child nodes from elements\n         * @member Rise.RQuery\n         * @return {Rise.RQuery}\n         */\n        empty: function() {\n            return this.each(function(element) {\n                element.innerHTML = '';\n            });\n        },\n\n        /**\n         * Clone Element and return it\n         * @member Rise.RQuery\n         * @return {Rise.RQuery}\n         */\n        clone: function() {\n            var clones = [];\n\n            this.each(function(element) {\n                clones.push(element.cloneNode(true));\n            });\n\n            return new Rise.RQuery(clones);\n        },\n\n        /**\n         * Get bounding box of node\n         * @member Rise.RQuery\n         * @return {Object} Returns object with left, top, bottom, right, width, height properties\n         */\n        getBoundingBox: function() {\n            var boundingBox = false,\n                currentBoundingBox;\n\n            this.each(function(node) {\n                currentBoundingBox = node.getBoundingClientRect();\n                boundingBox = boundingBox || Rise.Util.extend({}, currentBoundingBox);\n\n                boundingBox.bottom = currentBoundingBox.bottom > (boundingBox.bottom || 0) ? currentBoundingBox.bottom : boundingBox.bottom;\n                boundingBox.left = currentBoundingBox.left < (boundingBox.left || 0) ? currentBoundingBox.left : boundingBox.left;\n                boundingBox.right = currentBoundingBox.right > (boundingBox.right || 0) ? currentBoundingBox.right : boundingBox.right;\n                boundingBox.top = currentBoundingBox.top < (boundingBox.top || 0) ? currentBoundingBox.top : boundingBox.top;\n\n                boundingBox.height = boundingBox.bottom - boundingBox.top;\n                boundingBox.width = boundingBox.right - boundingBox.left;\n            });\n\n            return boundingBox;\n        }\n    }, {\n        /**\n         * Map of CSS attributes which have numbers at value\n         * @static\n         * @type {Array}\n         */\n        cssNumbersMap: [\n            \"columnCount\",\n            \"fillOpacity\",\n            \"flexGrow\",\n            \"flexShrink\",\n            \"fontWeight\",\n            \"lineHeight\",\n            \"opacity\",\n            \"order\",\n            \"orphans\",\n            \"widows\",\n            \"zIndex\",\n            \"zoom\"\n        ],\n\n        create: function(tag) {\n            Rise.Logger.log('Creating new Element \"%s\"', tag);\n            return new Rise.RQuery(document.createElement(tag));\n        }\n    });\n})(this);\n(function(global) {\n    'use strict';\n\n    /**\n     * Util object\n     * @static\n     * @type {Object}\n     */\n    var Util = {\n        /**\n         * Get type of variable\n         * @static\n         * @param  {Mixed} value Variable that might be checked\n         * @return {String}       Returns string representation of type\n         */\n        getType: function(value) {\n            return Object.prototype.toString.call(value).replace(/^\\[object (.+)\\]$/, '$1').toLowerCase();\n        },\n\n        /**\n         * Check if this object\n         * @static\n         * @param  {Mixed}  object Value that might be checked\n         * @return {Boolean}       Returns true if object\n         */\n        isObject: function(object) {\n            return this.getType(object) == 'object';\n        },\n\n        /**\n         * Check if this is number\n         * @static\n         * @param  {Mixed}  number Value that might be checked\n         * @return {Boolean}       Returns true if number\n         */\n        isNumber: function(number) {\n            return (\n                this.getType(number) == 'number' &&\n                !isNaN(number) &&\n                isFinite(number)\n            );\n        },\n\n        /**\n         * Check if this array\n         * @static\n         * @param  {Mixed}  array Value that might be checked\n         * @return {Boolean}      Returns true if array\n         */\n        isArray: function(array) {\n            return this.getType(array) == 'array';\n        },\n\n        /**\n         * Check if this is boolean\n         * @static\n         * @param  {Mixed}  bool Value that might be checked\n         * @return {Boolean}      Returns true if boolean\n         */\n        isBoolean: function(bool) {\n            return this.getType(bool) == 'boolean';\n        },\n\n        /**\n         * Check if this function\n         * @static\n         * @param  {Mixed}  method Value that might be checked\n         * @return {Boolean}       Returns true if function\n         */\n        isFunction: function(method) {\n            return this.getType(method) == 'function';\n        },\n\n        /**\n         * Check if this is string\n         * @static\n         * @param  {Mixed}  string Value that might be checked\n         * @return {Boolean}       Returns true if string\n         */\n        isString: function(string) {\n            return this.getType(string) == 'string';\n        },\n\n        /**\n         * Check if this is undefined\n         * @static\n         * @param  {Mixed}  value Value that might be checked\n         * @return {Boolean}       Returns true if undefined\n         */\n        isUndefined: function(value) {\n            return (\n                this.getType(value) == 'undefined' ||\n                this.getType(value) == 'domwindow'\n            );\n        },\n\n        /**\n         * Get random string\n         * @static\n         * @param  {String} prepend   String which prepends to random string\n         * @param  {String} append    String which appends to random string\n         * @param  {String} separator String which separate prepender and appender\n         * @return {String}           Returns random generated string\n         * @memberOf Rise.Util\n         */\n        getRandomString: function(prepend, append, separator) {\n            prepend = prepend === undefined ? '' : prepend;\n            append = append === undefined ? '' : append;\n            separator = separator === undefined ? '' : separator;\n\n            return [prepend, Math.random().toString(36).slice(2), append].join(separator);\n        }\n    };\n\n    global.Rise.Util = Util;\n\n})(this);"],"sourceRoot":"/source/"}