{"version":3,"file":"rise.min.js","sources":["rise.min.js"],"names":["global","Rise","this","VERSION","prototype","Object","create","getVersion","copyProperties","source","target","parent","keys","forEach","key","test","wrapMethod","method","parentMethod","backup","_super","apply","arguments","Class","extend","staticProperties","mixins","Constructor","init","constructor","i","length","Font","options","Logger","startGroup","log","style","variant","weight","size","lineHeight","family","isFontValid","warning","toString","endGroup","isValid","getStyle","setStyle","isFontStyleValid","getVariant","setVariant","isFontVariantValid","getWeight","setWeight","isFontWeightValid","getSize","setSize","isFontSizeValid","getLineHeight","setLineHeight","isFontLineHeightValid","getFamily","setFamily","isFontFamilyValid","join","unitsMap","fontStyleMap","fontVariantMap","fontWeightMap","fontSizeMap","fontLineHeightMap","isCssValueValid","value","some","unit","lastIndexOf","indexOf","font","fromString","fromNode","element","window","getComputedStyle","getPropertyValue","isAllowedLevel","level","currentLogLevel","prependLoggerInfo","string","Date","toLocaleTimeString","invokeConsole","type","args","Array","slice","call","console","Util","isFunction","chrome","VERBOSE","DEBUG","ERROR","WARNING","INFO","OFF","setLevel","getLevel","debug","error","info","isBoolean","startTime","endTime","$","RQuery","tag","document","createElement","selector","pushElement","Element","elements","push","bind","get","isArray","HTMLCollection","Window","isString","querySelectorAll","index","isUndefined","count","each","cb","parentNode","children","contains","child","offset","boundingBox","getBoundingClientRect","top","body","scrollTop","left","scrollLeft","offsetWidth","offsetHeight","offsetLeft","offsetTop","position","focus","blur","filter","find","attr","getAttribute","isObject","setAttribute","css","pseudoElement","getDashedString","removeProperty","getCamelizedString","isNaN","cssNumbersMap","wrap","html","wrapper","clone","insertBefore","append","unwrap","replaceChild","is","matches","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","addClass","names","split","name","classList","add","removeClass","remove","toggleClass","toggle","hasClass","every","on","eventType","handler","addEventListener","off","removeEventListener","trigger","eventName","event","createEvent","initEvent","dispatch","removeChild","innerHTML","empty","insertAdjacentHTML","appendChild","prepend","firstChild","text","textContent","clones","cloneNode","copyObject","destination","replace","letter","toUpperCase","toLowerCase","getRandomString","separator","undefined","Math","random","getType","object","isNumber","number","isFinite","array","bool"],"mappings":"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","sourcesContent":["(function(global) {\n    /**\n     * Current version of Rise\n     * @type {String}\n     * @private\n     */\n    var VERSION = '0.0.1 -> alpha';\n\n    /**\n     * Rise constuctor\n     * @constructor\n     */\n    function Rise() {\n        return this;\n    }\n\n    Rise.prototype = Object.create({});\n\n    /**\n     * Get current version\n     * @return {String} Returns current version\n     * @private\n     */\n    Rise.getVersion = function() {\n        return VERSION;\n    };\n\n    global.Rise = Rise;\n\n})(this);\n(function(global) {\n    'use strict';\n\n    /**\n     * Copy properties from parent to target object\n     * @param  {Object} source Object from where properties will be copied\n     * @param  {Object} target Object to where properties will copy\n     * @param  {Object} parent Parent object\n     * @private\n     */\n    function copyProperties(source, target, parent) {\n        Object.keys(source).forEach(function(key) {\n            if (\n                typeof source[key] == \"function\" &&\n                typeof parent[key] == \"function\" &&\n                /\\b_super\\b/.test(source[key])\n            ) {\n                target[key] = wrapMethod(source[key], parent[key]);\n            } else {\n                target[key] = source[key];\n            }\n        });\n    }\n\n    /**\n     * Wrap method with parent method.\n     * Useful for create this._super() in subclasses.\n     * @param  {Function} method       Method that need to be wrapped\n     * @param  {Function} parentMethod Parent method in other works - this._super();\n     * @return {Function}              Returns wrapped function\n     * @private\n     */\n    function wrapMethod(method, parentMethod) {\n        return function() {\n            var backup = this._super;\n            this._super = parentMethod;\n\n            try {\n                return method.apply(this, arguments);\n            } finally {\n                this._super = backup;\n            }\n        };\n    }\n\n    /**\n     * Empty function (interface)\n     * @private\n     */\n    function Class() {}\n\n    /**\n     * Create new Class or extend exists\n     * @static\n     * @param {Array} [mixins] Optional parameter. Array of mixins which need to inject in new Class\n     * @param {Object} prototype Prototype object for new Class\n     * @param {Object} staticProperties Object with static properties for new Class. Will send in Object.defineProperties.\n     * @return {Object} Returns new Class\n     *\n     * @example\n     * Rise.Class.extend([prototype])\n     * Rise.Class.extend([prototype], [staticProperties])\n     * Rise.Class.extend([prototype], [staticProperties], [mixins])\n     */\n    Class.extend = function(prototype, staticProperties, mixins) {\n        prototype = prototype || {};\n        staticProperties = staticProperties || {};\n        mixins = mixins || [];\n\n        function Constructor() {\n            return this.init && this.init.apply(this, arguments);\n        }\n\n        Constructor.prototype = Object.create(this.prototype);\n        Constructor.prototype.constructor = Constructor;\n        Constructor.extend = Class.extend;\n\n        copyProperties(staticProperties, Constructor, this);\n        copyProperties(prototype, Constructor.prototype, this.prototype);\n        for (var i = mixins.length - 1; i >= 0; i--) {\n            copyProperties(mixins[i], Constructor.prototype, this.prototype);\n        }\n\n        return Constructor;\n    };\n\n    global.Rise.Class = Class;\n\n})(this);\n(function(global) {\n    'use strict';\n\n    global.Rise.Font = Rise.Class.extend({\n        /**\n         * Create new Font object\n         * @constructor\n         * @param  {Object} options Font options\n         * @return {Rise.Font}      Returns Rise.Font instance\n         */\n        init: function(options) {\n            options = options || {};\n\n            Rise.Logger.startGroup(true, 'Rise.Font -> init()');\n            Rise.Logger.log('Trying to parse options object -> %O', options);\n\n            this.style = options.style || 'normal';\n            this.variant = options.variant || 'normal';\n            this.weight = options.weight || 'normal';\n            this.size = options.size || 'medium';\n            this.lineHeight = options.lineHeight || 'normal';\n            this.family = options.family || 'serif';\n\n            if (!Rise.Font.isFontValid(this)) {\n                Rise.Logger.warning('Something wrong with options -> %O', options);\n                Rise.Logger.warning('Rise.Font created with this font -> \"%s\"', this.toString());\n            }\n\n            Rise.Logger.log('Instantiated Rise.Font -> %O', this);\n            Rise.Logger.endGroup();\n\n            return this;\n        },\n\n        /**\n         * Check if Rise.Font is valid instance\n         * @return {Boolean} Returns true if Rise.Font instance valid\n         */\n        isValid: function() {\n            return Rise.Font.isFontValid(this);\n        },\n\n        /**\n         * Get current style\n         * @return {String} Returns CSS font style\n         */\n        getStyle: function() {\n            return this.style;\n        },\n\n        /**\n         * Set style to Rise.Font\n         * @param {String} style New CSS font style\n         * @return {Rise.Font} Returns Rise.Font instance\n         */\n        setStyle: function(style) {\n            if (Rise.Font.isFontStyleValid(style)) {\n                this.style = style;\n            } else {\n                Rise.Logger.warning('Rise.Font.setStyle() -> \"%s\" is not valid value', style);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font variant\n         * @return {String} Returns CSS font variant\n         */\n        getVariant: function() {\n            return this.variant;\n        },\n\n        /**\n         * Set font variant to Rise.Font\n         * @param {String} variant New CSS font variant\n         * @return {Rise.Font} Returns Rise.Font instance\n         */\n        setVariant: function(variant) {\n            if (Rise.Font.isFontVariantValid(variant)) {\n                this.variant = variant;\n            } else {\n                Rise.Logger.warning('Rise.Font.setVariant() -> \"%s\" is not valid value', variant);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font weight\n         * @return {String} Returns CSS font weight\n         */\n        getWeight: function() {\n            return this.weight;\n        },\n\n        /**\n         * Set font weight to Rise.Font\n         * @param {String} weight New CSS font weight\n         * @return {Rise.Font} Returns Rise.Font instance\n         */\n        setWeight: function(weight) {\n            if (Rise.Font.isFontWeightValid(weight)) {\n                this.weight = weight;\n            } else {\n                Rise.Logger.warning('Rise.Font.setWeight() -> \"%s\" is not valid value', weight);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font size\n         * @return {String} Returns CSS font size\n         */\n        getSize: function() {\n            return this.size;\n        },\n\n        /**\n         * Set font size to Rise.Font\n         * @param {String} size New CSS font size\n         * @return {Rise.Font} Returns Rise.Font instance\n         */\n        setSize: function(size) {\n            if (Rise.Font.isFontSizeValid(size)) {\n                this.size = size;\n            } else {\n                Rise.Logger.warning('Rise.Font.setSize() -> \"%s\" is not valid value', size);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font line height\n         * @return {String} Returns CSS font line-height\n         */\n        getLineHeight: function() {\n            return this.lineHeight;\n        },\n\n        /**\n         * Set font line height to Rise.Font\n         * @param {String} lineHeight New CSS font line-height\n         * @return {Rise.Font} Returns Rise.Font instance\n         */\n        setLineHeight: function(lineHeight) {\n            if (Rise.Font.isFontLineHeightValid(lineHeight)) {\n                this.lineHeight = lineHeight;\n            } else {\n                Rise.Logger.warning('Rise.Font.setLineHeight() -> \"%s\" is not valid value', lineHeight);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font family\n         * @return {String} Returns CSS font family\n         */\n        getFamily: function() {\n            return this.family;\n        },\n\n        /**\n         * Set font family to Rise.Font\n         * @param {String} family New CSS font family\n         * @return {Rise.Font} Returns Rise.Font instance\n         */\n        setFamily: function(family) {\n            if (Rise.Font.isFontFamilyValid(family)) {\n                this.family = family;\n            } else {\n                Rise.Logger.warning('Rise.Font.setFamily() -> \"%s\" is not valid value', family);\n            }\n\n            return this;\n        },\n\n        /**\n         * Convert Rise.Font to CSS string representation\n         * @return {String} Returns CSS string of Rise.Font representation\n         */\n        toString: function() {\n            return (\n                [\n                    this.getStyle(),\n                    this.getVariant(),\n                    this.getWeight(),\n                    this.getSize(),\n                    '/' + this.getLineHeight(),\n                    this.getFamily()\n                ].join(' ')\n            );\n        }\n    }, {\n        /**\n         * Map of CSS units\n         * @static\n         * @type {Array}\n         */\n        unitsMap: ['em', 'ex', 'pt', 'px', '%'],\n\n        /**\n         * Map of CSS font styles\n         * @static\n         * @type {Array}\n         */\n        fontStyleMap: ['normal', 'italic', 'oblique', 'inherit'],\n\n        /**\n         * Map of CSS font variants\n         * @static\n         * @type {Array}\n         */\n        fontVariantMap: ['normal', 'small-caps', 'inherit'],\n\n        /**\n         * Map of CSS font weights\n         * @static\n         * @type {Array}\n         */\n        fontWeightMap: ['bold', 'bolder', 'lighter', 'normal', '100', '200', '300', '400', '500', '600', '700', '800', '900'],\n\n        /**\n         * Map of CSS font sizes\n         * @static\n         * @type {Array}\n         */\n        fontSizeMap: ['xx-small', 'x-small', 'smaller', 'small', 'medium', 'large', 'larger', 'x-large', 'xx-large'],\n\n        /**\n         * Map of CSS font line heights\n         * @static\n         * @type {Array}\n         */\n        fontLineHeightMap: ['normal', 'inherit'],\n\n        /**\n         * Check if provided value is valid CSS value\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid CSS value\n         */\n        isCssValueValid: function(value) {\n            return Rise.Font.unitsMap.some(function(unit) {\n                return value.lastIndexOf(unit) != -1;\n            });\n        },\n\n        /**\n         * Check if provided value is valid CSS font style\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontStyleValid: function(value) {\n            return Rise.Font.fontStyleMap.indexOf(value) != -1;\n        },\n\n        /**\n         * Check if provided value is valid CSS font variant\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontVariantValid: function(value) {\n            return Rise.Font.fontVariantMap.indexOf(value) != -1;\n        },\n\n        /**\n         * Check if provided value is valid CSS font weight\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontWeightValid: function(value) {\n            return Rise.Font.fontWeightMap.indexOf(value) != -1;\n        },\n\n        /**\n         * Check if provided value is valid CSS font size\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontSizeValid: function(value) {\n            return (\n                Rise.Font.fontSizeMap.indexOf(value) != -1 ||\n                Rise.Font.isCssValueValid(value)\n            );\n        },\n\n        /**\n         * Check if provided value is valid CSS font line height\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontLineHeightValid: function(value) {\n            return (\n                Rise.Font.isCssValueValid(value) ||\n                Rise.Font.fontLineHeightMap.indexOf(value) != -1\n            );\n        },\n\n        /**\n         * Check if provided value is valid CSS font family\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontFamilyValid: function(value) {\n            // TODO: implement\n            return true;\n        },\n\n        /**\n         * Check whole Rise.Font instance for valid values\n         * @static\n         * @param  {Rise.Font}  font Rise.Font instance where need to check their font values\n         * @return {Boolean}         Returns true if Rise.Font is correct instance\n         */\n        isFontValid: function(font) {\n            return (\n                Rise.Font.isFontStyleValid(font.getStyle()) &&\n                Rise.Font.isFontVariantValid(font.getVariant()) &&\n                Rise.Font.isFontWeightValid(font.getWeight()) &&\n                Rise.Font.isFontSizeValid(font.getSize()) &&\n                Rise.Font.isFontLineHeightValid(font.getLineHeight()) &&\n                Rise.Font.isFontFamilyValid(font.getFamily())\n            );\n        },\n\n        /**\n         * Create Rise.Font instance from string representation\n         * @static\n         * @param  {String} font    Font string\n         * @return {Rise.Font}      Returns Rise.Font instance with parsed options from string\n         */\n        fromString: function(font) {\n            // TODO: implement\n            Rise.Logger.warning('Rise.Font -> fromString() not realized yet');\n            return new Rise.Font();\n        },\n\n        /**\n         * Create Rise.Font instance from exists node element\n         * @static\n         * @param  {Element} element Existing node element from where font options will parse\n         * @return {Rise.Font}       Returns Rise.Font instance\n         */\n        fromNode: function(element) {\n            var style = window.getComputedStyle(element, null);\n\n            return new Rise.Font({\n                style: style.getPropertyValue('font-style'),\n                variant: style.getPropertyValue('font-variant'),\n                weight: style.getPropertyValue('font-weight'),\n                size: style.getPropertyValue('font-size'),\n                lineHeight: style.getPropertyValue('line-height'),\n                family: style.getPropertyValue('font-family')\n            });\n        }\n    });\n})(this);\n(function(global) {\n    'use strict';\n\n    /**\n     * Current log level\n     * @type {Number}\n     * @private\n     */\n    var currentLogLevel = 3;\n\n    /**\n     * Check if level is allow to print message\n     * @param  {Integer}  level Level that need to check\n     * @return {Boolean}        Returns true if this level can be printed out\n     * @private\n     */\n    function isAllowedLevel(level) {\n        return level >= currentLogLevel;\n    }\n\n    /**\n     * Prepend message to every log message\n     * @param  {String} string Message to what will be prepended header message\n     * @return {String}        Returns resulting strint\n     * @private\n     */\n    function prependLoggerInfo(string) {\n        return ['Rise', new Date().toLocaleTimeString(), string].join(' -> ');\n    }\n\n    /**\n     * Invoke console methods\n     * @param  {String} type Type of console that need to be invoked\n     * @param  {Array} args Array of arguments to console method\n     * @private\n     * @example\n     * invokeConsole('log', ['test', 'test2']); // test test2\n     */\n    function invokeConsole(type, args) {\n        args = Array.prototype.slice.call(args, 0);\n\n        if (console[type] && Rise.Util.isFunction(console[type])) {\n            args[0] = prependLoggerInfo(args[0] ? args[0] : '');\n            console[type].apply(console, args);\n        }\n    }\n\n    /**\n     * Print welcome message to console\n     * @private\n     */\n    (function printWelcomeMessage() {\n        if (window.chrome) {\n            console.log.apply(console, [\n                '%c %c %c Rise v' + Rise.getVersion() + ' %c %c %c',\n                'background: #0E173E; font-size: 8pt;',\n                'background: #020C25; font-size: 9pt;',\n                'color: #FFFFFF; background: #0D0B0E; font-size: 10pt',\n                'background: #020C25; font-size: 9pt;',\n                'background: #0E173E; font-size: 8pt;',\n                'background: #0E173E; font-size: 8pt;'\n            ]);\n        } else {\n            console.log('Rise v' + Rise.getVersion());\n        }\n    })();\n\n    /**\n     * Logger object\n     * @static\n     * @type {Object}\n     */\n    var Logger = {\n        /**\n         * Allow print out all messages\n         * @static\n         * @type {Number}\n         */\n        VERBOSE: 1,\n\n        /**\n         * Allow print out only .debug(), .error(), .warn(), .info()\n         * @static\n         * @type {Number}\n         */\n        DEBUG: 2,\n\n        /**\n         * Allow print out only .error(), .warn(), .info()\n         * @static\n         * @type {Number}\n         */\n        ERROR: 3,\n\n        /**\n         * Allow print out only .warn() and .info()\n         * @static\n         * @type {Number}\n         */\n        WARNING: 4,\n\n        /**\n         * Allow print out only .info()\n         * @static\n         * @type {Number}\n         */\n        INFO: 5,\n\n        /**\n         * Disable all logs\n         * @static\n         * @type {Number}\n         */\n        OFF: 100,\n\n        /**\n         * Set current level for logger\n         * @param {Integer} level Predefined constant in Rise.Logger\n         * @return {Rise.Logger}\n         * @static\n         * @example\n         * Rise.Logger.setLevel(Rise.Logger.VERBOSE);\n         */\n        setLevel: function(level) {\n            currentLogLevel = level;\n            return this;\n        },\n\n        /**\n         * Get current log level\n         * @static\n         * @return {Integer} Returns integer value of current log level\n         */\n        getLevel: function() {\n            return currentLogLevel;\n        },\n\n        /**\n         * Log message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        log: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('log', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Debug message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        debug: function() {\n            if (isAllowedLevel(this.DEBUG)) {\n                invokeConsole('debug', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Error message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        error: function() {\n            if (isAllowedLevel(this.ERROR)) {\n                invokeConsole('error', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Warning message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        warning: function() {\n            if (isAllowedLevel(this.WARNING)) {\n                invokeConsole('warn', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Info message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        info: function() {\n            if (isAllowedLevel(this.INFO)) {\n                invokeConsole('info', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Start new group in console\n         * @static\n         * @param {Boolean} startCollapsed If you set true for first argument, group will be collapsed\n         * @return {Rise.Logger}\n         */\n        startGroup: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                if (Rise.Util.isBoolean(arguments[0]) && arguments[0] === true) {\n                    invokeConsole('groupCollapsed', Array.prototype.slice.call(arguments, 1));\n                } else {\n                    invokeConsole('group', arguments);\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * End current group in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        endGroup: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('groupEnd', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Start profiling time in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        startTime: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('time', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * End profiling time in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        endTime: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('timeEnd', arguments);\n            }\n\n            return this;\n        }\n    };\n\n    global.Rise.Logger = Logger;\n\n})(this);\n(function(global) {\n    'use strict';\n\n    /**\n     * Factory method that returns new Rise.RQuery instance\n     * @static\n     * @return {Rise.RQuery} Returns Rise.RQuery instance\n     * @example\n     * Rise.$('div');\n     * Rise.$('.my-selector');\n     */\n    global.Rise.$ = function() {\n        return Rise.RQuery.apply(Object.create(Rise.RQuery.prototype), arguments);\n    };\n\n    /**\n     * Factory method that returns new Rise.RQuery instance with created Element\n     * @static\n     * @param  {String} tag Tag element that need to create\n     * @return {Rise.RQuery} Returns Rise.RQuery instance with created Element\n     * @example\n     * Rise.$.create('div');\n     * Rise.$.create('span').text('My text');\n     */\n    global.Rise.$.create = function(tag) {\n        return new Rise.RQuery(document.createElement(tag));\n    };\n\n    global.Rise.RQuery = Rise.Class.extend({\n        /**\n         * Create new Rise.RQuery instance\n         * @constructor\n         * @param  {String|Rise.RQuery|Element|Array} selector Selector or exists Element\n         * @param  {Element|Document|Window} parent Parent from where selector will parse\n         * @return {Rise.RQuery} Returns Rise.RQuery instance\n         */\n        init: function(selector, parent) {\n            selector = selector || window;\n            parent = parent || document;\n\n            /**\n             * Push Element to this.elements if valid\n             * @this {Rise.RQuery}\n             * @param  {Element} element It should be Element instance\n             * @private\n             */\n            var pushElement = function(element) {\n                if (element instanceof Element) {\n                    this.elements.push(element);\n                }\n            }.bind(this);\n\n            this.elements = [];\n\n            Rise.Logger.startGroup(true, 'Rise.RQuery -> init()');\n            Rise.Logger.log('Parsing selector -> \"%O\" with parent -> %O', selector, parent);\n\n            if (selector instanceof Rise.RQuery) {\n                this.elements = selector.get();\n            } else if (Rise.Util.isArray(selector) || selector instanceof HTMLCollection) {\n                Array.prototype.forEach.call(selector, pushElement);\n            } else if (selector instanceof Element || selector instanceof Window) {\n                this.elements[0] = selector;\n            } else if (Rise.Util.isString(selector)) {\n                Array.prototype.forEach.call(parent.querySelectorAll(selector), pushElement);\n            } else {\n                Rise.Logger.warning('Selector is not valid -> %O', selector);\n            }\n\n            Rise.Logger.log('Instantiated Rise.RQuery -> %O', this);\n            Rise.Logger.endGroup();\n\n            return this;\n        },\n\n        /**\n         * Get Element by index\n         * @param  {Integer} index Index\n         * @return {Array|Element} Returns Element with corresponding index or array of elements\n         * @example\n         * Rise.$('body').get(0);\n         * Rise.$('div').get();\n         */\n        get: function(index) {\n            return Rise.Util.isUndefined(index) ? this.elements : this.elements[index];\n        },\n\n        /**\n         * Get elements count\n         * @return {Integer} Returns elements count\n         */\n        count: function() {\n            return (this.elements && this.elements.length) || 0;\n        },\n\n        /**\n         * Iterate through all elements and call callback function\n         * @param  {Function} cb Callback which called at each iteration cb(element, index, array)\n         * @return {Rise.RQuery}\n         * @example\n         * Rise.$('div').each(function(element, index, array) {\n         *     console.log(element, index, array);\n         * });\n         */\n        each: function(cb) {\n            Array.prototype.forEach.call(this.get(), cb);\n            return this;\n        },\n\n        /**\n         * Get parent node\n         * @return {Rise.RQuery} Returns parent node of element\n         * @example\n         * Rise.$('body').parent();\n         */\n        parent: function() {\n            return new Rise.RQuery(this.get(0).parentNode);\n        },\n\n        /**\n         * Get array of children nodes\n         * @return {Rise.RQuery} Return Rise.RQuery object with child nodes\n         * @example\n         * Rise.$('body').children();\n         */\n        children: function() {\n            return new Rise.RQuery(this.get(0).children);\n        },\n\n        /**\n         * Check if node contains other node\n         * @param {Rise.RQuery} child Child node which need to check for exists in node\n         * @return {Boolean} True if contains\n         * @example\n         * Rise.$('body').contains(Rise.$('div'));\n         */\n        contains: function(child) {\n            child = child.get(0);\n\n            var element = this.get(0);\n\n            return element !== child && element.contains(child);\n        },\n\n        /**\n         * Get offset of node\n         * @return {Object} Returns object with left and top properties\n         * @example\n         * Rise.$('body').offset(); // Returns {left: 0, top: 0}\n         */\n        offset: function() {\n            var boundingBox = this.get(0).getBoundingClientRect();\n\n            return {\n                top: boundingBox.top + document.body.scrollTop,\n                left: boundingBox.left + document.body.scrollLeft\n            };\n        },\n\n        /**\n         * Get node's width\n         * @return {Integer} Returns offsetWidth of node\n         * @example\n         * Rise.$('div').offsetWidth();\n         */\n        offsetWidth: function() {\n            return this.get(0).offsetWidth;\n        },\n\n        /**\n         * Get node's height\n         * @return {Integer} Returns offsetHeight of node\n         * @example\n         * Rise.$('div').offsetHeight();\n         */\n        offsetHeight: function() {\n            return this.get(0).offsetHeight;\n        },\n\n        /**\n         * Get left offset of node\n         * @return {Integer} Returns offsetLeft of node\n         * @example\n         * Rise.$('div').offsetLeft();\n         */\n        offsetLeft: function() {\n            return this.get(0).offsetLeft;\n        },\n\n        /**\n         * Get top offset of node\n         * @return {Integer} Returns offsetTop of node\n         * @example\n         * Rise.$('div').offsetTop();\n         */\n        offsetTop: function() {\n            return this.get(0).offsetTop;\n        },\n\n        /**\n         * Get position of node\n         * @return {Object} Returns object with left and top properties\n         * @example\n         * Rise.$('div').position(); // {left: 0, top: 0}\n         */\n        position: function() {\n            return {\n                left: this.offsetLeft(),\n                top: this.offsetTop()\n            };\n        },\n\n        /**\n         * Focus at node\n         * @return {Rise.RQuery} Returns Rise.RQuery instance\n         * @example\n         * Rise.$('input').focus();\n         */\n        focus: function() {\n            this.get(0).focus();\n            return this;\n        },\n\n        /**\n         * Unfocus from node\n         * @return {Rise.RQuery} Returns Rise.RQuery instance\n         * @example\n         * Rise.$('input').blur();\n         */\n        blur: function() {\n            this.get(0).blur();\n            return this;\n        },\n\n        /**\n         * Iterate through nodes and filter them out\n         * @param  {Function} cb Callback function accept 3 arguments cb(node, index, array) and must return bool\n         * @return {Rise.RQuery} Returns Rise.RQuery instance with filtered nodes\n         * @example\n         * Rise.$('div').filter(function(node, index, array) {\n         *     return Rise.$(node).hasClass('example');\n         * });\n         */\n        filter: function(cb) {\n            if (Rise.Util.isFunction(cb)) {\n                return new Rise.RQuery(Array.prototype.filter.call(this.get(), cb));\n            } else {\n                Rise.Logger.warning('Rise.RQuery.filter() -> You must provide function');\n            }\n        },\n\n        /**\n         * Find nodes by selector, starting from current parent node\n         * @param  {String} selector Selector for find other nodes\n         * @return {Rise.RQuery} Returns new Rise.RQuery instance with finded nodes\n         * @example\n         * Rise.$('body').find('div').find('span');\n         */\n        find: function(selector) {\n            return new Rise.RQuery(selector, this.get(0));\n        },\n\n        /**\n         * Set or get attribute value to nodes\n         * @param  {String|Object} attr String for getting attribute value and object for set\n         * @return {Rise.RQuery|Mixed} Returns current Rise.RQuery instance or attribute value\n         * @example\n         * Rise.$('div').attr('id');\n         * Rise.$('div').attr({\n         *     id: 'test'\n         * });\n         */\n        attr: function(attr) {\n            if (Rise.Util.isString(attr)) {\n                return this.get(0).getAttribute(attr);\n            } else if (Rise.Util.isObject(attr)) {\n                Rise.Logger.startGroup(true, 'Rise.RQuery.attr() -> Set attributes');\n                this.each(function(element) {\n                    Object.keys(attr).forEach(function(key) {\n                        Rise.Logger.log('Set key-value \"%s\" -> \"%s\" to element %O', key, attr[key], element);\n                        element.setAttribute(key, attr[key]);\n                    });\n                });\n                Rise.Logger.endGroup();\n            }\n\n            return this;\n        },\n\n        /**\n         * Set or get css-rules\n         * @param  {String|Object} name String if you want get CSS-rule or Object for set\n         * @param {String} pseudoElement You can provide pseudoElement selector\n         * @return {Rise.RQuery|Mixed} Returns current Rise.RQuery instance or CSS value\n         * @example\n         * Rise.RQuery('div').css({\n         *     width: 200\n         * });\n         * Rise.RQuery('div').css('width', ':after');\n         * Rise.RQuery('div').css('width');\n         */\n        css: function(css, pseudoElement) {\n            pseudoElement = pseudoElement || null;\n\n            if (Rise.Util.isString(css)) {\n                return window.getComputedStyle(this.get(0), pseudoElement).getPropertyValue(Rise.Util.getDashedString(css));\n            } else if (Rise.Util.isObject(css)) {\n                Rise.Logger.startGroup(true, 'Rise.RQuery.css() -> Set CSS');\n                this.each(function(element) {\n                    Object.keys(css).forEach(function(key) {\n                        Rise.Logger.log('Set key-value \"%s\" -> \"%s\" to element %O', key, css[key], element);\n\n                        if (css[key] === false) {\n                            element.style.removeProperty(Rise.Util.getDashedString(key));\n                        } else if (isNaN(css[key]) || Rise.RQuery.cssNumbersMap.indexOf(key) != -1) {\n                            element.style[Rise.Util.getCamelizedString(key)] = css[key];\n                        } else {\n                            element.style[Rise.Util.getCamelizedString(key)] = css[key] + 'px';\n                        }\n                    });\n                });\n                Rise.Logger.endGroup();\n            }\n\n            return this;\n        },\n\n        /**\n         * Wrap nodes with new node\n         * @param  {Rise.RQuery} html Rise.RQuery instance with HTML which will be the wrapper\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').wrap(Rise.$.create('a')); // Wrap all div with a tag\n         */\n        wrap: function(html) {\n            var wrapper;\n\n            return this.each(function(element) {\n                wrapper = html.clone();\n                element.parentNode.insertBefore(wrapper.get(0), element);\n                wrapper.append(element);\n            });\n        },\n\n        /**\n         * Unwrap nodes, remove parent node from nodes\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').unwrap();\n         */\n        unwrap: function() {\n            return this.each(function(element) {\n                element.parentNode.parentNode.replaceChild(element, element.parentNode);\n            });\n        },\n\n        /**\n         * Check if this node is matches to selector\n         * @param  {String} selector Selector for checking\n         * @return {Boolean} Returns true if all elements is match to selector and false otherwise\n         * @example\n         * Rise.$('div').is('div'); // true\n         */\n        is: function(selector) {\n            var element;\n\n            if (this.count() > 0) {\n                element = this.get(0);\n\n                return (\n                    element.matches ||\n                    element.matchesSelector ||\n                    element.msMatchesSelector ||\n                    element.mozMatchesSelector ||\n                    element.webkitMatchesSelector ||\n                    element.oMatchesSelector\n                ).call(element, selector);\n            }\n\n            return false;\n        },\n\n        /**\n         * Add class name to nodes\n         * @param {String} names Class names splitted with spaces\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').addClass('foo bar');\n         */\n        addClass: function(names) {\n            names = names.split(/[ ]+/);\n\n            return this.each(function(element) {\n                names.forEach(function(name) {\n                    element.classList.add(name);\n                });\n            });\n        },\n\n        /**\n         * Remove class name from nodes\n         * @param  {String} names Class names that need to be removed from nodes\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').removeClass('foo bar');\n         */\n        removeClass: function(names) {\n            names = names.split(/[ ]+/);\n\n            return this.each(function(element) {\n                names.forEach(function(name) {\n                    element.classList.remove(name);\n                });\n            });\n        },\n\n        /**\n         * Toggle class name for nodes\n         * @param  {String} names Class names that need to be toggled\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').toggleClass('foo bar');\n         */\n        toggleClass: function(names) {\n            names = names.split(/[ ]+/);\n\n            return this.each(function(element) {\n                names.forEach(function(name) {\n                    element.classList.toggle(name);\n                });\n            });\n        },\n\n        /**\n         * Check if nodes have class name\n         * @param  {String}  className Class name that need check for exists in node\n         * @return {Boolean} Returns true if ALL nodes have className and false otherwise\n         * @example\n         * Rise.$('div').hasClass('foo');\n         */\n        hasClass: function(name) {\n            if (this.count() > 0) {\n                return Array.prototype.every.call(this.get(), function(element) {\n                    return element.classList.contains(name);\n                });\n            }\n\n            return false;\n        },\n\n        /**\n         * Bind event to nodes\n         * @param  {String|Object} eventType Event type\n         * @param  {Function} handler Your function which you want execute on event\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').on('click', function(event) {\n         *     console.log(this, event);\n         * });\n         * Rise.$('div').on({\n         *     click: function(event) {\n         *         console.log(this, event);\n         *     }\n         * });\n         */\n        on: function(eventType, handler) {\n            if (Rise.Util.isObject(eventType)) {\n                Object.keys(eventType).forEach(function(key) {\n                    this.on(key, eventType[key]);\n                });\n            } else {\n                Rise.Logger.startGroup(true, 'Rise.RQuery.on() -> Binding events');\n                this.each(function(element) {\n                    Rise.Logger.log('Bind event \"%s\" to %O', eventType, element);\n                    element.addEventListener(eventType, handler, false);\n                });\n                Rise.Logger.endGroup();\n            }\n\n            return this;\n        },\n\n        /**\n         * Unbind event from nodes\n         * @param  {String} eventType Event type\n         * @param  {Function} handler Your function which you want to unsubscribe from event\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').off('click', yourFunction);\n         * Rise.$('div').off({\n         *     click: yourFunction\n         * });\n         */\n        off: function(eventType, handler) {\n            if (Rise.Util.isObject(eventType)) {\n                Object.keys(eventType).forEach(function(key) {\n                    this.off(key, eventType[key]);\n                });\n            } else {\n                Rise.Logger.startGroup(true, 'Rise.RQuery.off() -> Unbinding events');\n                this.each(function(element) {\n                    Rise.Logger.log('Unbind event \"%s\" from element %O', eventType, element);\n                    element.removeEventListener(eventType, handler, false);\n                });\n                Rise.Logger.endGroup();\n            }\n\n            return this;\n        },\n\n        /**\n         * Trigger native event for node\n         * @param  {String} eventName Name of event\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('button').trigger('click');\n         */\n        trigger: function(eventName) {\n            var event = document.createEvent('HTMLEvents');\n\n            event.initEvent(eventName, true, false);\n            this.get(0).dispatch(event);\n\n            return this;\n        },\n\n        /**\n         * Remove nodes from DOM\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').remove();\n         */\n        remove: function() {\n            return this.each(function(element) {\n                if (element && element.parentNode) {\n                    element.parentNode.removeChild(element);\n                }\n            });\n        },\n\n        /**\n         * Get or set HTML to nodes\n         * @param  {String|Rise.RQuery} [html] HTML string or Rise.RQuery instance\n         * @return {Rise.RQuery|String} Returns modified Rise.RQuery instance or HTML string\n         * @example\n         * Rise.$('div').html('test');\n         * Rise.$('div').html(); // 'test'\n         */\n        html: function(html) {\n            if (Rise.Util.isUndefined(html)) {\n                return this.get(0).innerHTML;\n            } else {\n                return this.each(function(element) {\n                    new Rise.RQuery(element).empty().append(html);\n                });\n            }\n        },\n\n        /**\n         * Append HTML before node's end\n         * @param  {String|Rise.RQuery|Element} html You can send String or exists node\n         * @return {Rise.RQuery} Returns modified Rise.RQuery instance\n         * @example\n         * Rise.$('div').append('test');\n         * Rise.$('div').append(Rise.$.create('span'));\n         * Rise.$('div').append(document.createElement('a'));\n         */\n        append: function(html) {\n            if (Rise.Util.isString(html)) {\n                this.each(function(element) {\n                    element.insertAdjacentHTML('beforeend', html);\n                });\n            } else if (html instanceof Rise.RQuery) {\n                this.each(function(element) {\n                    element.appendChild(html.get(0));\n                });\n            } else if (html instanceof Element) {\n                this.each(function(element) {\n                    element.appendChild(html);\n                });\n            }\n\n            return this;\n        },\n\n        /**\n         * Prepend HTML after node began\n         * @param  {String|Rise.RQuery|Element} html You can send String or existing Element\n         * @return {Rise.RQuery} Returns modified Rise.RQuery instance\n         * @example\n         * Rise.$('div').prepend('test');\n         * Rise.$('div').prepend(Rise.$.create('span'));\n         * Rise.$('div').prepend(document.createElement('a'));\n         */\n        prepend: function(html) {\n            if (Rise.Util.isString(html)) {\n                this.each(function(element) {\n                    element.insertAdjacentHTML('afterbegin', html);\n                });\n            } else if (html instanceof Rise.RQuery) {\n                this.each(function(element) {\n                    element.insertBefore(html.get(0), element.firstChild);\n                });\n            } else if (html instanceof Element) {\n                this.each(function(element) {\n                    element.insertBefore(html, element.firstChild);\n                });\n            }\n\n            return this;\n        },\n\n        /**\n         * Set or get inner text\n         * @param  {String} [text] Text which you want to set in elements\n         * @return {Rise.RQuery|String} Returns current Rise.RQuery instance or string with text\n         * @example\n         * Rise.$('div').text('test');\n         * Rise.$('div').text(); // 'test'\n         */\n        text: function(text) {\n            if (Rise.Util.isUndefined(text)) {\n                return this.get(0).textContent;\n            } else {\n                return this.each(function(element) {\n                    element.textContent = text;\n                });\n            }\n        },\n\n        /**\n         * Remove all child nodes from nodes\n         * @return {Rise.RQuery} Returns modified Rise.RQuery instance\n         * @example\n         * Rise.$('div').empty();\n         */\n        empty: function() {\n            return this.each(function(element) {\n                element.innerHTML = '';\n            });\n        },\n\n        /**\n         * Clone node\n         * @return {Rise.RQuery} Returns new Rise.RQuery instance with cloned nodes\n         * @example\n         * Rise.$('div').clone();\n         */\n        clone: function() {\n            var clones = [];\n\n            this.each(function(element) {\n                clones.push(element.cloneNode(true));\n            });\n\n            return new Rise.RQuery(clones);\n        }\n    }, {\n        /**\n         * Map of CSS attributes which have only numbers at value\n         * @static\n         * @type {Array}\n         */\n        cssNumbersMap: [\n            \"columnCount\",\n            \"fillOpacity\",\n            \"flexGrow\",\n            \"flexShrink\",\n            \"fontWeight\",\n            \"lineHeight\",\n            \"opacity\",\n            \"order\",\n            \"orphans\",\n            \"widows\",\n            \"zIndex\",\n            \"zoom\"\n        ]\n    });\n})(this);\n(function(global) {\n    'use strict';\n\n    /**\n     * Util object\n     * @static\n     * @type {Object}\n     */\n    var Util = {\n        /**\n         * Extend object\n         * @param  {Object} destination Destination object will be also modified\n         * @param  {Object} source Source objects\n         * @return {Object} Returns extended object\n         * @example\n         * Rise.Util.extend({}, obj1, obj2, obj3);\n         */\n        extend: function() {\n            /**\n             * Copy source object to destination object\n             * @this {Rise.Util}\n             * @param  {String} key Current key of current source object\n             * @private\n             */\n            var copyObject = function(key) {\n                if (source[key] && source[key].constructor && source[key].constructor === Object) {\n                    destination[key] = destination[key] || {};\n                    this.extend(destination[key], source[key]);\n                } else {\n                    destination[key] = source[key];\n                }\n            }.bind(this);\n\n            var destination = arguments[0],\n                source;\n\n            for (var i = 1; i < arguments.length; i++) {\n                source = arguments[i];\n                Object.keys(source).forEach(copyObject);\n            }\n\n            return destination;\n        },\n\n        /**\n         * Camelize string\n         * @param  {String} string String which need to camelize\n         * @return {String} Returns camelized string\n         * @static\n         * @example\n         * Rise.Util.getCamelizedString('font-style'); // fontStyle\n         */\n        getCamelizedString: function(string) {\n            return string.replace(/\\-(\\w)/g, function(string, letter) {\n                return letter.toUpperCase();\n            });\n        },\n\n        /**\n         * Get dashed string\n         * @param  {String} string String which need to make dashed\n         * @return {String} Returns dashed string\n         * @static\n         * @example\n         * Rise.Util.getDashedString('borderRadius'); // border-radius\n         */\n        getDashedString: function(string) {\n            return string.replace(/([A-Z])/g, function(string) {\n                return '-' + string.toLowerCase();\n            });\n        },\n\n        /**\n         * Get random string\n         * @static\n         * @param  {String} prepend   String which prepends to random string\n         * @param  {String} append    String which appends to random string\n         * @param  {String} separator String which separate prepender and appender\n         * @return {String}           Returns random generated string\n         * @memberOf Rise.Util\n         */\n        getRandomString: function(prepend, append, separator) {\n            prepend = prepend === undefined ? '' : prepend;\n            append = append === undefined ? '' : append;\n            separator = separator === undefined ? '' : separator;\n\n            return [prepend, Math.random().toString(36).slice(2), append].join(separator);\n        },\n\n        /**\n         * Get type of variable\n         * @static\n         * @param  {Mixed} value Variable that might be checked\n         * @return {String}       Returns string representation of type\n         */\n        getType: function(value) {\n            return Object.prototype.toString.call(value).replace(/^\\[object (.+)\\]$/, '$1').toLowerCase();\n        },\n\n        /**\n         * Check if this object\n         * @static\n         * @param  {Mixed}  object Value that might be checked\n         * @return {Boolean}       Returns true if object\n         */\n        isObject: function(object) {\n            return this.getType(object) == 'object';\n        },\n\n        /**\n         * Check if this is number\n         * @static\n         * @param  {Mixed}  number Value that might be checked\n         * @return {Boolean}       Returns true if number\n         */\n        isNumber: function(number) {\n            return (\n                this.getType(number) == 'number' &&\n                !isNaN(number) &&\n                isFinite(number)\n            );\n        },\n\n        /**\n         * Check if this array\n         * @static\n         * @param  {Mixed}  array Value that might be checked\n         * @return {Boolean}      Returns true if array\n         */\n        isArray: function(array) {\n            return this.getType(array) == 'array';\n        },\n\n        /**\n         * Check if this is boolean\n         * @static\n         * @param  {Mixed}  bool Value that might be checked\n         * @return {Boolean}      Returns true if boolean\n         */\n        isBoolean: function(bool) {\n            return this.getType(bool) == 'boolean';\n        },\n\n        /**\n         * Check if this function\n         * @static\n         * @param  {Mixed}  method Value that might be checked\n         * @return {Boolean}       Returns true if function\n         */\n        isFunction: function(method) {\n            return this.getType(method) == 'function';\n        },\n\n        /**\n         * Check if this is string\n         * @static\n         * @param  {Mixed}  string Value that might be checked\n         * @return {Boolean}       Returns true if string\n         */\n        isString: function(string) {\n            return this.getType(string) == 'string';\n        },\n\n        /**\n         * Check if this is undefined\n         * @static\n         * @param  {Mixed}  value Value that might be checked\n         * @return {Boolean}       Returns true if undefined\n         */\n        isUndefined: function(value) {\n            return (\n                this.getType(value) == 'undefined' ||\n                this.getType(value) == 'domwindow'\n            );\n        }\n    };\n\n    global.Rise.Util = Util;\n\n})(this);"],"sourceRoot":"/source/"}