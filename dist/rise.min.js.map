{"version":3,"file":"rise.min.js","sources":["rise.min.js"],"names":["global","Rise","this","VERSION","prototype","Object","create","getVersion","copyProperties","source","target","parent","keys","forEach","key","test","wrapMethod","method","parentMethod","backup","_super","apply","arguments","Class","extend","staticProperties","mixins","Constructor","init","constructor","i","length","Color","color","config","Logger","startGroup","log","rgb","inputToRgb","red","r","Math","round","green","g","blue","b","alpha","a","valid","roundA","format","gradientType","warning","endGroup","isDark","getBrightness","isLight","isValid","getFormat","getAlpha","setAlpha","value","boundAlpha","toRgb","toHsv","hsv","rgbToHsv","h","s","v","toHsvString","toHsl","hsl","rgbToHsl","l","toHslString","toHex","allow3Char","rgbToHex","toHexString","toHex8","rgbaToHex","toHex8String","toRgbString","toPercentageRgb","bound01","toPercentageRgbString","toName","hexNamesMap","toFilter","secondColor","hex8String","secondHex8String","toString","isFormatSet","formattedString","hasAlpha","needsAlphaFormat","lighten","amount","clamp01","brighten","max","min","darken","desaturate","saturate","greyscale","spin","hue","analogous","results","slices","part","result","push","complement","monochromatic","modification","splitComplement","triad","tetrad","cssColorNamesMap","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","flip","object","flipped","hasOwnProperty","parseFloat","isNaN","isOnePointZero","isPercentageValue","isPercentage","parseInt","abs","parseIntFromHex","Util","getType","indexOf","pad2","convertToPercentage","convertDecimalToHex","convertHexToDecimal","colorRegexMap","cssInteger","cssNumber","cssUnit","permissiveMatch3","permissiveMatch4","RegExp","rgba","hsla","hex3","hex6","hex8","stringToObject","match","trimLeft","trimRight","named","replace","toLowerCase","exec","rgbToRgb","String","substr","hsvToRgb","hslToRgb","d","hue2rgb","p","q","t","floor","f","mod","hex","charAt","join","fromRatio","newColor","equals","firstColor","random","mix","w1","w2","rgbA","rgbB","w","readability","colorA","colorB","brightnessA","brightnessB","colorDiff","brightness","isReadable","foregroundColor","backgroundColor","mostReadable","baseColor","colorList","bestColor","bestScore","bestIsReadable","readable","score","Font","options","style","variant","weight","size","lineHeight","family","isFontValid","getStyle","setStyle","isFontStyleValid","getVariant","setVariant","isFontVariantValid","getWeight","setWeight","isFontWeightValid","getSize","setSize","isFontSizeValid","getLineHeight","setLineHeight","isFontLineHeightValid","getFamily","setFamily","isFontFamilyValid","unitsMap","fontStyleMap","fontVariantMap","fontWeightMap","fontSizeMap","fontLineHeightMap","isCssValueValid","some","unit","lastIndexOf","font","fromString","fromNode","element","window","getComputedStyle","getPropertyValue","isAllowedLevel","level","currentLogLevel","prependLoggerInfo","string","Date","toLocaleTimeString","invokeConsole","type","args","Array","slice","call","console","isFunction","chrome","VERBOSE","DEBUG","ERROR","WARNING","INFO","OFF","setLevel","getLevel","debug","error","info","isBoolean","startTime","endTime","Opacity","opacity","set","isDecimal01Value","fromCssToPercentage","get","fromPercentageToCss","isNumber","toFixed","$","RQuery","tag","document","createElement","selector","pushElement","Element","elements","bind","isArray","HTMLCollection","NodeList","isString","querySelectorAll","index","isUndefined","count","each","cb","parentNode","children","contains","child","offsetWidth","offsetHeight","offsetLeft","offsetTop","focus","blur","filter","find","attr","getAttribute","isObject","removeAttribute","setAttribute","css","pseudoElement","getDashedString","removeProperty","getCamelizedString","cssNumbersMap","wrap","html","wrapper","clone","insertBefore","append","unwrap","replaceChild","is","matches","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","addClass","names","split","name","classList","add","removeClass","remove","toggleClass","toggle","hasClass","every","on","eventType","handler","addEventListener","off","removeEventListener","trigger","eventName","event","createEvent","initEvent","dispatch","removeChild","innerHTML","empty","insertAdjacentHTML","appendChild","prepend","firstChild","text","textContent","clones","cloneNode","Shadow","shadow","offsetX","offsetY","setColor","getColor","setBlur","getBlur","setOffsetX","x","getOffsetX","setOffsetY","y","getOffsetY","shadowRegex","trim","offsetsAndBlur","copyObject","destination","letter","toUpperCase","getRandomString","separator","number","isFinite","array","bool"],"mappings":"CAAA,SAAUA,GAYN,QAASC,KACL,MAAOC,MAPX,GAAIC,GAAU,gBAUdF,GAAKG,UAAYC,OAAOC,WAOxBL,EAAKM,WAAa,WACd,MAAOJ,IAGXH,EAAOC,KAAOA,GAEfC,MACH,SAAUF,GACN,YASA,SAASQ,GAAeC,EAAQC,EAAQC,GACpCN,OAAOO,KAAKH,GAAQI,QAAQ,SAASC,GAM7BJ,EAAOI,GAJe,kBAAfL,GAAOK,IACQ,kBAAfH,GAAOG,IACd,aAAaC,KAAKN,EAAOK,IAEXE,EAAWP,EAAOK,GAAMH,EAAOG,IAE/BL,EAAOK,KAajC,QAASE,GAAWC,EAAQC,GACxB,MAAO,YACH,GAAIC,GAASjB,KAAKkB,MAClBlB,MAAKkB,OAASF,CAEd,KACI,MAAOD,GAAOI,MAAMnB,KAAMoB,WAC5B,QACEpB,KAAKkB,OAASD,IAS1B,QAASI,MAeTA,EAAMC,OAAS,SAASpB,EAAWqB,EAAkBC,GAKjD,QAASC,KACL,MAAOzB,MAAK0B,MAAQ1B,KAAK0B,KAAKP,MAAMnB,KAAMoB,WAL9ClB,EAAYA,MACZqB,EAAmBA,MACnBC,EAASA,MAMTC,EAAYvB,UAAYC,OAAOC,OAAOJ,KAAKE,WAC3CuB,EAAYvB,UAAUyB,YAAcF,EACpCA,EAAYH,OAASD,EAAMC,OAE3BhB,EAAeiB,EAAkBE,EAAazB,MAC9CM,EAAeJ,EAAWuB,EAAYvB,UAAWF,KAAKE,UACtD,KAAK,GAAI0B,GAAIJ,EAAOK,OAAS,EAAGD,GAAK,EAAGA,IACpCtB,EAAekB,EAAOI,GAAIH,EAAYvB,UAAWF,KAAKE,UAG1D,OAAOuB,IAGX3B,EAAOC,KAAKsB,MAAQA,GAErBrB,MAOH,SAAUF,GACN,YAEAA,GAAOC,KAAK+B,MAAQ/B,KAAKsB,MAAMC,QAiB3BI,KAAM,WAIF,GAHAK,MAAQA,OAAS,QACjBC,OAASA,WAELD,gBAAiBhC,MAAK+B,MACtB,MAAOC,MAGXhC,MAAKkC,OAAOC,YAAW,EAAM,wBAC7BnC,KAAKkC,OAAOE,IAAI,gDAAiDJ,MAAOC,OAExE,IAAII,GAAMrC,KAAK+B,MAAMO,WAAWN,MAkBhC,OAhBA/B,MAAKsC,IAAMF,EAAIG,EAAI,EAAIC,KAAKC,MAAML,EAAIG,GAAKH,EAAIG,EAC/CvC,KAAK0C,MAAQN,EAAIO,EAAI,EAAIH,KAAKC,MAAML,EAAIO,GAAKP,EAAIO,EACjD3C,KAAK4C,KAAOR,EAAIS,EAAI,EAAIL,KAAKC,MAAML,EAAIS,GAAKT,EAAIS,EAChD7C,KAAK8C,MAAQV,EAAIW,EACjB/C,KAAKgD,MAAQZ,EAAIY,MACjBhD,KAAKiD,OAAST,KAAKC,MAAM,IAAMzC,KAAK8C,OAAS,IAC7C9C,KAAKkD,OAASlB,OAAOkB,QAAUd,EAAIc,OACnClD,KAAKmD,aAAenB,OAAOmB,aAEtBnD,KAAKgD,OACNjD,KAAKkC,OAAOmB,QAAQ,0BAA2BrB,OAGnDhC,KAAKkC,OAAOE,IAAI,6CAA8CnC,MAC9DD,KAAKkC,OAAOoB,WAELrD,MAOXsD,OAAQ,WACJ,MAAOtD,MAAKuD,gBAAkB,KAOlCC,QAAS,WACL,OAAQxD,KAAKsD,UAOjBG,QAAS,WACL,MAAOzD,MAAKgD,OAOhBU,UAAW,WACP,MAAO1D,MAAKkD,QAOhBS,SAAU,WACN,MAAO3D,MAAK8C,OAOhBc,SAAU,SAASC,GAGf,MAFA7D,MAAK8C,MAAQ/C,KAAK+B,MAAMgC,WAAWD,GACnC7D,KAAKiD,OAAST,KAAKC,MAAM,IAAMzC,KAAK8C,OAAS,IACtC9C,MAOXuD,cAAe,WACX,GAAInB,GAAMpC,KAAK+D,OACf,QAAgB,IAAR3B,EAAIG,EAAkB,IAARH,EAAIO,EAAkB,IAARP,EAAIS,GAAW,KAOvDmB,MAAO,WACH,GAAIC,GAAMlE,KAAK+B,MAAMoC,SAASlE,KAAKsC,IAAKtC,KAAK0C,MAAO1C,KAAK4C,KAEzD,QACIuB,EAAW,IAARF,EAAIE,EACPC,EAAGH,EAAIG,EACPC,EAAGJ,EAAII,EACPtB,EAAG/C,KAAK8C,QAQhBwB,YAAa,WACT,GAAIL,GAAMlE,KAAK+B,MAAMoC,SAASlE,KAAKsC,IAAKtC,KAAK0C,MAAO1C,KAAK4C,MACrDuB,EAAI3B,KAAKC,MAAc,IAARwB,EAAIE,GACnBC,EAAI5B,KAAKC,MAAc,IAARwB,EAAIG,GACnBC,EAAI7B,KAAKC,MAAc,IAARwB,EAAII,EAEvB,OAAqB,IAAdrE,KAAK8C,MACR,OAASqB,EAAI,KAAOC,EAAI,MAAQC,EAAI,KACpC,QAAUF,EAAI,KAAOC,EAAI,MAAQC,EAAI,MAAQrE,KAAKiD,OAAS,KAOnEsB,MAAO,WACH,GAAIC,GAAMzE,KAAK+B,MAAM2C,SAASzE,KAAKsC,IAAKtC,KAAK0C,MAAO1C,KAAK4C,KAEzD,QACIuB,EAAW,IAARK,EAAIL,EACPC,EAAGI,EAAIJ,EACPM,EAAGF,EAAIE,EACP3B,EAAG/C,KAAK8C,QAQhB6B,YAAa,WACT,GAAIH,GAAMzE,KAAK+B,MAAM2C,SAASzE,KAAKsC,IAAKtC,KAAK0C,MAAO1C,KAAK4C,MACrDuB,EAAI3B,KAAKC,MAAc,IAAR+B,EAAIL,GACnBC,EAAI5B,KAAKC,MAAc,IAAR+B,EAAIJ,GACnBM,EAAIlC,KAAKC,MAAc,IAAR+B,EAAIE,EAEvB,OAAsB,IAAd1E,KAAK8C,MACT,OAASqB,EAAI,KAAOC,EAAI,MAAQM,EAAI,KACpC,QAAUP,EAAI,KAAOC,EAAI,MAAQM,EAAI,MAAQ1E,KAAKiD,OAAS,KAQnE2B,MAAO,SAASC,GACZ,MAAO9E,MAAK+B,MAAMgD,SAAS9E,KAAKsC,IAAKtC,KAAK0C,MAAO1C,KAAK4C,KAAMiC,IAQhEE,YAAa,SAASF,GAClB,MAAO,IAAM7E,KAAK4E,MAAMC,IAO5BG,OAAQ,WACJ,MAAOjF,MAAK+B,MAAMmD,UAAUjF,KAAKsC,IAAKtC,KAAK0C,MAAO1C,KAAK4C,KAAM5C,KAAK8C,QAOtEoC,aAAc,WACV,MAAO,IAAMlF,KAAKgF,UAOtBjB,MAAO,WACH,OACIxB,EAAGC,KAAKC,MAAMzC,KAAKsC,KACnBK,EAAGH,KAAKC,MAAMzC,KAAK0C,OACnBG,EAAGL,KAAKC,MAAMzC,KAAK4C,MACnBG,EAAG/C,KAAK8C,QAQhBqC,YAAa,WACT,MAAsB,IAAdnF,KAAK8C,MACT,OAASN,KAAKC,MAAMzC,KAAKsC,KAAO,KAAOE,KAAKC,MAAMzC,KAAK0C,OAAS,KAAOF,KAAKC,MAAMzC,KAAK4C,MAAQ,IAC/F,QAAUJ,KAAKC,MAAMzC,KAAKsC,KAAO,KAAOE,KAAKC,MAAMzC,KAAK0C,OAAS,KAAOF,KAAKC,MAAMzC,KAAK4C,MAAQ,KAAO5C,KAAKiD,OAAS,KAO7HmC,gBAAiB,WACb,OACI7C,EAAGC,KAAKC,MAA+B,IAAzB4C,QAAQrF,KAAKsC,IAAK,MAAc,IAC9CK,EAAGH,KAAKC,MAAiC,IAA3B4C,QAAQrF,KAAK0C,MAAO,MAAc,IAChDG,EAAGL,KAAKC,MAAgC,IAA1B4C,QAAQrF,KAAK4C,KAAM,MAAc,IAC/CG,EAAG/C,KAAK8C,QAQhBwC,sBAAuB,WACnB,MAAsB,IAAdtF,KAAK8C,MACT,OAASN,KAAKC,MAA0C,IAApC1C,KAAK+B,MAAMuD,QAAQrF,KAAKsC,IAAK,MAAc,MAAQE,KAAKC,MAA4C,IAAtC1C,KAAK+B,MAAMuD,QAAQrF,KAAK0C,MAAO,MAAc,MAAQF,KAAKC,MAA2C,IAArC1C,KAAK+B,MAAMuD,QAAQrF,KAAK4C,KAAM,MAAc,KAC9L,QAAUJ,KAAKC,MAA0C,IAApC1C,KAAK+B,MAAMuD,QAAQrF,KAAKsC,IAAK,MAAc,MAAQE,KAAKC,MAA4C,IAAtC1C,KAAK+B,MAAMuD,QAAQrF,KAAK0C,MAAO,MAAc,MAAQF,KAAKC,MAA2C,IAArC1C,KAAK+B,MAAMuD,QAAQrF,KAAK4C,KAAM,MAAc,MAAQ5C,KAAKiD,OAAS,KAO7NsC,OAAQ,WACJ,MAAmB,KAAfvF,KAAK8C,MACE,cAGP9C,KAAK8C,MAAQ,GACN,EAGJ/C,KAAK+B,MAAM0D,YAAYzF,KAAK+B,MAAMgD,SAAS9E,KAAKsC,IAAKtC,KAAK0C,MAAO1C,KAAK4C,MAAM,MAAU,GAQjG6C,SAAU,SAASC,GACf,GAAIC,GAAa,IAAM5F,KAAK+B,MAAMmD,UAAUjF,KAAKsC,IAAKtC,KAAK0C,MAAO1C,KAAK4C,KAAM5C,KAAK8C,OAC9E8C,EAAmBD,EACnBxC,EAAenD,KAAKmD,aAAe,qBAAuB,EAM9D,OAJIuC,KACAE,EAAmB,GAAI7F,MAAK+B,MAAM4D,GAAaR,gBAG5C,8CAAgD/B,EAAe,iBAAmBwC,EAAa,gBAAkBC,EAAmB,KAQ/IC,SAAU,SAAS3C,GACfA,EAASA,GAAUlD,KAAKkD,MAExB,IAAI4C,KAAgB5C,EAChB6C,GAAkB,EAClBC,EAAWhG,KAAK8C,MAAQ,GAAK9C,KAAK8C,OAAS,EAC3CmD,EACID,IACCF,IAEc,QAAX5C,GACW,SAAXA,GACW,SAAXA,GACW,SAAXA,EAGZ,OAAI+C,GACe,SAAX/C,GAAoC,IAAflD,KAAK8C,MACnB9C,KAAKuF,SAGTvF,KAAKmF,eACM,QAAXjC,EACP6C,EAAkB/F,KAAKmF,cACL,SAAXjC,EACP6C,EAAkB/F,KAAKsF,wBACL,QAAXpC,GAA+B,SAAXA,EAC3B6C,EAAkB/F,KAAK+E,cACL,SAAX7B,EACP6C,EAAkB/F,KAAK+E,aAAY,GACjB,SAAX7B,EACP6C,EAAkB/F,KAAKkF,eACL,SAAXhC,EACP6C,EAAkB/F,KAAKuF,SACL,QAAXrC,EACP6C,EAAkB/F,KAAK2E,cACL,QAAXzB,IACP6C,EAAkB/F,KAAKsE,eAGpByB,GAAmB/F,KAAK+E,gBAQnCmB,QAAS,SAASC,GACdA,EAAqB,IAAXA,EAAgB,EAAKA,GAAU,EAEzC,IAAI3B,GAAMxE,KAAKuE,OAIf,OAHAC,GAAIE,GAAKyB,EAAS,IAClB3B,EAAIE,EAAI3E,KAAK+B,MAAMsE,QAAQ5B,EAAIE,GAExB,GAAI3E,MAAK+B,MAAM0C,IAQ1B6B,SAAU,SAASF,GACfA,EAAqB,IAAXA,EAAgB,EAAKA,GAAU,EAEzC,IAAI/D,GAAMpC,KAAK+D,OAKf,OAJA3B,GAAIG,EAAIC,KAAK8D,IAAI,EAAG9D,KAAK+D,IAAI,IAAKnE,EAAIG,EAAIC,KAAKC,MAAM,MAAQ0D,EAAS,QACtE/D,EAAIO,EAAIH,KAAK8D,IAAI,EAAG9D,KAAK+D,IAAI,IAAKnE,EAAIO,EAAIH,KAAKC,MAAM,MAAQ0D,EAAS,QACtE/D,EAAIS,EAAIL,KAAK8D,IAAI,EAAG9D,KAAK+D,IAAI,IAAKnE,EAAIS,EAAIL,KAAKC,MAAM,MAAQ0D,EAAS,QAE/D,GAAIpG,MAAK+B,MAAMM,IAQ1BoE,OAAQ,SAASL,GACbA,EAAqB,IAAXA,EAAgB,EAAKA,GAAU,EAEzC,IAAI3B,GAAMxE,KAAKuE,OAIf,OAHAC,GAAIE,GAAKyB,EAAS,IAClB3B,EAAIE,EAAI3E,KAAK+B,MAAMsE,QAAQ5B,EAAIE,GAExB,GAAI3E,MAAK+B,MAAM0C,IAQ1BiC,WAAY,SAASN,GACjBA,EAAqB,IAAXA,EAAgB,EAAKA,GAAU,EAEzC,IAAI3B,GAAMxE,KAAKuE,OAIf,OAHAC,GAAIJ,GAAK+B,EAAS,IAClB3B,EAAIJ,EAAIgC,QAAQ5B,EAAIJ,GAEb,GAAIrE,MAAK+B,MAAM0C,IAQ1BkC,SAAU,SAASP,GACfA,EAAqB,IAAXA,EAAgB,EAAKA,GAAU,EAEzC,IAAI3B,GAAMxE,KAAKuE,OAIf,OAHAC,GAAIJ,GAAK+B,EAAS,IAClB3B,EAAIJ,EAAIrE,KAAK+B,MAAMsE,QAAQ5B,EAAIJ,GAExB,GAAIrE,MAAK+B,MAAM0C,IAO1BmC,UAAW,WACP,MAAO3G,MAAKyG,WAAW,MAQ3BG,KAAM,SAAST,GACX,GAAI3B,GAAMxE,KAAKuE,QACXsC,GAAOrE,KAAKC,MAAM+B,EAAIL,GAAKgC,GAAU,GAGzC,OADA3B,GAAIL,EAAU,EAAN0C,EAAU,IAAMA,EAAMA,EACvB,GAAI9G,MAAK+B,MAAM0C,IAS1BsC,UAAW,SAASC,EAASC,GACzBD,EAAUA,GAAW,EACrBC,EAASA,GAAU,EAEnB,IAAIxC,GAAMxE,KAAKuE,QACX0C,EAAO,IAAMD,EACbE,GAAU,GAAInH,MAAK+B,MAAM9B,MAE7B,KAAKwE,EAAIL,GAAMK,EAAIL,GAAK8C,EAAOF,GAAW,GAAM,KAAO,MAAOA,GAC1DvC,EAAIL,GAAKK,EAAIL,EAAI8C,GAAQ,IACzBC,EAAOC,KAAK,GAAIpH,MAAK+B,MAAM0C,GAG/B,OAAO0C,IAOXE,WAAY,WACR,GAAI5C,GAAMxE,KAAKuE,OAEf,OADAC,GAAIL,GAAKK,EAAIL,EAAI,KAAO,IACjB,GAAIpE,MAAK+B,MAAM0C,IAQ1B6C,cAAe,SAASN,GACpBA,EAAUA,GAAW,CASrB,KAPA,GAAI9C,GAAMjE,KAAKgE,QACXG,EAAIF,EAAIE,EACRC,EAAIH,EAAIG,EACRC,EAAIJ,EAAII,EACR6C,KACAI,EAAe,EAAIP,EAEhBA,KACHG,EAAOC,KAAK,GAAIpH,MAAK+B,OACjBqC,EAAGA,EACHC,EAAGA,EACHC,EAAGA,KAEPA,GAAKA,EAAIiD,GAAgB,CAG7B,OAAOJ,IAOXK,gBAAiB,WACb,GAAI/C,GAAMxE,KAAKuE,QACXJ,EAAIK,EAAIL,CAEZ,QACI,GAAIpE,MAAK+B,MAAM9B,MACf,GAAID,MAAK+B,OACLqC,GAAIA,EAAI,IAAM,IACdC,EAAGI,EAAIJ,EACPM,EAAGF,EAAIE,IAEX,GAAI3E,MAAK+B,OACLqC,GAAIA,EAAI,KAAO,IACfC,EAAGI,EAAIJ,EACPM,EAAGF,EAAIE,MASnB8C,MAAO,WACH,GAAIhD,GAAMxE,KAAKuE,QACXJ,EAAIK,EAAIL,CAEZ,QACI,GAAIpE,MAAK+B,MAAM9B,MACf,GAAID,MAAK+B,OACLqC,GAAIA,EAAI,KAAO,IACfC,EAAGI,EAAIJ,EACPM,EAAGF,EAAIE,IAEX,GAAI3E,MAAK+B,OACLqC,GAAIA,EAAI,KAAO,IACfC,EAAGI,EAAIJ,EACPM,EAAGF,EAAIE,MASnB+C,OAAQ,WACJ,GAAIjD,GAAMxE,KAAKuE,QACXJ,EAAIK,EAAIL,CAEZ,QACI,GAAIpE,MAAK+B,MAAM9B,MACf,GAAID,MAAK+B,OACLqC,GAAIA,EAAI,IAAM,IACdC,EAAGI,EAAIJ,EACPM,EAAGF,EAAIE,IAEX,GAAI3E,MAAK+B,OACLqC,GAAIA,EAAI,KAAO,IACfC,EAAGI,EAAIJ,EACPM,EAAGF,EAAIE,IAEX,GAAI3E,MAAK+B,OACLqC,GAAIA,EAAI,KAAO,IACfC,EAAGI,EAAIJ,EACPM,EAAGF,EAAIE,QAWnBgD,kBACIC,UAAW,SACXC,aAAc,SACdC,KAAM,MACNC,WAAY,SACZC,MAAO,SACPC,MAAO,SACPC,OAAQ,SACRC,MAAO,MACPC,eAAgB,SAChBvF,KAAM,MACNwF,WAAY,SACZC,MAAO,SACPC,UAAW,SACXC,YAAa,SACbC,UAAW,SACXC,WAAY,SACZC,UAAW,SACXC,MAAO,SACPC,eAAgB,SAChBC,SAAU,SACVC,QAAS,SACTC,KAAM,MACNC,SAAU,SACVC,SAAU,SACVC,cAAe,SACfC,SAAU,SACVC,UAAW,SACXC,SAAU,SACVC,UAAW,SACXC,YAAa,SACbC,eAAgB,SAChBC,WAAY,SACZC,WAAY,SACZC,QAAS,SACTC,WAAY,SACZC,aAAc,SACdC,cAAe,SACfC,cAAe,SACfC,cAAe,SACfC,cAAe,SACfC,WAAY,SACZC,SAAU,SACVC,YAAa,SACbC,QAAS,SACTC,QAAS,SACTC,WAAY,SACZC,UAAW,SACXC,YAAa,SACbC,YAAa,SACbC,QAAS,MACTC,UAAW,SACXC,WAAY,SACZC,KAAM,SACNC,UAAW,SACXC,KAAM,SACNtI,MAAO,SACPuI,YAAa,SACbC,KAAM,SACNC,SAAU,SACVC,QAAS,SACTC,UAAW,SACXC,OAAQ,SACRC,MAAO,SACPC,MAAO,SACPC,SAAU,SACVC,cAAe,SACfC,UAAW,SACXC,aAAc,SACdC,UAAW,SACXC,WAAY,SACZC,UAAW,SACXC,qBAAsB,SACtBC,UAAW,SACXC,WAAY,SACZC,UAAW,SACXC,UAAW,SACXC,YAAa,SACbC,cAAe,SACfC,aAAc,SACdC,eAAgB,MAChBC,eAAgB,MAChBC,eAAgB,SAChBC,YAAa,SACbC,KAAM,MACNC,UAAW,SACXC,MAAO,SACPC,QAAS,MACTC,OAAQ,SACRC,iBAAkB,SAClBC,WAAY,SACZC,aAAc,SACdC,aAAc,SACdC,eAAgB,SAChBC,gBAAiB,SACjBC,kBAAmB,SACnBC,gBAAiB,SACjBC,gBAAiB,SACjBC,aAAc,SACdC,UAAW,SACXC,UAAW,SACXC,SAAU,SACVC,YAAa,SACbC,KAAM,SACNC,QAAS,SACTC,MAAO,SACPC,UAAW,SACXC,OAAQ,SACRC,UAAW,SACXC,OAAQ,SACRC,cAAe,SACfC,UAAW,SACXC,cAAe,SACfC,cAAe,SACfC,WAAY,SACZC,UAAW,SACXC,KAAM,SACNC,KAAM,SACNC,KAAM,SACNC,WAAY,SACZC,OAAQ,SACR1M,IAAK,MACL2M,UAAW,SACXC,UAAW,SACXC,YAAa,SACbC,OAAQ,SACRC,WAAY,SACZC,SAAU,SACVC,SAAU,SACVC,OAAQ,SACRC,OAAQ,SACRC,QAAS,SACTC,UAAW,SACXC,UAAW,SACXC,UAAW,SACXC,KAAM,SACNC,YAAa,SACbC,UAAW,SACXC,IAAK,SACLC,KAAM,SACNC,QAAS,SACTC,OAAQ,SACRC,UAAW,SACXC,OAAQ,SACRC,MAAO,SACPC,MAAO,MACPC,WAAY,SACZC,OAAQ,MACRC,YAAa,UASjBnL,YAAazF,KAAK+B,MAAM8O,KAAKlJ,kBAQ7BkJ,KAAM,SAASC,GACX,GAAIC,KAEJ,KAAK,GAAIlP,KAAKiP,GACNA,EAAOE,eAAenP,KACtBkP,EAAQD,EAAOjP,IAAMA,EAI7B,OAAOkP,IASXhN,WAAY,SAASf,GAOjB,MANAA,GAAIiO,WAAWjO,IAEXkO,MAAMlO,IAAU,EAAJA,GAASA,EAAI,KACzBA,EAAI,GAGDA,GAUXsC,QAAS,SAASxB,EAAOyC,GACjB4K,eAAerN,KACfA,EAAQ,OAGZ,IAAIsN,GAAoBC,aAAavN,EAOrC,OANAA,GAAQrB,KAAK+D,IAAID,EAAK9D,KAAK8D,IAAI,EAAG0K,WAAWnN,KAEzCsN,IACAtN,EAAQwN,SAASxN,EAAQyC,EAAK,IAAM,KAGpC9D,KAAK8O,IAAIzN,EAAQyC,GAAO,KACjB,EAGHzC,EAAQyC,EAAO0K,WAAW1K,IAStCF,QAAS,SAASvC,GACd,MAAOrB,MAAK+D,IAAI,EAAG/D,KAAK8D,IAAI,EAAGzC,KASnC0N,gBAAiB,SAAS1N,GACtB,MAAOwN,UAASxN,EAAO,KAS3BqN,eAAgB,SAASrN,GACrB,MAAmC,UAA5B9D,KAAKyR,KAAKC,QAAQ5N,IAA4C,IAAtBA,EAAM6N,QAAQ,MAAoC,IAAtBV,WAAWnN,IAS1FuN,aAAc,SAASvN,GACnB,MAAmC,UAA5B9D,KAAKyR,KAAKC,QAAQ5N,IAA4C,IAAtBA,EAAM6N,QAAQ,MASjEC,KAAM,SAAS9N,GACX,MAAuB,IAAhBA,EAAMhC,OAAc,IAAMgC,EAAQ,GAAKA,GASlD+N,oBAAqB,SAAS/N,GAK1B,MAJa,IAATA,IACAA,EAAiB,IAARA,EAAe,KAGrBA,GASXgO,oBAAqB,SAAShO,GAC1B,MAAOrB,MAAKC,MAA0B,IAApBuO,WAAWnN,IAAcgC,SAAS,KASxDiM,oBAAqB,SAASjO,GAC1B,MAAQ0N,iBAAgB1N,GAAS,KAQrCkO,cAAe,WACX,GAAIC,GAAa,gBACbC,EAAY,uBACZC,EAAU,MAAQD,EAAY,QAAUD,EAAa,IACrDG,EAAmB,cAAgBD,EAAU,aAAeA,EAAU,aAAeA,EAAU,YAC/FE,EAAmB,cAAgBF,EAAU,aAAeA,EAAU,aAAeA,EAAU,aAAeA,EAAU,WAE5H,QACI9P,IAAK,GAAIiQ,QAAO,MAAQF,GACxBG,KAAM,GAAID,QAAO,OAASD,GAC1B5N,IAAK,GAAI6N,QAAO,MAAQF,GACxBI,KAAM,GAAIF,QAAO,OAASD,GAC1BnO,IAAK,GAAIoO,QAAO,MAAQF,GACxBK,KAAM,qDACNC,KAAM,qDACNC,KAAM,yEAUdC,eAAgB,SAAS5Q,GACrB,GAGI6Q,GAHAC,EAAW,WACXC,EAAY,OACZC,GAAQ,CAKZ,IAFAhR,EAAQA,EAAMiR,QAAQH,EAAU,IAAIG,QAAQF,EAAW,IAAIG,cAEvDvL,iBAAiB3F,GACjBA,EAAQ2F,iBAAiB3F,GACzBgR,GAAQ,MACL,IAAa,eAAThR,EACP,OACIQ,EAAG,EACHI,EAAG,EACHE,EAAG,EACHE,EAAG,EACHG,OAAQ,OAIhB,QAAK0P,EAAQb,cAAc3P,IAAI8Q,KAAKnR,KAE5BQ,EAAGqQ,EAAM,GACTjQ,EAAGiQ,EAAM,GACT/P,EAAG+P,EAAM,KAELA,EAAQb,cAAcO,KAAKY,KAAKnR,KAEpCQ,EAAGqQ,EAAM,GACTjQ,EAAGiQ,EAAM,GACT/P,EAAG+P,EAAM,GACT7P,EAAG6P,EAAM,KAELA,EAAQb,cAAcvN,IAAI0O,KAAKnR,KAEnCoC,EAAGyO,EAAM,GACTxO,EAAGwO,EAAM,GACTlO,EAAGkO,EAAM,KAELA,EAAQb,cAAcQ,KAAKW,KAAKnR,KAEpCoC,EAAGyO,EAAM,GACTxO,EAAGwO,EAAM,GACTlO,EAAGkO,EAAM,GACT7P,EAAG6P,EAAM,KAELA,EAAQb,cAAc9N,IAAIiP,KAAKnR,KAEnCoC,EAAGyO,EAAM,GACTxO,EAAGwO,EAAM,GACTvO,EAAGuO,EAAM,KAELA,EAAQb,cAAcW,KAAKQ,KAAKnR,KAEpCgB,EAAG+O,oBAAoBc,EAAM,IAC7BrQ,EAAGgP,gBAAgBqB,EAAM,IACzBjQ,EAAG4O,gBAAgBqB,EAAM,IACzB/P,EAAG0O,gBAAgBqB,EAAM,IACzB1P,OAAQ6P,EAAQ,OAAS,SAErBH,EAAQb,cAAcU,KAAKS,KAAKnR,KAEpCQ,EAAGgP,gBAAgBqB,EAAM,IACzBjQ,EAAG4O,gBAAgBqB,EAAM,IACzB/P,EAAG0O,gBAAgBqB,EAAM,IACzB1P,OAAQ6P,EAAQ,OAAS,QAErBH,EAAQb,cAAcS,KAAKU,KAAKnR,KAEpCQ,EAAGgP,gBAAgBqB,EAAM,GAAK,GAAKA,EAAM,IACzCjQ,EAAG4O,gBAAgBqB,EAAM,GAAK,GAAKA,EAAM,IACzC/P,EAAG0O,gBAAgBqB,EAAM,GAAK,GAAKA,EAAM,IACzC1P,OAAQ6P,EAAQ,OAAS,QAI1B,GASX1Q,WAAY,SAASN,GACjB,GAAIK,IACIG,EAAG,EACHI,EAAG,EACHE,EAAG,GAEPC,EAAQ,EACRE,GAAQ,EACRE,GAAS,CAgCb,OA9BgC,UAA5BnD,KAAKyR,KAAKC,QAAQ1P,KAClBA,EAAQ4Q,eAAe5Q,IAGK,UAA5BhC,KAAKyR,KAAKC,QAAQ1P,KACdA,EAAMgP,eAAe,MAAQhP,EAAMgP,eAAe,MAAQhP,EAAMgP,eAAe,MAC/E3O,EAAM+Q,SAASpR,EAAMQ,EAAGR,EAAMY,EAAGZ,EAAMc,GACvCG,GAAQ,EACRE,EAAwC,MAA/BkQ,OAAOrR,EAAMQ,GAAG8Q,OAAO,IAAc,OAAS,OAChDtR,EAAMgP,eAAe,MAAQhP,EAAMgP,eAAe,MAAQhP,EAAMgP,eAAe,MACtFhP,EAAMqC,EAAIwN,oBAAoB7P,EAAMqC,GACpCrC,EAAMsC,EAAIuN,oBAAoB7P,EAAMsC,GACpCjC,EAAMkR,SAASvR,EAAMoC,EAAGpC,EAAMqC,EAAGrC,EAAMsC,GACvCrB,GAAQ,EACRE,EAAS,OACFnB,EAAMgP,eAAe,MAAQhP,EAAMgP,eAAe,MAAQhP,EAAMgP,eAAe,OACtFhP,EAAMqC,EAAIwN,oBAAoB7P,EAAMqC,GACpCrC,EAAM2C,EAAIkN,oBAAoB7P,EAAM2C,GACpCtC,EAAMmR,SAASxR,EAAMoC,EAAGpC,EAAMqC,EAAGrC,EAAM2C,GACvC1B,GAAQ,EACRE,EAAS,OAGTnB,EAAMgP,eAAe,OACrBjO,EAAQf,EAAMgB,IAItBD,EAAQgB,WAAWhB,IAGfE,MAAOA,EACPE,OAAQnB,EAAMmB,QAAUA,EACxBX,EAAGC,KAAK+D,IAAI,IAAK/D,KAAK8D,IAAIlE,EAAIG,EAAG,IACjCI,EAAGH,KAAK+D,IAAI,IAAK/D,KAAK8D,IAAIlE,EAAIO,EAAG,IACjCE,EAAGL,KAAK+D,IAAI,IAAK/D,KAAK8D,IAAIlE,EAAIS,EAAG,IACjCE,EAAGD,IAcXqQ,SAAU,SAAS5Q,EAAGI,EAAGE,GACrB,OACIN,EAAqB,IAAlB8C,QAAQ9C,EAAG,KACdI,EAAqB,IAAlB0C,QAAQ1C,EAAG,KACdE,EAAqB,IAAlBwC,QAAQxC,EAAG,OAWtB4B,SAAU,SAASlC,EAAGI,EAAGE,GACrBN,EAAI8C,QAAQ9C,EAAG,KACfI,EAAI0C,QAAQ1C,EAAG,KACfE,EAAIwC,QAAQxC,EAAG,IAEf,IAEIsB,GAAGC,EAFHkC,EAAM9D,KAAK8D,IAAI/D,EAAGI,EAAGE,GACrB0D,EAAM/D,KAAK+D,IAAIhE,EAAGI,EAAGE,GACf6B,GAAK4B,EAAMC,GAAO,CAE5B,IAAID,GAAOC,EACPpC,EAAIC,EAAI,MACL,CACH,GAAIoP,GAAIlN,EAAMC,CAEd,QADAnC,EAAIM,EAAI,GAAM8O,GAAK,EAAIlN,EAAMC,GAAOiN,GAAKlN,EAAMC,GACvCD,GACJ,IAAK/D,GACD4B,GAAKxB,EAAIE,GAAK2Q,GAAS3Q,EAAJF,EAAQ,EAAI,EAC/B,MACJ,KAAKA,GACDwB,GAAKtB,EAAIN,GAAKiR,EAAI,CAClB,MACJ,KAAK3Q,GACDsB,GAAK5B,EAAII,GAAK6Q,EAAI,EAI1BrP,GAAK,EAGT,OACIA,EAAGA,EACHC,EAAGA,EACHM,EAAGA,IAYX6O,SAAU,SAASpP,EAAGC,EAAGM,GAKrB,QAAS+O,GAAQC,EAAGC,EAAGC,GAGnB,MAFQ,GAAJA,IAAOA,GAAK,GACZA,EAAI,IAAGA,GAAK,GACR,EAAI,EAARA,EAAkBF,EAAc,GAATC,EAAID,GAASE,EAChC,GAAJA,EAAkBD,EACd,EAAI,EAARC,EAAkBF,GAAKC,EAAID,IAAM,EAAI,EAAIE,GAAK,EAC3CF,EAVXvP,EAAIkB,QAAQlB,EAAG,KACfC,EAAIiB,QAAQjB,EAAG,KACfM,EAAIW,QAAQX,EAAG,IAWf,IAAInC,GAAGI,EAAGE,CAEV,IAAU,IAANuB,EACA7B,EAAII,EAAIE,EAAI6B,MACT,CACH,GAAIiP,GAAQ,GAAJjP,EAAUA,GAAK,EAAIN,GAAKM,EAAIN,EAAIM,EAAIN,EACxCsP,EAAI,EAAIhP,EAAIiP,CAEhBpR,GAAIkR,EAAQC,EAAGC,EAAGxP,EAAI,EAAI,GAC1BxB,EAAI8Q,EAAQC,EAAGC,EAAGxP,GAClBtB,EAAI4Q,EAAQC,EAAGC,EAAGxP,EAAI,EAAI,GAG9B,OACI5B,EAAO,IAAJA,EACHI,EAAO,IAAJA,EACHE,EAAO,IAAJA,IAWXqB,SAAU,SAAS3B,EAAGI,EAAGE,GACrBN,EAAI8C,QAAQ9C,EAAG,KACfI,EAAI0C,QAAQ1C,EAAG,KACfE,EAAIwC,QAAQxC,EAAG,IAEf,IAEIsB,GAAGC,EAFHkC,EAAM9D,KAAK8D,IAAI/D,EAAGI,EAAGE,GACrB0D,EAAM/D,KAAK+D,IAAIhE,EAAGI,EAAGE,GACfwB,EAAIiC,EACVkN,EAAIlN,EAAMC,CAId,IAFAnC,EAAY,IAARkC,EAAY,EAAIkN,EAAIlN,EAEpBA,GAAOC,EACPpC,EAAI,MACD,CACH,OAAQmC,GACJ,IAAK/D,GACD4B,GAAKxB,EAAIE,GAAK2Q,GAAS3Q,EAAJF,EAAQ,EAAI,EAC/B,MACJ,KAAKA,GACDwB,GAAKtB,EAAIN,GAAKiR,EAAI,CAClB,MACJ,KAAK3Q,GACDsB,GAAK5B,EAAII,GAAK6Q,EAAI,EAI1BrP,GAAK,EAGT,OACIA,EAAGA,EACHC,EAAGA,EACHC,EAAGA,IAYXiP,SAAU,SAASnP,EAAGC,EAAGC,GACrBF,EAAsB,EAAlBkB,QAAQlB,EAAG,KACfC,EAAIiB,QAAQjB,EAAG,KACfC,EAAIgB,QAAQhB,EAAG,IAEf,IAAIzC,GAAIY,KAAKqR,MAAM1P,GACf2P,EAAI3P,EAAIvC,EACR8R,EAAIrP,GAAK,EAAID,GACbuP,EAAItP,GAAK,EAAIyP,EAAI1P,GACjBwP,EAAIvP,GAAK,GAAK,EAAIyP,GAAK1P,GACvB2P,EAAMnS,EAAI,EACVW,GAAK8B,EAAGsP,EAAGD,EAAGA,EAAGE,EAAGvP,GAAG0P,GACvBpR,GAAKiR,EAAGvP,EAAGA,EAAGsP,EAAGD,EAAGA,GAAGK,GACvBlR,GAAK6Q,EAAGA,EAAGE,EAAGvP,EAAGA,EAAGsP,GAAGI,EAE3B,QACIxR,EAAO,IAAJA,EACHI,EAAO,IAAJA,EACHE,EAAO,IAAJA,IAaXiC,SAAU,SAASvC,EAAGI,EAAGE,EAAGgC,GACxB,GAAImP,IACArC,KAAKnP,KAAKC,MAAMF,GAAGsD,SAAS,KAC5B8L,KAAKnP,KAAKC,MAAME,GAAGkD,SAAS,KAC5B8L,KAAKnP,KAAKC,MAAMI,GAAGgD,SAAS,KAGhC,OACIhB,IACAmP,EAAI,GAAGC,OAAO,IAAMD,EAAI,GAAGC,OAAO,IAClCD,EAAI,GAAGC,OAAO,IAAMD,EAAI,GAAGC,OAAO,IAClCD,EAAI,GAAGC,OAAO,IAAMD,EAAI,GAAGC,OAAO,GAE3BD,EAAI,GAAGC,OAAO,GAAKD,EAAI,GAAGC,OAAO,GAAKD,EAAI,GAAGC,OAAO,GAGxDD,EAAIE,KAAK,KAYpBjP,UAAW,SAAS1C,EAAGI,EAAGE,EAAGE,GACzB,GAAIiR,IACArC,KAAKE,oBAAoB9O,IACzB4O,KAAKnP,KAAKC,MAAMF,GAAGsD,SAAS,KAC5B8L,KAAKnP,KAAKC,MAAME,GAAGkD,SAAS,KAC5B8L,KAAKnP,KAAKC,MAAMI,GAAGgD,SAAS,KAGhC,OAAOmO,GAAIE,KAAK,KAUpBC,UAAW,SAASpS,EAAOC,GAGvB,GAFAjC,KAAKkC,OAAOC,WAAW,wBAES,UAA5BnC,KAAKyR,KAAKC,QAAQ1P,GAAoB,CACtChC,KAAKkC,OAAOE,IAAI,iDAAkDJ,EAElE,IAAIqS,KAEJ,KAAK,GAAIxS,KAAKG,GACNA,EAAMgP,eAAenP,KACrB7B,KAAKkC,OAAOE,IAAI,yCAA0CP,GAGtDwS,EAASxS,GADH,MAANA,EACcG,EAAMH,GAENgQ,oBAAoB7P,EAAMH,IAKpDG,GAAQqS,EAMZ,MAHArU,MAAKkC,OAAOE,IAAI,yDAChBpC,KAAKkC,OAAOoB,WAEL,GAAItD,MAAK+B,MAAMC,EAAOC,IAUjCqS,OAAQ,SAASC,EAAY5O,GAGzB,MAFA3F,MAAKkC,OAAOE,IAAI,6CAA8CmS,EAAY5O,GAErE4O,GAAe5O,EAIb,GAAI3F,MAAK+B,MAAMwS,GAAYnP,eAAiB,GAAIpF,MAAK+B,MAAM4D,GAAaP,eAHpE,GAWfoP,OAAQ,WAEJ,MADAxU,MAAKkC,OAAOE,IAAI,kCACT,GAAIpC,MAAK+B,MAAMqS,WAClB5R,EAAGC,KAAK+R,SACR5R,EAAGH,KAAK+R,SACR1R,EAAGL,KAAK+R,YAYhBC,IAAK,SAASF,EAAY5O,EAAaS,GACnCA,EAAoB,IAAXA,EAAe,EAAKA,GAAU,GAEvCpG,KAAKkC,OAAOE,IAAI,6CAA8CmS,EAAY5O,EAAaS,EAEvF,IAKIsO,GACAC,EANAC,EAAO,GAAI5U,MAAK+B,MAAMwS,GAAYvQ,QAClC6Q,EAAO,GAAI7U,MAAK+B,MAAM4D,GAAa3B,QACnC2P,EAAIvN,EAAS,IACb0O,EAAQ,EAAJnB,EAAQ,EACZ3Q,EAAI6R,EAAK7R,EAAI4R,EAAK5R,CAqBtB,OAhBI0R,GADAI,EAAI9R,GAAK,GACJ8R,GAECA,EAAI9R,IAAM,EAAI8R,EAAI9R,GAG5B0R,GAAMA,EAAK,GAAK,EAChBC,EAAK,EAAID,EACTnC,MACI/P,EAAGqS,EAAKrS,EAAIkS,EAAKE,EAAKpS,EAAImS,EAC1B/R,EAAGiS,EAAKjS,EAAI8R,EAAKE,EAAKhS,EAAI+R,EAC1B7R,EAAG+R,EAAK/R,EAAI4R,EAAKE,EAAK9R,EAAI6R,EAC1B3R,EAAG6R,EAAK7R,EAAI2Q,EAAIiB,EAAK5R,GAAK,EAAI2Q,IAGlC3T,KAAKkC,OAAOE,IAAI,6CAA8CmQ,MAEvD,GAAIvS,MAAK+B,MAAMwQ,OAU1BwC,YAAa,SAASR,EAAY5O,GAC9B,GAAIqP,GAAS,GAAIhV,MAAK+B,MAAMwS,GACxBU,EAAS,GAAIjV,MAAK+B,MAAM4D,GACxBiP,EAAOI,EAAOhR,QACd6Q,EAAOI,EAAOjR,QACdkR,EAAcF,EAAOxR,gBACrB2R,EAAcF,EAAOzR,gBACrB4R,EACI3S,KAAK8D,IAAIqO,EAAKpS,EAAGqS,EAAKrS,GAAKC,KAAK+D,IAAIoO,EAAKpS,EAAGqS,EAAKrS,GACjDC,KAAK8D,IAAIqO,EAAKhS,EAAGiS,EAAKjS,GAAKH,KAAK+D,IAAIoO,EAAKhS,EAAGiS,EAAKjS,GACjDH,KAAK8D,IAAIqO,EAAK9R,EAAG+R,EAAK/R,GAAKL,KAAK+D,IAAIoO,EAAK9R,EAAG+R,EAAK/R,EAGzD,QACIuS,WAAY5S,KAAK8O,IAAI2D,EAAcC,GACnCnT,MAAOoT,IAWfE,WAAY,SAASC,EAAiBC,GAClC,GAAIT,GAAc,GAAI/U,MAAK+B,MAAMgT,YAAYQ,EAAiBC,EAC9D,OAAOT,GAAYM,WAAa,KAAON,EAAY/S,MAAQ,KAU/DyT,aAAc,SAASC,EAAWC,GAC9B,GAAIC,IAAY,EACZC,EAAY,EACZC,GAAiB,CAErB9V,MAAKkC,OAAOC,WAAW,gDACvBnC,KAAKkC,OAAOE,IAAI,mEAAoEsT,EAAWC,EAE/F,KAAK,GAAI9T,GAAI,EAAGA,EAAI8T,EAAU7T,OAAQD,IAAK,CACvC,GAAIkT,GAAc,GAAI/U,MAAK+B,MAAMgT,YAAYW,EAAWC,EAAU9T,IAC9DkU,EAAWhB,EAAYM,WAAa,KAAON,EAAY/S,MAAQ,IAC/DgU,EAAQ,GAAKjB,EAAYM,WAAa,KAAQN,EAAY/S,MAAQ,GAEtEhC,MAAKkC,OAAOE,IACR,yEACAP,EACA8T,EAAU9T,GACVkT,EACAgB,EACAC,IAICD,IAAaD,GACbC,GAAYD,GAAkBE,EAAQH,IACpCE,IAAeD,GAAmBE,EAAQH,KAE7CD,EAAY,GAAI5V,MAAK+B,MAAM4T,EAAU9T,IACrCgU,EAAYG,EACZF,EAAiBC,GAOzB,MAHA/V,MAAKkC,OAAOE,IAAI,6CAA8CwT,EAAWF,GACzE1V,KAAKkC,OAAOoB,WAELsS,MAGhB3V,MACH,SAAUF,GACN,YAEAA,GAAOC,KAAKiW,KAAOjW,KAAKsB,MAAMC,QAgB1BI,KAAM,SAASuU,GAoBX,MAnBAA,GAAUA,MAEVlW,KAAKkC,OAAOC,YAAW,EAAM,uBAC7BnC,KAAKkC,OAAOE,IAAI,uCAAwC8T,GAExDjW,KAAKkW,MAAQD,EAAQC,OAAS,SAC9BlW,KAAKmW,QAAUF,EAAQE,SAAW,SAClCnW,KAAKoW,OAASH,EAAQG,QAAU,SAChCpW,KAAKqW,KAAOJ,EAAQI,MAAQ,SAC5BrW,KAAKsW,WAAaL,EAAQK,YAAc,SACxCtW,KAAKuW,OAASN,EAAQM,QAAU,QAE3BxW,KAAKiW,KAAKQ,YAAYxW,OACvBD,KAAKkC,OAAOmB,QAAQ,kDAAmD6S,GAG3ElW,KAAKkC,OAAOE,IAAI,+BAAgCnC,MAChDD,KAAKkC,OAAOoB,WAELrD,MASXyD,QAAS,WACL,MAAO1D,MAAKiW,KAAKQ,YAAYxW,OASjCyW,SAAU,WACN,MAAOzW,MAAKkW,OAUhBQ,SAAU,SAASR,GAOf,MANInW,MAAKiW,KAAKW,iBAAiBT,GAC3BlW,KAAKkW,MAAQA,EAEbnW,KAAKkC,OAAOmB,QAAQ,kDAAmD8S,GAGpElW,MASX4W,WAAY,WACR,MAAO5W,MAAKmW,SAUhBU,WAAY,SAASV,GAOjB,MANIpW,MAAKiW,KAAKc,mBAAmBX,GAC7BnW,KAAKmW,QAAUA,EAEfpW,KAAKkC,OAAOmB,QAAQ,oDAAqD+S,GAGtEnW,MASX+W,UAAW,WACP,MAAO/W,MAAKoW,QAUhBY,UAAW,SAASZ,GAOhB,MANIrW,MAAKiW,KAAKiB,kBAAkBb,GAC5BpW,KAAKoW,OAASA,EAEdrW,KAAKkC,OAAOmB,QAAQ,mDAAoDgT,GAGrEpW,MASXkX,QAAS,WACL,MAAOlX,MAAKqW,MAUhBc,QAAS,SAASd,GAOd,MANItW,MAAKiW,KAAKoB,gBAAgBf,GAC1BrW,KAAKqW,KAAOA,EAEZtW,KAAKkC,OAAOmB,QAAQ,iDAAkDiT,GAGnErW,MASXqX,cAAe,WACX,MAAOrX,MAAKsW,YAUhBgB,cAAe,SAAShB,GAOpB,MANIvW,MAAKiW,KAAKuB,sBAAsBjB,GAChCtW,KAAKsW,WAAaA,EAElBvW,KAAKkC,OAAOmB,QAAQ,uDAAwDkT,GAGzEtW,MASXwX,UAAW,WACP,MAAOxX,MAAKuW,QAUhBkB,UAAW,SAASlB,GAOhB,MANIxW,MAAKiW,KAAK0B,kBAAkBnB,GAC5BvW,KAAKuW,OAASA,EAEdxW,KAAKkC,OAAOmB,QAAQ,mDAAoDmT,GAGrEvW,MASX6F,SAAU,WACN,OAEQ7F,KAAKyW,WACLzW,KAAK4W,aACL5W,KAAK+W,YACL/W,KAAKkX,UACL,IAAMlX,KAAKqX,gBACXrX,KAAKwX,aACPtD,KAAK,QASfyD,UAAW,KAAM,KAAM,KAAM,KAAM,KAOnCC,cAAe,SAAU,SAAU,UAAW,WAO9CC,gBAAiB,SAAU,aAAc,WAOzCC,eAAgB,OAAQ,SAAU,UAAW,SAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAO/GC,aAAc,WAAY,UAAW,UAAW,QAAS,SAAU,QAAS,SAAU,UAAW,YAOjGC,mBAAoB,SAAU,WAQ9BC,gBAAiB,SAASpU,GACtB,MAAO9D,MAAKiW,KAAK2B,SAASO,KAAK,SAASC,GACpC,MAAkC,IAA3BtU,EAAMuU,YAAYD,MAUjCxB,iBAAkB,SAAS9S,GACvB,MAAgD,IAAzC9D,KAAKiW,KAAK4B,aAAalG,QAAQ7N,IAS1CiT,mBAAoB,SAASjT,GACzB,MAAkD,IAA3C9D,KAAKiW,KAAK6B,eAAenG,QAAQ7N,IAS5CoT,kBAAmB,SAASpT,GACxB,MAAiD,IAA1C9D,KAAKiW,KAAK8B,cAAcpG,QAAQ7N,IAS3CuT,gBAAiB,SAASvT,GACtB,MAC4C,IAAxC9D,KAAKiW,KAAK+B,YAAYrG,QAAQ7N,IAC9B9D,KAAKiW,KAAKiC,gBAAgBpU,IAUlC0T,sBAAuB,SAAS1T,GAC5B,MACI9D,MAAKiW,KAAKiC,gBAAgBpU,IACoB,IAA9C9D,KAAKiW,KAAKgC,kBAAkBtG,QAAQ7N,IAU5C6T,kBAAmB,WAEf,OAAO,GASXlB,YAAa,SAAS6B,GAClB,MACItY,MAAKiW,KAAKW,iBAAiB0B,EAAK5B,aAChC1W,KAAKiW,KAAKc,mBAAmBuB,EAAKzB,eAClC7W,KAAKiW,KAAKiB,kBAAkBoB,EAAKtB,cACjChX,KAAKiW,KAAKoB,gBAAgBiB,EAAKnB,YAC/BnX,KAAKiW,KAAKuB,sBAAsBc,EAAKhB,kBACrCtX,KAAKiW,KAAK0B,kBAAkBW,EAAKb,cAUzCc,WAAY,WAGR,MADAvY,MAAKkC,OAAOmB,QAAQ,8CACb,GAAIrD,MAAKiW,MASpBuC,SAAU,SAASC,GACf,GAAItC,GAAQuC,OAAOC,iBAAiBF,EAAS,KAE7C,OAAO,IAAIzY,MAAKiW,MACZE,MAAOA,EAAMyC,iBAAiB,cAC9BxC,QAASD,EAAMyC,iBAAiB,gBAChCvC,OAAQF,EAAMyC,iBAAiB,eAC/BtC,KAAMH,EAAMyC,iBAAiB,aAC7BrC,WAAYJ,EAAMyC,iBAAiB,eACnCpC,OAAQL,EAAMyC,iBAAiB,qBAI5C3Y,MACH,SAAUF,GACN,YAeA,SAAS8Y,GAAeC,GACpB,MAAOA,IAASC,EASpB,QAASC,GAAkBC,GACvB,OAAQ,QAAQ,GAAIC,OAAOC,qBAAsBF,GAAQ9E,KAAK,QAWlE,QAASiF,GAAcC,EAAMC,GACzBA,EAAOC,MAAMpZ,UAAUqZ,MAAMC,KAAKH,EAAM,GAEpCI,QAAQL,IAASrZ,KAAKyR,KAAKkI,WAAWD,QAAQL,MAC9CC,EAAK,GAAKN,EAAkBM,EAAK,GAAKA,EAAK,GAAK,IAChDI,QAAQL,GAAMjY,MAAMsY,QAASJ,IAnCrC,GAAIP,GAAkB,GA2CtB,WACQL,OAAOkB,OACPF,QAAQtX,IAAIhB,MAAMsY,SACd,kBAAoB1Z,KAAKM,aAAe,YACxC,uCACA,uCACA,uDACA,uCACA,uCACA,yCAGJoZ,QAAQtX,IAAI,SAAWpC,KAAKM,gBASpC,IAAI4B,IAMA2X,QAAS,EAOTC,MAAO,EAOPC,MAAO,EAOPC,QAAS,EAOTC,KAAM,EAONC,IAAK,IAULC,SAAU,SAASrB,GAEf,MADAC,GAAkBD,EACX7Y,MAQXma,SAAU,WACN,MAAOrB,IAQX3W,IAAK,WAKD,MAJIyW,GAAe5Y,KAAK4Z,UACpBT,EAAc,MAAO/X,WAGlBpB,MAQXoa,MAAO,WAKH,MAJIxB,GAAe5Y,KAAK6Z,QACpBV,EAAc,QAAS/X,WAGpBpB,MAQXqa,MAAO,WAKH,MAJIzB,GAAe5Y,KAAK8Z,QACpBX,EAAc,QAAS/X,WAGpBpB,MAQXoD,QAAS,WAKL,MAJIwV,GAAe5Y,KAAK+Z,UACpBZ,EAAc,OAAQ/X,WAGnBpB,MAQXsa,KAAM,WAKF,MAJI1B,GAAe5Y,KAAKga,OACpBb,EAAc,OAAQ/X,WAGnBpB,MASXkC,WAAY,WASR,MARI0W,GAAe5Y,KAAK4Z,WAChB7Z,KAAKyR,KAAK+I,UAAUnZ,UAAU,KAAOA,UAAU,MAAO,EACtD+X,EAAc,iBAAkBG,MAAMpZ,UAAUqZ,MAAMC,KAAKpY,UAAW,IAEtE+X,EAAc,QAAS/X,YAIxBpB,MAQXqD,SAAU,WAKN,MAJIuV,GAAe5Y,KAAK4Z,UACpBT,EAAc,WAAY/X,WAGvBpB,MAQXwa,UAAW,WAKP,MAJI5B,GAAe5Y,KAAK4Z,UACpBT,EAAc,OAAQ/X,WAGnBpB,MAQXya,QAAS,WAKL,MAJI7B,GAAe5Y,KAAK4Z,UACpBT,EAAc,UAAW/X,WAGtBpB,MAIfF,GAAOC,KAAKkC,OAASA,GAEtBjC,MACH,SAAUF,GACN,YAEAA,GAAOC,KAAK2a,QAAU3a,KAAKsB,MAAMC,QAU7BI,KAAM,SAASiZ,GAQX,MAPAA,GAAUA,GAAW,EAErB5a,KAAKkC,OAAOC,WAAW,0BACvBnC,KAAKkC,OAAOE,IAAI,kCAAmCwY,GACnD3a,KAAK4a,IAAID,GACT5a,KAAKkC,OAAOoB,WAELrD,MAUX4a,IAAK,SAASD,GAYV,MAXI5a,MAAK2a,QAAQG,iBAAiBF,IAC9B5a,KAAKkC,OAAOE,IAAI,+CAAgDwY,GAChE3a,KAAK2a,QAAU5a,KAAK2a,QAAQI,oBAAoBH,IACzC5a,KAAK2a,QAAQvJ,kBAAkBwJ,IACtC5a,KAAKkC,OAAOE,IAAI,oCAAqCwY,GACrD3a,KAAK2a,QAAUA,IAEf5a,KAAKkC,OAAOmB,QAAQ,sCAAuCuX,GAC3D3a,KAAK2a,QAAU,GAGZ3a,MASX+a,IAAK,WACD,MAAO/a,MAAK2a,SAOhB9U,SAAU,WACN,MAAO9F,MAAK2a,QAAQM,oBAAoBhb,KAAK2a,YAcjDxJ,kBAAmB,SAAStN,GACxB,MACI9D,MAAKyR,KAAKyJ,SAASpX,IACnBA,GAAS,GACA,KAATA,GACAA,GAASrB,KAAKqR,MAAMhQ,IAc5BgX,iBAAkB,SAAShX,GACvB,MACI9D,MAAKyR,KAAKyJ,SAASpX,IACnBA,GAAS,GACA,GAATA,GACAA,GAASrB,KAAKqR,MAAMhQ,IAa5BiX,oBAAqB,SAASjX,GAC1B,MAAQ,MAAe,IAARA,GAAeqX,QAAQ,IAY1CF,oBAAqB,SAASnX,GAC1B,OAAQ,IAAMA,GAAS,QAGhC7D,MACH,SAAUF,GACN,YAUAA,GAAOC,KAAKob,EAAI,WACZ,MAAOpb,MAAKqb,OAAOja,MAAMhB,OAAOC,OAAOL,KAAKqb,OAAOlb,WAAYkB,YAYnEtB,EAAOC,KAAKob,EAAE/a,OAAS,SAASib,GAC5B,MAAO,IAAItb,MAAKqb,OAAOE,SAASC,cAAcF,KAGlDvb,EAAOC,KAAKqb,OAASrb,KAAKsB,MAAMC,QAU5BI,KAAM,SAAS8Z,EAAU/a,GACrB+a,EAAWA,GAAY/C,OACvBhY,EAASA,GAAU6a,QAQnB,IAAIG,GAAc,SAASjD,GACnBA,YAAmBkD,UACnB1b,KAAK2b,SAASxU,KAAKqR,IAEzBoD,KAAK5b,KA0BP,OAxBAA,MAAK2b,YAEL5b,KAAKkC,OAAOC,YAAW,EAAM,yBAC7BnC,KAAKkC,OAAOE,IAAI,6CAA8CqZ,EAAU/a,GAEpE+a,YAAoBzb,MAAKqb,OACzBpb,KAAK2b,SAAWH,EAAST,MAEzBhb,KAAKyR,KAAKqK,QAAQL,IAClBA,YAAoBM,iBACpBN,YAAoBO,UAEpBzC,MAAMpZ,UAAUS,QAAQ6Y,KAAKgC,EAAUC,GAChCD,YAAoBE,SAC3B1b,KAAK2b,SAAS,GAAKH,EACZzb,KAAKyR,KAAKwK,SAASR,GAC1BlC,MAAMpZ,UAAUS,QAAQ6Y,KAAK/Y,EAAOwb,iBAAiBT,GAAWC,GAEhE1b,KAAKkC,OAAOmB,QAAQ,8BAA+BoY,GAGvDzb,KAAKkC,OAAOE,IAAI,iCAAkCnC,MAClDD,KAAKkC,OAAOoB,WAELrD,MAWX+a,IAAK,SAASmB,GACV,MAAOnc,MAAKyR,KAAK2K,YAAYD,GAASlc,KAAK2b,SAAW3b,KAAK2b,SAASO,IASxEE,MAAO,WACH,MAAQpc,MAAK2b,UAAY3b,KAAK2b,SAAS9Z,QAAW,GAYtDwa,KAAM,SAASC,GAEX,MADAhD,OAAMpZ,UAAUS,QAAQ6Y,KAAKxZ,KAAK+a,MAAOuB,GAClCtc,MASXS,OAAQ,WACJ,MAAO,IAAIV,MAAKqb,OAAOpb,KAAK+a,IAAI,GAAGwB,aASvCC,SAAU,WACN,MAAO,IAAIzc,MAAKqb,OAAOpb,KAAK+a,IAAI,GAAGyB,WAUvCC,SAAU,SAASC,GACfA,EAAQA,EAAM3B,IAAI,EAElB,IAAIvC,GAAUxY,KAAK+a,IAAI,EAEvB,OAAOvC,KAAYkE,GAASlE,EAAQiE,SAASC,IASjDC,YAAa,WACT,MAAO3c,MAAK+a,IAAI,GAAG4B,aASvBC,aAAc,WACV,MAAO5c,MAAK+a,IAAI,GAAG6B,cASvBC,WAAY,WACR,MAAO7c,MAAK+a,IAAI,GAAG8B,YASvBC,UAAW,WACP,MAAO9c,MAAK+a,IAAI,GAAG+B,WASvBC,MAAO,WAEH,MADA/c,MAAK+a,IAAI,GAAGgC,QACL/c,MASXgd,KAAM,WAEF,MADAhd,MAAK+a,IAAI,GAAGiC,OACLhd,MAYXid,OAAQ,SAASX,GACb,MAAIvc,MAAKyR,KAAKkI,WAAW4C,GACd,GAAIvc,MAAKqb,OAAO9B,MAAMpZ,UAAU+c,OAAOzD,KAAKxZ,KAAK+a,MAAOuB,QAE/Dvc,MAAKkC,OAAOmB,QAAQ,sDAW5B8Z,KAAM,SAAS1B,GACX,MAAO,IAAIzb,MAAKqb,OAAOI,EAAUxb,KAAK+a,IAAI,KAa9CoC,KAAM,SAASA,GACX,MAAIpd,MAAKyR,KAAKwK,SAASmB,GACZnd,KAAK+a,IAAI,GAAGqC,aAAaD,IACzBpd,KAAKyR,KAAK6L,SAASF,KAC1Bpd,KAAKkC,OAAOC,YAAW,EAAM,wCAC7BlC,KAAKqc,KAAK,SAAS7D,GACfrY,OAAOO,KAAKyc,GAAMxc,QAAQ,SAASC,GAC/Bb,KAAKkC,OAAOE,IAAI,2CAA4CvB,EAAKuc,EAAKvc,GAAM4X,GACxE2E,EAAKvc,MAAS,EACd4X,EAAQ8E,gBAAgB1c,GAExB4X,EAAQ+E,aAAa3c,EAAKuc,EAAKvc,QAI3Cb,KAAKkC,OAAOoB,YAGTrD,OAeXwd,IAAK,SAASA,EAAKC,GAGf,MAFAA,GAAgBA,GAAiB,KAE7B1d,KAAKyR,KAAKwK,SAASwB,GACZ/E,OAAOC,iBAAiB1Y,KAAK+a,IAAI,GAAI0C,GAAe9E,iBAAiB5Y,KAAKyR,KAAKkM,gBAAgBF,KAC/Fzd,KAAKyR,KAAK6L,SAASG,KAC1Bzd,KAAKkC,OAAOC,YAAW,EAAM,gCAC7BlC,KAAKqc,KAAK,SAAS7D,GACfrY,OAAOO,KAAK8c,GAAK7c,QAAQ,SAASC,GAC9Bb,KAAKkC,OAAOE,IAAI,2CAA4CvB,EAAK4c,EAAI5c,GAAM4X,GAEvEgF,EAAI5c,MAAS,EACb4X,EAAQtC,MAAMyH,eAAe5d,KAAKyR,KAAKkM,gBAAgB9c,IAEvD4X,EAAQtC,MAAMnW,KAAKyR,KAAKoM,mBAAmBhd,IADpCqQ,MAAMuM,EAAI5c,KAAmD,IAA1Cb,KAAKqb,OAAOyC,cAAcnM,QAAQ9Q,GACT4c,EAAI5c,GAEJ4c,EAAI5c,GAAO,SAI1Eb,KAAKkC,OAAOoB,YAGTrD,OAUX8d,KAAM,SAASC,GACX,GAAIC,EAEJ,OAAOhe,MAAKqc,KAAK,SAAS7D,GACtBwF,EAAUD,EAAKE,QACfzF,EAAQ+D,WAAW2B,aAAaF,EAAQjD,IAAI,GAAIvC,GAChDwF,EAAQG,OAAO3F,MAUvB4F,OAAQ,WACJ,MAAOpe,MAAKqc,KAAK,SAAS7D,GACtBA,EAAQ+D,WAAWA,WAAW8B,aAAa7F,EAASA,EAAQ+D,eAWpE+B,GAAI,SAAS9C,GACT,GAAIhD,EAEJ,OAAIxY,MAAKoc,QAAU,GACf5D,EAAUxY,KAAK+a,IAAI,IAGfvC,EAAQ+F,SACR/F,EAAQgG,iBACRhG,EAAQiG,mBACRjG,EAAQkG,oBACRlG,EAAQmG,uBACRnG,EAAQoG,kBACVpF,KAAKhB,EAASgD,KAGb,GAUXqD,SAAU,SAASC,GAGf,MAFAA,GAAQA,EAAMC,MAAM,QAEb/e,KAAKqc,KAAK,SAAS7D,GACtBsG,EAAMne,QAAQ,SAASqe,GACnBxG,EAAQyG,UAAUC,IAAIF,QAYlCG,YAAa,SAASL,GAGlB,MAFAA,GAAQA,EAAMC,MAAM,QAEb/e,KAAKqc,KAAK,SAAS7D,GACtBsG,EAAMne,QAAQ,SAASqe,GACnBxG,EAAQyG,UAAUG,OAAOJ,QAYrCK,YAAa,SAASP,GAGlB,MAFAA,GAAQA,EAAMC,MAAM,QAEb/e,KAAKqc,KAAK,SAAS7D,GACtBsG,EAAMne,QAAQ,SAASqe,GACnBxG,EAAQyG,UAAUK,OAAON,QAYrCO,SAAU,SAASP,GACf,MAAIhf,MAAKoc,QAAU,EACR9C,MAAMpZ,UAAUsf,MAAMhG,KAAKxZ,KAAK+a,MAAO,SAASvC,GACnD,MAAOA,GAAQyG,UAAUxC,SAASuC,MAInC,GAkBXS,GAAI,SAASC,EAAWC,GAcpB,MAbI5f,MAAKyR,KAAK6L,SAASqC,GACnBvf,OAAOO,KAAKgf,GAAW/e,QAAQ,SAASC,GACpCZ,KAAKyf,GAAG7e,EAAK8e,EAAU9e,OAG3Bb,KAAKkC,OAAOC,YAAW,EAAM,sCAC7BlC,KAAKqc,KAAK,SAAS7D,GACfzY,KAAKkC,OAAOE,IAAI,wBAAyBud,EAAWlH,GACpDA,EAAQoH,iBAAiBF,EAAWC,GAAS,KAEjD5f,KAAKkC,OAAOoB,YAGTrD,MAcX6f,IAAK,SAASH,EAAWC,GAcrB,MAbI5f,MAAKyR,KAAK6L,SAASqC,GACnBvf,OAAOO,KAAKgf,GAAW/e,QAAQ,SAASC,GACpCZ,KAAK6f,IAAIjf,EAAK8e,EAAU9e,OAG5Bb,KAAKkC,OAAOC,YAAW,EAAM,yCAC7BlC,KAAKqc,KAAK,SAAS7D,GACfzY,KAAKkC,OAAOE,IAAI,oCAAqCud,EAAWlH,GAChEA,EAAQsH,oBAAoBJ,EAAWC,GAAS,KAEpD5f,KAAKkC,OAAOoB,YAGTrD,MAUX+f,QAAS,SAASC,GACd,GAAIC,GAAQ3E,SAAS4E,YAAY,aAKjC,OAHAD,GAAME,UAAUH,GAAW,GAAM,GACjChgB,KAAK+a,IAAI,GAAGqF,SAASH,GAEdjgB,MASXof,OAAQ,WACJ,MAAOpf,MAAKqc,KAAK,SAAS7D,GAClBA,GAAWA,EAAQ+D,YACnB/D,EAAQ+D,WAAW8D,YAAY7H,MAa3CuF,KAAM,SAASA,GACX,MAAIhe,MAAKyR,KAAK2K,YAAY4B,GACf/d,KAAK+a,IAAI,GAAGuF,UAEZtgB,KAAKqc,KAAK,SAAS7D,GACtB,GAAIzY,MAAKqb,OAAO5C,GAAS+H,QAAQpC,OAAOJ,MAcpDI,OAAQ,SAASJ,GAeb,MAdIhe,MAAKyR,KAAKwK,SAAS+B,GACnB/d,KAAKqc,KAAK,SAAS7D,GACfA,EAAQgI,mBAAmB,YAAazC,KAErCA,YAAgBhe,MAAKqb,OAC5Bpb,KAAKqc,KAAK,SAAS7D,GACfA,EAAQiI,YAAY1C,EAAKhD,IAAI,MAE1BgD,YAAgBrC,UACvB1b,KAAKqc,KAAK,SAAS7D,GACfA,EAAQiI,YAAY1C,KAIrB/d,MAYX0gB,QAAS,SAAS3C,GAed,MAdIhe,MAAKyR,KAAKwK,SAAS+B,GACnB/d,KAAKqc,KAAK,SAAS7D,GACfA,EAAQgI,mBAAmB,aAAczC,KAEtCA,YAAgBhe,MAAKqb,OAC5Bpb,KAAKqc,KAAK,SAAS7D,GACfA,EAAQ0F,aAAaH,EAAKhD,IAAI,GAAIvC,EAAQmI,cAEvC5C,YAAgBrC,UACvB1b,KAAKqc,KAAK,SAAS7D,GACfA,EAAQ0F,aAAaH,EAAMvF,EAAQmI,cAIpC3gB,MAWX4gB,KAAM,SAASA,GACX,MAAI7gB,MAAKyR,KAAK2K,YAAYyE,GACf5gB,KAAK+a,IAAI,GAAG8F,YAEZ7gB,KAAKqc,KAAK,SAAS7D,GACtBA,EAAQqI,YAAcD,KAWlCL,MAAO,WACH,MAAOvgB,MAAKqc,KAAK,SAAS7D,GACtBA,EAAQ8H,UAAY,MAU5BrC,MAAO,WACH,GAAI6C,KAMJ,OAJA9gB,MAAKqc,KAAK,SAAS7D,GACfsI,EAAO3Z,KAAKqR,EAAQuI,WAAU,MAG3B,GAAIhhB,MAAKqb,OAAO0F,MAQ3BjD,eACI,cACA,cACA,WACA,aACA,aACA,aACA,UACA,QACA,UACA,SACA,SACA,WAGT7d,MACH,SAAUF,GACN,YAEAA,GAAOC,KAAKihB,OAASjhB,KAAKsB,MAAMC,QAc5BI,KAAM,SAASuf,GAcX,MAbAA,GAASA,MAETlhB,KAAKkC,OAAOC,YAAW,EAAM,yBAC7BnC,KAAKkC,OAAOE,IAAI,gCAAiC8e,GAEjDjhB,KAAK+B,MAAQ,GAAIhC,MAAK+B,MAAMmf,EAAOlf,QAAU,GAAIhC,MAAK+B,MAAM,SAC5D9B,KAAKgd,KAAOiE,EAAOjE,MAAQ,EAC3Bhd,KAAKkhB,QAAUD,EAAOC,SAAW,EACjClhB,KAAKmhB,QAAUF,EAAOE,SAAW,EAEjCphB,KAAKkC,OAAOE,IAAI,qCAAsCnC,MACtDD,KAAKkC,OAAOoB,WAELrD,MAUXohB,SAAU,SAASrf,GAEf,MADA/B,MAAK+B,MAAQ,GAAIhC,MAAK+B,MAAMC,GACrB/B,MASXqhB,SAAU,WACN,MAAOrhB,MAAK+B,OAUhBuf,QAAS,SAAStE,GAEd,MADAhd,MAAKgd,KAAOA,EACLhd,MASXuhB,QAAS,WACL,MAAOvhB,MAAKgd,MAUhBwE,WAAY,SAASC,GAEjB,MADAzhB,MAAKkhB,QAAUO,EACRzhB,MASX0hB,WAAY,WACR,MAAO1hB,MAAKkhB,SAUhBS,WAAY,SAASC,GAEjB,MADA5hB,MAAKmhB,QAAUS,EACR5hB,MASX6hB,WAAY,WACR,MAAO7hB,MAAKmhB,SAShBtb,SAAU,WACN,OACI7F,KAAKkhB,QACLlhB,KAAKmhB,QACLnhB,KAAKgd,KACLhd,KAAK+B,MAAMoD,eACb+O,KAAK,UAUX4N,YAAa,yFAUbxJ,WAAY,SAAS2I,GACjBA,EAASA,EAAOc,MAEhB,IAAIC,GAAiBF,YAAY5O,KAAK+N,OAClClf,EAAQkf,EAAOjO,QAAQ8O,YAAa,KAAO,YAE/C,OAAO,IAAI/hB,MAAKihB,QACZjf,MAAO,GAAIhC,MAAK+B,MAAMC,GACtBib,KAAM3L,SAAS2Q,EAAe,GAAI,KAAO,EACzCd,QAAS7P,SAAS2Q,EAAe,GAAI,KAAO,EAC5Cb,QAAS9P,SAAS2Q,EAAe,GAAI,KAAO,QAIzDhiB,MACH,SAAUF,GACN,YAOA,IAAI0R,IAUAlQ,OAAQ,WAmBJ,IAAK,GAFDf,GAVA0hB,EAAa,SAASrhB,GAClBL,EAAOK,IAAQL,EAAOK,GAAKe,aAAepB,EAAOK,GAAKe,cAAgBxB,QACtE+hB,EAAYthB,GAAOshB,EAAYthB,OAC/BZ,KAAKsB,OAAO4gB,EAAYthB,GAAML,EAAOK,KAErCshB,EAAYthB,GAAOL,EAAOK,IAEhCgb,KAAK5b,MAEHkiB,EAAc9gB,UAAU,GAGnBQ,EAAI,EAAGA,EAAIR,UAAUS,OAAQD,IAClCrB,EAASa,UAAUQ,GACnBzB,OAAOO,KAAKH,GAAQI,QAAQshB,EAGhC,OAAOC,IAWXtE,mBAAoB,SAAS5E,GACzB,MAAOA,GAAOhG,QAAQ,UAAW,SAASgG,EAAQmJ,GAC9C,MAAOA,GAAOC,iBAYtB1E,gBAAiB,SAAS1E,GACtB,MAAOA,GAAOhG,QAAQ,WAAY,SAASgG,GACvC,MAAO,IAAMA,EAAO/F,iBAc5BoP,gBAAiB,SAAS3B,EAASvC,EAAQmE,GAKvC,MAJA5B,GAAU1gB,KAAKmc,YAAYuE,GAAW,GAAKA,EAC3CvC,EAASne,KAAKmc,YAAYgC,GAAU,GAAKA,EACzCmE,EAAYtiB,KAAKmc,YAAYmG,GAAa,GAAKA,GAG3C5B,EACAle,KAAK+R,SAAS1O,SAAS,IAAI0T,MAAM,GACjC4E,GACFjK,KAAKoO,IASX7Q,QAAS,SAAS5N,GACd,MAAO1D,QAAOD,UAAU2F,SAAS2T,KAAK3V,GAAOmP,QAAQ,oBAAqB,MAAMC,eASpFoK,SAAU,SAASxM,GACf,MAA+B,UAAxB7Q,KAAKyR,QAAQZ,IASxBoK,SAAU,SAASsH,GACf,MAC4B,UAAxBviB,KAAKyR,QAAQ8Q,KACZtR,MAAMsR,IACPC,SAASD,IAUjB1G,QAAS,SAAS4G,GACd,MAA8B,SAAvBziB,KAAKyR,QAAQgR,IASxBlI,UAAW,SAASmI,GAChB,MAA6B,WAAtB1iB,KAAKyR,QAAQiR,IASxBhJ,WAAY,SAAS3Y,GACjB,MAA+B,YAAxBf,KAAKyR,QAAQ1Q,IASxBib,SAAU,SAAShD,GACf,MAA+B,UAAxBhZ,KAAKyR,QAAQuH,IASxBmD,YAAa,SAAStY,GAClB,MAC2B,aAAvB7D,KAAKyR,QAAQ5N,IACU,aAAvB7D,KAAKyR,QAAQ5N,IAKzB/D,GAAOC,KAAKyR,KAAOA,GAEpBxR","sourcesContent":["(function(global) {\n    /**\n     * Current version of Rise\n     * @type {String}\n     * @private\n     */\n    var VERSION = '0.0.1 -> alpha';\n\n    /**\n     * Rise constuctor\n     * @constructor\n     */\n    function Rise() {\n        return this;\n    }\n\n    Rise.prototype = Object.create({});\n\n    /**\n     * Get current version\n     * @static\n     * @return {String} Returns current version\n     */\n    Rise.getVersion = function() {\n        return VERSION;\n    };\n\n    global.Rise = Rise;\n\n})(this);\n(function(global) {\n    'use strict';\n\n    /**\n     * Copy properties from parent to target object\n     * @param  {Object} source Object from where properties will be copied\n     * @param  {Object} target Object to where properties will copy\n     * @param  {Object} parent Parent object\n     * @private\n     */\n    function copyProperties(source, target, parent) {\n        Object.keys(source).forEach(function(key) {\n            if (\n                typeof source[key] == \"function\" &&\n                typeof parent[key] == \"function\" &&\n                /\\b_super\\b/.test(source[key])\n            ) {\n                target[key] = wrapMethod(source[key], parent[key]);\n            } else {\n                target[key] = source[key];\n            }\n        });\n    }\n\n    /**\n     * Wrap method with parent method.\n     * Useful for create this._super() in subclasses.\n     * @param  {Function} method       Method that need to be wrapped\n     * @param  {Function} parentMethod Parent method, in other words - this._super();\n     * @return {Function}              Returns wrapped function\n     * @private\n     */\n    function wrapMethod(method, parentMethod) {\n        return function() {\n            var backup = this._super;\n            this._super = parentMethod;\n\n            try {\n                return method.apply(this, arguments);\n            } finally {\n                this._super = backup;\n            }\n        };\n    }\n\n    /**\n     * Empty function (interface)\n     * @private\n     */\n    function Class() {}\n\n    /**\n     * Create new Class or extend exists\n     * @static\n     * @param {Object} [prototype] Prototype object for new Class\n     * @param {Object} [staticProperties] Object with static properties for new Class\n     * @param {Array}  [mixins] Array of mixins which need to inject in new Class prototype\n     * @return {Object} Returns new Class\n     *\n     * @example\n     * Rise.Class.extend([prototype])\n     * Rise.Class.extend([prototype], [staticProperties])\n     * Rise.Class.extend([prototype], [staticProperties], [mixins])\n     */\n    Class.extend = function(prototype, staticProperties, mixins) {\n        prototype = prototype || {};\n        staticProperties = staticProperties || {};\n        mixins = mixins || [];\n\n        function Constructor() {\n            return this.init && this.init.apply(this, arguments);\n        }\n\n        Constructor.prototype = Object.create(this.prototype);\n        Constructor.prototype.constructor = Constructor;\n        Constructor.extend = Class.extend;\n\n        copyProperties(staticProperties, Constructor, this);\n        copyProperties(prototype, Constructor.prototype, this.prototype);\n        for (var i = mixins.length - 1; i >= 0; i--) {\n            copyProperties(mixins[i], Constructor.prototype, this.prototype);\n        }\n\n        return Constructor;\n    };\n\n    global.Rise.Class = Class;\n\n})(this);\n////////////////////////////////////////////////\n// TinyColor v1.0.0                           //\n// https://github.com/bgrins/tinycolor        //\n// Brian Grinstead, MIT License               //\n// Refactored and modified by Eugene Obrezkov //\n////////////////////////////////////////////////\n(function(global) {\n    'use strict';\n\n    global.Rise.Color = Rise.Class.extend({\n        /**\n         * Create new Rise.Color instance\n         * @constructor\n         * @param {String|Object|Rise.Color} color String or object with appropriate properties\n         * @param {Object} config Additional config for color\n         * @return {Rise.Color} Returns Rise.Color instance\n         * @example\n         * Rise.Color('red');\n         * Rise.Color({\n         *     r: 255,\n         *     g: 0,\n         *     b: 255,\n         *     a: 1\n         * })\n         */\n\n        init: function() {\n            color = color || 'black';\n            config = config || {};\n\n            if (color instanceof Rise.Color) {\n                return color;\n            }\n\n            Rise.Logger.startGroup(true, 'Rise.Color -> init()');\n            Rise.Logger.log('Trying to parse color -> %O with config -> %O', color, config);\n\n            var rgb = Rise.Color.inputToRgb(color);\n\n            this.red = rgb.r < 1 ? Math.round(rgb.r) : rgb.r;\n            this.green = rgb.g < 1 ? Math.round(rgb.g) : rgb.g;\n            this.blue = rgb.b < 1 ? Math.round(rgb.b) : rgb.b;\n            this.alpha = rgb.a;\n            this.valid = rgb.valid;\n            this.roundA = Math.round(100 * this.alpha) / 100;\n            this.format = config.format || rgb.format;\n            this.gradientType = config.gradientType;\n\n            if (!this.valid) {\n                Rise.Logger.warning('Color -> %O have errors', color);\n            }\n\n            Rise.Logger.log('Instantiated new Rise.Color instance -> %O', this);\n            Rise.Logger.endGroup();\n\n            return this;\n        },\n\n        /**\n         * Check if this color is dark\n         * @return {Boolean} Returns true if color is dark\n         */\n        isDark: function() {\n            return this.getBrightness() < 128;\n        },\n\n        /**\n         * Check if this color is light\n         * @return {Boolean} Returns true if color is light\n         */\n        isLight: function() {\n            return !this.isDark();\n        },\n\n        /**\n         * Check if this color valid and successfully parsed\n         * @return {Boolean} Returns true if valid\n         */\n        isValid: function() {\n            return this.valid;\n        },\n\n        /**\n         * Get format of this color\n         * @return {String} Returns string with color format\n         */\n        getFormat: function() {\n            return this.format;\n        },\n\n        /**\n         * Get alpha channel of this color\n         * @return {Float} Returns float value of alpha channel\n         */\n        getAlpha: function() {\n            return this.alpha;\n        },\n\n        /**\n         * Set alpha channel for this color\n         * @param {Float} value Float value of alpha channel in 0-1 range\n         */\n        setAlpha: function(value) {\n            this.alpha = Rise.Color.boundAlpha(value);\n            this.roundA = Math.round(100 * this.alpha) / 100;\n            return this;\n        },\n\n        /**\n         * Get brightness level of color\n         * @return {Integer} Returns float value of brightness level\n         */\n        getBrightness: function() {\n            var rgb = this.toRgb();\n            return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n        },\n\n        /**\n         * Convert color to HSV\n         * @return {Object} Object with h,s,v,a properties\n         */\n        toHsv: function() {\n            var hsv = Rise.Color.rgbToHsv(this.red, this.green, this.blue);\n\n            return {\n                h: hsv.h * 360,\n                s: hsv.s,\n                v: hsv.v,\n                a: this.alpha\n            };\n        },\n\n        /**\n         * Convert to HSV in string\n         * @return {String} Returns string with HSV color\n         */\n        toHsvString: function() {\n            var hsv = Rise.Color.rgbToHsv(this.red, this.green, this.blue),\n                h = Math.round(hsv.h * 360),\n                s = Math.round(hsv.s * 100),\n                v = Math.round(hsv.v * 100);\n\n            return this.alpha == 1 ?\n                \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\" :\n                \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + this.roundA + \")\";\n        },\n\n        /**\n         * Convert color to HSL\n         * @return {Object} Object with h,s,l,a properties\n         */\n        toHsl: function() {\n            var hsl = Rise.Color.rgbToHsl(this.red, this.green, this.blue);\n\n            return {\n                h: hsl.h * 360,\n                s: hsl.s,\n                l: hsl.l,\n                a: this.alpha\n            };\n        },\n\n        /**\n         * Convert color to HSL in string\n         * @return {String} Returns HSL in string\n         */\n        toHslString: function() {\n            var hsl = Rise.Color.rgbToHsl(this.red, this.green, this.blue),\n                h = Math.round(hsl.h * 360),\n                s = Math.round(hsl.s * 100),\n                l = Math.round(hsl.l * 100);\n\n            return (this.alpha == 1) ?\n                \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\" :\n                \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + this.roundA + \")\";\n        },\n\n        /**\n         * Convert color to HEX\n         * @param  {Boolean} allow3Char Allow 3 char format or not\n         * @return {String} Returns HEX value of this color\n         */\n        toHex: function(allow3Char) {\n            return Rise.Color.rgbToHex(this.red, this.green, this.blue, allow3Char);\n        },\n\n        /**\n         * Convert color to HEX string\n         * @param  {Boolean} allow3Char Allow 3 char format or not\n         * @return {String} Returns string with # and HEX color\n         */\n        toHexString: function(allow3Char) {\n            return '#' + this.toHex(allow3Char);\n        },\n\n        /**\n         * Convert color to HEX 8\n         * @return {String} Returns HEX string with 8 chars\n         */\n        toHex8: function() {\n            return Rise.Color.rgbaToHex(this.red, this.green, this.blue, this.alpha);\n        },\n\n        /**\n         * Convert color to HEX 8 string\n         * @return {String} Returns HEX string with # and 8 chars\n         */\n        toHex8String: function() {\n            return '#' + this.toHex8();\n        },\n\n        /**\n         * Convert color to RGB\n         * @return {Object} Returns object with r,g,b,a properties\n         */\n        toRgb: function() {\n            return {\n                r: Math.round(this.red),\n                g: Math.round(this.green),\n                b: Math.round(this.blue),\n                a: this.alpha\n            };\n        },\n\n        /**\n         * Convert color to RGB string\n         * @return {String} Returns RGB string\n         */\n        toRgbString: function() {\n            return (this.alpha == 1) ?\n                \"rgb(\" + Math.round(this.red) + \", \" + Math.round(this.green) + \", \" + Math.round(this.blue) + \")\" :\n                \"rgba(\" + Math.round(this.red) + \", \" + Math.round(this.green) + \", \" + Math.round(this.blue) + \", \" + this.roundA + \")\";\n        },\n\n        /**\n         * Convert color to RGB in percentage format\n         * @return {Object} Returns object with r,g,b,a properties in percentage\n         */\n        toPercentageRgb: function() {\n            return {\n                r: Math.round(bound01(this.red, 255) * 100) + \"%\",\n                g: Math.round(bound01(this.green, 255) * 100) + \"%\",\n                b: Math.round(bound01(this.blue, 255) * 100) + \"%\",\n                a: this.alpha\n            };\n        },\n\n        /**\n         * Convert color to RGB string in percentage format\n         * @return {String} Returns RGB string in percentage format\n         */\n        toPercentageRgbString: function() {\n            return (this.alpha == 1) ?\n                \"rgb(\" + Math.round(Rise.Color.bound01(this.red, 255) * 100) + \"%, \" + Math.round(Rise.Color.bound01(this.green, 255) * 100) + \"%, \" + Math.round(Rise.Color.bound01(this.blue, 255) * 100) + \"%)\" :\n                \"rgba(\" + Math.round(Rise.Color.bound01(this.red, 255) * 100) + \"%, \" + Math.round(Rise.Color.bound01(this.green, 255) * 100) + \"%, \" + Math.round(Rise.Color.bound01(this.blue, 255) * 100) + \"%, \" + this.roundA + \")\";\n        },\n\n        /**\n         * Convert this color to name string\n         * @return {String|Boolean} Returns color name in user friendly notation or false if couldn't detect\n         */\n        toName: function() {\n            if (this.alpha === 0) {\n                return \"transparent\";\n            }\n\n            if (this.alpha < 1) {\n                return false;\n            }\n\n            return Rise.Color.hexNamesMap[Rise.Color.rgbToHex(this.red, this.green, this.blue, true)] || false;\n        },\n\n        /**\n         * Convert color to DX Filter notation\n         * @param  {String} secondColor Second color\n         * @return {String} Returns DX Filter format for this color\n         */\n        toFilter: function(secondColor) {\n            var hex8String = '#' + Rise.Color.rgbaToHex(this.red, this.green, this.blue, this.alpha),\n                secondHex8String = hex8String,\n                gradientType = this.gradientType ? \"GradientType = 1, \" : \"\";\n\n            if (secondColor) {\n                secondHex8String = new Rise.Color(secondColor).toHex8String();\n            }\n\n            return \"progid:DXImageTransform.Microsoft.gradient(\" + gradientType + \"startColorstr=\" + hex8String + \",endColorstr=\" + secondHex8String + \")\";\n        },\n\n        /**\n         * Print a string color depending on input format\n         * @param  {String} format Custom format\n         * @return {String} Returns string of this color depending of input format or custom format\n         */\n        toString: function(format) {\n            format = format || this.format;\n\n            var isFormatSet = !!format,\n                formattedString = false,\n                hasAlpha = this.alpha < 1 && this.alpha >= 0,\n                needsAlphaFormat = (\n                    hasAlpha &&\n                    !isFormatSet &&\n                    (\n                        format === \"hex\" ||\n                        format === \"hex6\" ||\n                        format === \"hex3\" ||\n                        format === \"name\"\n                    ));\n\n            if (needsAlphaFormat) {\n                if (format === \"name\" && this.alpha === 0) {\n                    return this.toName();\n                }\n\n                return this.toRgbString();\n            } else if (format === \"rgb\") {\n                formattedString = this.toRgbString();\n            } else if (format === \"prgb\") {\n                formattedString = this.toPercentageRgbString();\n            } else if (format === \"hex\" || format === \"hex6\") {\n                formattedString = this.toHexString();\n            } else if (format === \"hex3\") {\n                formattedString = this.toHexString(true);\n            } else if (format === \"hex8\") {\n                formattedString = this.toHex8String();\n            } else if (format === \"name\") {\n                formattedString = this.toName();\n            } else if (format === \"hsl\") {\n                formattedString = this.toHslString();\n            } else if (format === \"hsv\") {\n                formattedString = this.toHsvString();\n            }\n\n            return formattedString || this.toHexString();\n        },\n\n        /**\n         * Make color more lighten\n         * @param {Integer} amount Custom amount for lighten level in 0-100 range\n         * @return {Rise.Color} Returns new color\n         */\n        lighten: function(amount) {\n            amount = (amount === 0) ? 0 : (amount || 10);\n\n            var hsl = this.toHsl();\n            hsl.l += amount / 100;\n            hsl.l = Rise.Color.clamp01(hsl.l);\n\n            return new Rise.Color(hsl);\n        },\n\n        /**\n         * Make color more brighten\n         * @param {Integer} amount Custom amount for brighten level in 0-100 range\n         * @return {Rise.Color} Returns new color\n         */\n        brighten: function(amount) {\n            amount = (amount === 0) ? 0 : (amount || 10);\n\n            var rgb = this.toRgb();\n            rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n            rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n            rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n\n            return new Rise.Color(rgb);\n        },\n\n        /**\n         * Make color more darken\n         * @param {Integer} amount Custom amount for darken level in 0-100 range\n         * @return {Rise.Color} Returns new color\n         */\n        darken: function(amount) {\n            amount = (amount === 0) ? 0 : (amount || 10);\n\n            var hsl = this.toHsl();\n            hsl.l -= amount / 100;\n            hsl.l = Rise.Color.clamp01(hsl.l);\n\n            return new Rise.Color(hsl);\n        },\n\n        /**\n         * Desaturate the color\n         * @param {Integer} amount Custom amount for desaturate in 0-100 range\n         * @return {Rise.Color} Returns new color\n         */\n        desaturate: function(amount) {\n            amount = (amount === 0) ? 0 : (amount || 10);\n\n            var hsl = this.toHsl();\n            hsl.s -= amount / 100;\n            hsl.s = clamp01(hsl.s);\n\n            return new Rise.Color(hsl);\n        },\n\n        /**\n         * Saturate the color\n         * @param {Integer} amount Custom amount for saturate level in 0-100 range\n         * @return {Rise.Color} Returns new color\n         */\n        saturate: function(amount) {\n            amount = (amount === 0) ? 0 : (amount || 10);\n\n            var hsl = this.toHsl();\n            hsl.s += amount / 100;\n            hsl.s = Rise.Color.clamp01(hsl.s);\n\n            return new Rise.Color(hsl);\n        },\n\n        /**\n         * Completely desaturate the color\n         * @return {Rise.Color} Returns new color\n         */\n        greyscale: function() {\n            return this.desaturate(100);\n        },\n\n        /**\n         * Spin the hue level for a given amount\n         * @param {Integer} amount Custom amount for spin from -360 to 360 range\n         * @return {Rise.Color} Returns new color\n         */\n        spin: function(amount) {\n            var hsl = this.toHsl(),\n                hue = (Math.round(hsl.h) + amount) % 360;\n\n            hsl.h = hue < 0 ? 360 + hue : hue;\n            return new Rise.Color(hsl);\n        },\n\n        /**\n         * Get analogous combinations for this color\n         * @param {Integer} results Count of results\n         * @param {Integer} slices Count of slices\n         * @return {Array} Returns array of Rise.Color\n         */\n        analogous: function(results, slices) {\n            results = results || 6;\n            slices = slices || 30;\n\n            var hsl = this.toHsl(),\n                part = 360 / slices,\n                result = [new Rise.Color(this)];\n\n            for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results;) {\n                hsl.h = (hsl.h + part) % 360;\n                result.push(new Rise.Color(hsl));\n            }\n\n            return result;\n        },\n\n        /**\n         * Get complement combinations for this color\n         * @return {Array} Returns array of Rise.Color\n         */\n        complement: function() {\n            var hsl = this.toHsl();\n            hsl.h = (hsl.h + 180) % 360;\n            return new Rise.Color(hsl);\n        },\n\n        /**\n         * Get monochromatic combinations for this color\n         * @param {Integer} results Count of results\n         * @return {Array} Returns array of Rise.Color\n         */\n        monochromatic: function(results) {\n            results = results || 6;\n\n            var hsv = this.toHsv(),\n                h = hsv.h,\n                s = hsv.s,\n                v = hsv.v,\n                result = [],\n                modification = 1 / results;\n\n            while (results--) {\n                result.push(new Rise.Color({\n                    h: h,\n                    s: s,\n                    v: v\n                }));\n                v = (v + modification) % 1;\n            }\n\n            return result;\n        },\n\n        /**\n         * Get splitcomplement combinations for this color\n         * @return {Array} Returns array of Rise.Color\n         */\n        splitComplement: function() {\n            var hsl = this.toHsl(),\n                h = hsl.h;\n\n            return [\n                new Rise.Color(this),\n                new Rise.Color({\n                    h: (h + 72) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                }),\n                new Rise.Color({\n                    h: (h + 216) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                })\n            ];\n        },\n\n        /**\n         * Get triad combinations for this color\n         * @return {Array} Returns array of Rise.Color\n         */\n        triad: function() {\n            var hsl = this.toHsl(),\n                h = hsl.h;\n\n            return [\n                new Rise.Color(this),\n                new Rise.Color({\n                    h: (h + 120) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                }),\n                new Rise.Color({\n                    h: (h + 240) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                })\n            ];\n        },\n\n        /**\n         * Get tetrad combinations for this color\n         * @return {Array} Returns array of Rise.Color\n         */\n        tetrad: function() {\n            var hsl = this.toHsl(),\n                h = hsl.h;\n\n            return [\n                new Rise.Color(this),\n                new Rise.Color({\n                    h: (h + 90) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                }),\n                new Rise.Color({\n                    h: (h + 180) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                }),\n                new Rise.Color({\n                    h: (h + 270) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                })\n            ];\n        }\n    }, {\n        /**\n         * Map of CSS colours.\n         * This map simplify select colours when Rise.Color('aqua') i.e. called.\n         * @type {Object}\n         * @private\n         */\n        cssColorNamesMap: {\n            aliceblue: \"f0f8ff\",\n            antiquewhite: \"faebd7\",\n            aqua: \"0ff\",\n            aquamarine: \"7fffd4\",\n            azure: \"f0ffff\",\n            beige: \"f5f5dc\",\n            bisque: \"ffe4c4\",\n            black: \"000\",\n            blanchedalmond: \"ffebcd\",\n            blue: \"00f\",\n            blueviolet: \"8a2be2\",\n            brown: \"a52a2a\",\n            burlywood: \"deb887\",\n            burntsienna: \"ea7e5d\",\n            cadetblue: \"5f9ea0\",\n            chartreuse: \"7fff00\",\n            chocolate: \"d2691e\",\n            coral: \"ff7f50\",\n            cornflowerblue: \"6495ed\",\n            cornsilk: \"fff8dc\",\n            crimson: \"dc143c\",\n            cyan: \"0ff\",\n            darkblue: \"00008b\",\n            darkcyan: \"008b8b\",\n            darkgoldenrod: \"b8860b\",\n            darkgray: \"a9a9a9\",\n            darkgreen: \"006400\",\n            darkgrey: \"a9a9a9\",\n            darkkhaki: \"bdb76b\",\n            darkmagenta: \"8b008b\",\n            darkolivegreen: \"556b2f\",\n            darkorange: \"ff8c00\",\n            darkorchid: \"9932cc\",\n            darkred: \"8b0000\",\n            darksalmon: \"e9967a\",\n            darkseagreen: \"8fbc8f\",\n            darkslateblue: \"483d8b\",\n            darkslategray: \"2f4f4f\",\n            darkslategrey: \"2f4f4f\",\n            darkturquoise: \"00ced1\",\n            darkviolet: \"9400d3\",\n            deeppink: \"ff1493\",\n            deepskyblue: \"00bfff\",\n            dimgray: \"696969\",\n            dimgrey: \"696969\",\n            dodgerblue: \"1e90ff\",\n            firebrick: \"b22222\",\n            floralwhite: \"fffaf0\",\n            forestgreen: \"228b22\",\n            fuchsia: \"f0f\",\n            gainsboro: \"dcdcdc\",\n            ghostwhite: \"f8f8ff\",\n            gold: \"ffd700\",\n            goldenrod: \"daa520\",\n            gray: \"808080\",\n            green: \"008000\",\n            greenyellow: \"adff2f\",\n            grey: \"808080\",\n            honeydew: \"f0fff0\",\n            hotpink: \"ff69b4\",\n            indianred: \"cd5c5c\",\n            indigo: \"4b0082\",\n            ivory: \"fffff0\",\n            khaki: \"f0e68c\",\n            lavender: \"e6e6fa\",\n            lavenderblush: \"fff0f5\",\n            lawngreen: \"7cfc00\",\n            lemonchiffon: \"fffacd\",\n            lightblue: \"add8e6\",\n            lightcoral: \"f08080\",\n            lightcyan: \"e0ffff\",\n            lightgoldenrodyellow: \"fafad2\",\n            lightgray: \"d3d3d3\",\n            lightgreen: \"90ee90\",\n            lightgrey: \"d3d3d3\",\n            lightpink: \"ffb6c1\",\n            lightsalmon: \"ffa07a\",\n            lightseagreen: \"20b2aa\",\n            lightskyblue: \"87cefa\",\n            lightslategray: \"789\",\n            lightslategrey: \"789\",\n            lightsteelblue: \"b0c4de\",\n            lightyellow: \"ffffe0\",\n            lime: \"0f0\",\n            limegreen: \"32cd32\",\n            linen: \"faf0e6\",\n            magenta: \"f0f\",\n            maroon: \"800000\",\n            mediumaquamarine: \"66cdaa\",\n            mediumblue: \"0000cd\",\n            mediumorchid: \"ba55d3\",\n            mediumpurple: \"9370db\",\n            mediumseagreen: \"3cb371\",\n            mediumslateblue: \"7b68ee\",\n            mediumspringgreen: \"00fa9a\",\n            mediumturquoise: \"48d1cc\",\n            mediumvioletred: \"c71585\",\n            midnightblue: \"191970\",\n            mintcream: \"f5fffa\",\n            mistyrose: \"ffe4e1\",\n            moccasin: \"ffe4b5\",\n            navajowhite: \"ffdead\",\n            navy: \"000080\",\n            oldlace: \"fdf5e6\",\n            olive: \"808000\",\n            olivedrab: \"6b8e23\",\n            orange: \"ffa500\",\n            orangered: \"ff4500\",\n            orchid: \"da70d6\",\n            palegoldenrod: \"eee8aa\",\n            palegreen: \"98fb98\",\n            paleturquoise: \"afeeee\",\n            palevioletred: \"db7093\",\n            papayawhip: \"ffefd5\",\n            peachpuff: \"ffdab9\",\n            peru: \"cd853f\",\n            pink: \"ffc0cb\",\n            plum: \"dda0dd\",\n            powderblue: \"b0e0e6\",\n            purple: \"800080\",\n            red: \"f00\",\n            rosybrown: \"bc8f8f\",\n            royalblue: \"4169e1\",\n            saddlebrown: \"8b4513\",\n            salmon: \"fa8072\",\n            sandybrown: \"f4a460\",\n            seagreen: \"2e8b57\",\n            seashell: \"fff5ee\",\n            sienna: \"a0522d\",\n            silver: \"c0c0c0\",\n            skyblue: \"87ceeb\",\n            slateblue: \"6a5acd\",\n            slategray: \"708090\",\n            slategrey: \"708090\",\n            snow: \"fffafa\",\n            springgreen: \"00ff7f\",\n            steelblue: \"4682b4\",\n            tan: \"d2b48c\",\n            teal: \"008080\",\n            thistle: \"d8bfd8\",\n            tomato: \"ff6347\",\n            turquoise: \"40e0d0\",\n            violet: \"ee82ee\",\n            wheat: \"f5deb3\",\n            white: \"fff\",\n            whitesmoke: \"f5f5f5\",\n            yellow: \"ff0\",\n            yellowgreen: \"9acd32\"\n        },\n\n        /**\n         * Map of HEX colours names.\n         * HEX value as key and it name as value in object.\n         * @type {Object}\n         * @private\n         */\n        hexNamesMap: Rise.Color.flip(cssColorNamesMap),\n\n        /**\n         * Flip key-values in object\n         * @param  {Object} object Object which you want to flip\n         * @return {Object} Returns flipped object\n         * @private\n         */\n        flip: function(object) {\n            var flipped = {};\n\n            for (var i in object) {\n                if (object.hasOwnProperty(i)) {\n                    flipped[object[i]] = i;\n                }\n            }\n\n            return flipped;\n        },\n\n        /**\n         * Bounds alpha channel to [0, 1] range\n         * @param  {Float} a Alpha value\n         * @return {Float}   Returns incoming value if valid and 1 otherwise\n         * @private\n         */\n        boundAlpha: function(a) {\n            a = parseFloat(a);\n\n            if (isNaN(a) || a < 0 || a > 1) {\n                a = 1;\n            }\n\n            return a;\n        },\n\n        /**\n         * Bound values to [0, 1] range\n         * @param  {Integer} n\n         * @param  {Integer} max\n         * @return {Float}\n         * @private\n         */\n        bound01: function(value, max) {\n            if (isOnePointZero(value)) {\n                value = \"100%\";\n            }\n\n            var isPercentageValue = isPercentage(value);\n            value = Math.min(max, Math.max(0, parseFloat(value)));\n\n            if (isPercentageValue) {\n                value = parseInt(value * max, 10) / 100;\n            }\n\n            if (Math.abs(value - max) < 0.000001) {\n                return 1;\n            }\n\n            return (value % max) / parseFloat(max);\n        },\n\n        /**\n         * Force a number between 0 and 1\n         * @param  {Integer} value\n         * @return {Integer}\n         * @private\n         */\n        clamp01: function(value) {\n            return Math.min(1, Math.max(0, value));\n        },\n\n        /**\n         * Parse a base-16 hex value into a base-10 integer\n         * @param  {String} value HEX value\n         * @return {Integer}    Returns parsed number\n         * @private\n         */\n        parseIntFromHex: function(value) {\n            return parseInt(value, 16);\n        },\n\n        /**\n         * Check if number it's 1.0\n         * @param  {Float}  value Value for check\n         * @return {Boolean}   Returns true if it's 1.0\n         * @private\n         */\n        isOnePointZero: function(value) {\n            return Rise.Util.getType(value) == 'string' && value.indexOf('.') != -1 && parseFloat(value) === 1;\n        },\n\n        /**\n         * Check if string is a percentage\n         * @param  {String} value Value that might be checked\n         * @return {Boolean} True if percentage\n         * @private\n         */\n        isPercentage: function(value) {\n            return Rise.Util.getType(value) == 'string' && value.indexOf('%') != -1;\n        },\n\n        /**\n         * Force a HEX value to have 2 chars\n         * @param  {String} c Value that must be padded\n         * @return {String} Returns padded string\n         * @private\n         */\n        pad2: function(value) {\n            return value.length == 1 ? '0' + value : '' + value;\n        },\n\n        /**\n         * Replace a decimal with it's percentage value\n         * @param  {Integer} n Decimal value\n         * @return {String}   Returns this value in percentage value\n         * @private\n         */\n        convertToPercentage: function(value) {\n            if (value <= 1) {\n                value = (value * 100) + \"%\";\n            }\n\n            return value;\n        },\n\n        /**\n         * Convert a decimal to a HEX value\n         * @param  {Integer} value Decimal value\n         * @return {String} Returns HEX string\n         * @private\n         */\n        convertDecimalToHex: function(value) {\n            return Math.round(parseFloat(value) * 255).toString(16);\n        },\n\n        /**\n         * Convert a HEX value to a decimal\n         * @param  {String} value HEX value\n         * @return {Integer}   Returns decimal value\n         * @private\n         */\n        convertHexToDecimal: function(value) {\n            return (parseIntFromHex(value) / 255);\n        },\n\n        /**\n         * IIFE that returns object with regex for color's strings\n         * @return {Object}\n         * @private\n         */\n        colorRegexMap: (function() {\n            var cssInteger = \"[-\\\\+]?\\\\d+%?\",\n                cssNumber = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\",\n                cssUnit = \"(?:\" + cssNumber + \")|(?:\" + cssInteger + \")\",\n                permissiveMatch3 = \"[\\\\s|\\\\(]+(\" + cssUnit + \")[,|\\\\s]+(\" + cssUnit + \")[,|\\\\s]+(\" + cssUnit + \")\\\\s*\\\\)?\",\n                permissiveMatch4 = \"[\\\\s|\\\\(]+(\" + cssUnit + \")[,|\\\\s]+(\" + cssUnit + \")[,|\\\\s]+(\" + cssUnit + \")[,|\\\\s]+(\" + cssUnit + \")\\\\s*\\\\)?\";\n\n            return {\n                rgb: new RegExp(\"rgb\" + permissiveMatch3),\n                rgba: new RegExp(\"rgba\" + permissiveMatch4),\n                hsl: new RegExp(\"hsl\" + permissiveMatch3),\n                hsla: new RegExp(\"hsla\" + permissiveMatch4),\n                hsv: new RegExp(\"hsv\" + permissiveMatch3),\n                hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n                hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n                hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n            };\n        })(),\n\n        /**\n         * Parse string by regex and returns object\n         * @param  {String} color Color in string\n         * @return {Object} Object with format property and values for colour profile\n         * @private\n         */\n        stringToObject: function(color) {\n            var trimLeft = /^[\\s,#]+/,\n                trimRight = /\\s+$/,\n                named = false,\n                match;\n\n            color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();\n\n            if (cssColorNamesMap[color]) {\n                color = cssColorNamesMap[color];\n                named = true;\n            } else if (color == 'transparent') {\n                return {\n                    r: 0,\n                    g: 0,\n                    b: 0,\n                    a: 0,\n                    format: \"name\"\n                };\n            }\n\n            if ((match = colorRegexMap.rgb.exec(color))) {\n                return {\n                    r: match[1],\n                    g: match[2],\n                    b: match[3]\n                };\n            } else if ((match = colorRegexMap.rgba.exec(color))) {\n                return {\n                    r: match[1],\n                    g: match[2],\n                    b: match[3],\n                    a: match[4]\n                };\n            } else if ((match = colorRegexMap.hsl.exec(color))) {\n                return {\n                    h: match[1],\n                    s: match[2],\n                    l: match[3]\n                };\n            } else if ((match = colorRegexMap.hsla.exec(color))) {\n                return {\n                    h: match[1],\n                    s: match[2],\n                    l: match[3],\n                    a: match[4]\n                };\n            } else if ((match = colorRegexMap.hsv.exec(color))) {\n                return {\n                    h: match[1],\n                    s: match[2],\n                    v: match[3]\n                };\n            } else if ((match = colorRegexMap.hex8.exec(color))) {\n                return {\n                    a: convertHexToDecimal(match[1]),\n                    r: parseIntFromHex(match[2]),\n                    g: parseIntFromHex(match[3]),\n                    b: parseIntFromHex(match[4]),\n                    format: named ? \"name\" : \"hex8\"\n                };\n            } else if ((match = colorRegexMap.hex6.exec(color))) {\n                return {\n                    r: parseIntFromHex(match[1]),\n                    g: parseIntFromHex(match[2]),\n                    b: parseIntFromHex(match[3]),\n                    format: named ? \"name\" : \"hex\"\n                };\n            } else if ((match = colorRegexMap.hex3.exec(color))) {\n                return {\n                    r: parseIntFromHex(match[1] + '' + match[1]),\n                    g: parseIntFromHex(match[2] + '' + match[2]),\n                    b: parseIntFromHex(match[3] + '' + match[3]),\n                    format: named ? \"name\" : \"hex\"\n                };\n            }\n\n            return false;\n        },\n\n        /**\n         * Convert input color from string or object to RGB profile\n         * @param  {Mixed} color\n         * @return {Object} Returns object with properties which inititalized in Rise.Color constructor\n         * @private\n         */\n        inputToRgb: function(color) {\n            var rgb = {\n                    r: 0,\n                    g: 0,\n                    b: 0\n                },\n                alpha = 1,\n                valid = false,\n                format = false;\n\n            if (Rise.Util.getType(color) == 'string') {\n                color = stringToObject(color);\n            }\n\n            if (Rise.Util.getType(color) == 'object') {\n                if (color.hasOwnProperty('r') && color.hasOwnProperty('g') && color.hasOwnProperty('b')) {\n                    rgb = rgbToRgb(color.r, color.g, color.b);\n                    valid = true;\n                    format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n                } else if (color.hasOwnProperty('h') && color.hasOwnProperty('s') && color.hasOwnProperty('v')) {\n                    color.s = convertToPercentage(color.s);\n                    color.v = convertToPercentage(color.v);\n                    rgb = hsvToRgb(color.h, color.s, color.v);\n                    valid = true;\n                    format = \"hsv\";\n                } else if (color.hasOwnProperty('h') && color.hasOwnProperty('s') && color.hasOwnProperty('l')) {\n                    color.s = convertToPercentage(color.s);\n                    color.l = convertToPercentage(color.l);\n                    rgb = hslToRgb(color.h, color.s, color.l);\n                    valid = true;\n                    format = \"hsl\";\n                }\n\n                if (color.hasOwnProperty('a')) {\n                    alpha = color.a;\n                }\n            }\n\n            alpha = boundAlpha(alpha);\n\n            return {\n                valid: valid,\n                format: color.format || format,\n                r: Math.min(255, Math.max(rgb.r, 0)),\n                g: Math.min(255, Math.max(rgb.g, 0)),\n                b: Math.min(255, Math.max(rgb.b, 0)),\n                a: alpha\n            };\n        },\n\n        /**\n         * Convert RGB colour to RGB.\n         * Better to use this because here processing\n         * handling of bound or percentage in RGB profile.\n         * @param  {Integer} r Red channel\n         * @param  {Integer} g Green channel\n         * @param  {Integer} b Blue channel\n         * @return {Object}   Object with r,g,b properties\n         * @private\n         */\n        rgbToRgb: function(r, g, b) {\n            return {\n                r: bound01(r, 255) * 255,\n                g: bound01(g, 255) * 255,\n                b: bound01(b, 255) * 255\n            };\n        },\n\n        /**\n         * Convert RGB colour to HSL\n         * @param  {Integer} r Red channel\n         * @param  {Integer} g Green channel\n         * @param  {Integer} b Blue channel\n         * @return {Object}   Object with h,s,l properties\n         */\n        rgbToHsl: function(r, g, b) {\n            r = bound01(r, 255);\n            g = bound01(g, 255);\n            b = bound01(b, 255);\n\n            var max = Math.max(r, g, b),\n                min = Math.min(r, g, b),\n                h, s, l = (max + min) / 2;\n\n            if (max == min) {\n                h = s = 0;\n            } else {\n                var d = max - min;\n                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n                switch (max) {\n                    case r:\n                        h = (g - b) / d + (g < b ? 6 : 0);\n                        break;\n                    case g:\n                        h = (b - r) / d + 2;\n                        break;\n                    case b:\n                        h = (r - g) / d + 4;\n                        break;\n                }\n\n                h /= 6;\n            }\n\n            return {\n                h: h,\n                s: s,\n                l: l\n            };\n        },\n\n        /**\n         * Convert HSL colour to RGB\n         * @param  {Integer} h Hue channel\n         * @param  {Integer} s Saturation channel\n         * @param  {Integer} l Lightness channel\n         * @return {Object}   Object with r,g,b properties\n         * @private\n         */\n        hslToRgb: function(h, s, l) {\n            h = bound01(h, 360);\n            s = bound01(s, 100);\n            l = bound01(l, 100);\n\n            function hue2rgb(p, q, t) {\n                if (t < 0) t += 1;\n                if (t > 1) t -= 1;\n                if (t < 1 / 6) return p + (q - p) * 6 * t;\n                if (t < 1 / 2) return q;\n                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n                return p;\n            }\n\n            var r, g, b;\n\n            if (s === 0) {\n                r = g = b = l;\n            } else {\n                var q = l < 0.5 ? l * (1 + s) : l + s - l * s,\n                    p = 2 * l - q;\n\n                r = hue2rgb(p, q, h + 1 / 3);\n                g = hue2rgb(p, q, h);\n                b = hue2rgb(p, q, h - 1 / 3);\n            }\n\n            return {\n                r: r * 255,\n                g: g * 255,\n                b: b * 255\n            };\n        },\n\n        /**\n         * Convert RGB colour to HSV\n         * @param  {Integer} r Red channel\n         * @param  {Integer} g Green channel\n         * @param  {Integer} b Blue channel\n         * @return {Object}   Object with h,s,v properties\n         */\n        rgbToHsv: function(r, g, b) {\n            r = bound01(r, 255);\n            g = bound01(g, 255);\n            b = bound01(b, 255);\n\n            var max = Math.max(r, g, b),\n                min = Math.min(r, g, b),\n                h, s, v = max,\n                d = max - min;\n\n            s = max === 0 ? 0 : d / max;\n\n            if (max == min) {\n                h = 0;\n            } else {\n                switch (max) {\n                    case r:\n                        h = (g - b) / d + (g < b ? 6 : 0);\n                        break;\n                    case g:\n                        h = (b - r) / d + 2;\n                        break;\n                    case b:\n                        h = (r - g) / d + 4;\n                        break;\n                }\n\n                h /= 6;\n            }\n\n            return {\n                h: h,\n                s: s,\n                v: v\n            };\n        },\n\n        /**\n         * Convert HSV colour to RGB\n         * @param  {Integer} h Hue channel\n         * @param  {Integer} s Saturation channel\n         * @param  {Integer} v Value channel\n         * @return {Object}   Object with r,g,b properties\n         * @private\n         */\n        hsvToRgb: function(h, s, v) {\n            h = bound01(h, 360) * 6;\n            s = bound01(s, 100);\n            v = bound01(v, 100);\n\n            var i = Math.floor(h),\n                f = h - i,\n                p = v * (1 - s),\n                q = v * (1 - f * s),\n                t = v * (1 - (1 - f) * s),\n                mod = i % 6,\n                r = [v, q, p, p, t, v][mod],\n                g = [t, v, v, q, p, p][mod],\n                b = [p, p, t, v, v, q][mod];\n\n            return {\n                r: r * 255,\n                g: g * 255,\n                b: b * 255\n            };\n        },\n\n        /**\n         * Convert RGB colour to HEX\n         * @param  {Integer} r Red channel\n         * @param  {Integer} g Green channel\n         * @param  {Integer} b Blue channel\n         * @param  {Boolean} allow3Char Allow 3 char notation in HEX\n         * @return {String} HEX in string\n         * @private\n         */\n        rgbToHex: function(r, g, b, allow3Char) {\n            var hex = [\n                pad2(Math.round(r).toString(16)),\n                pad2(Math.round(g).toString(16)),\n                pad2(Math.round(b).toString(16))\n            ];\n\n            if (\n                allow3Char &&\n                hex[0].charAt(0) == hex[0].charAt(1) &&\n                hex[1].charAt(0) == hex[1].charAt(1) &&\n                hex[2].charAt(0) == hex[2].charAt(1)\n            ) {\n                return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n            }\n\n            return hex.join(\"\");\n        },\n\n        /**\n         * Convert RGBA colour to HEX\n         * @param  {Integer} r Red channel\n         * @param  {Integer} g Green channel\n         * @param  {Integer} b Blue channel\n         * @param  {Float} a Alpha channel\n         * @return {String}   Returns HEX 8 string\n         * @private\n         */\n        rgbaToHex: function(r, g, b, a) {\n            var hex = [\n                pad2(convertDecimalToHex(a)),\n                pad2(Math.round(r).toString(16)),\n                pad2(Math.round(g).toString(16)),\n                pad2(Math.round(b).toString(16))\n            ];\n\n            return hex.join(\"\");\n        },\n\n        /**\n         * Create Rise.Color from ratio\n         * @param  {Object|String} color  Can be object with r, g, b, a properties or string\n         * @param  {Object} config Configuration object\n         * @return {Rise.Color}\n         * @static\n         */\n        fromRatio: function(color, config) {\n            Rise.Logger.startGroup('Rise.Color.fromRatio');\n\n            if (Rise.Util.getType(color) == 'object') {\n                Rise.Logger.log('Color %O is object. Start parsing from object.', color);\n\n                var newColor = {};\n\n                for (var i in color) {\n                    if (color.hasOwnProperty(i)) {\n                        Rise.Logger.log('Processing %s property in color object', i);\n\n                        if (i === \"a\") {\n                            newColor[i] = color[i];\n                        } else {\n                            newColor[i] = convertToPercentage(color[i]);\n                        }\n                    }\n                }\n\n                color = newColor;\n            }\n\n            Rise.Logger.log('Parsed successfully and created new Rise.Color object');\n            Rise.Logger.endGroup();\n\n            return new Rise.Color(color, config);\n        },\n\n        /**\n         * Check if two colors are equals\n         * @param  {String} firstColor First color\n         * @param  {String} secondColor Second color\n         * @return {Boolean}        True if colors equals and false otherwise\n         * @static\n         */\n        equals: function(firstColor, secondColor) {\n            Rise.Logger.log('Start checking for equals %O and %O colors', firstColor, secondColor);\n\n            if (!firstColor || !secondColor) {\n                return false;\n            }\n\n            return new Rise.Color(firstColor).toRgbString() == new Rise.Color(secondColor).toRgbString();\n        },\n\n        /**\n         * Generate random color and return it\n         * @return {Rise.Color} Random color\n         * @static\n         */\n        random: function() {\n            Rise.Logger.log('Starts generating random color');\n            return new Rise.Color.fromRatio({\n                r: Math.random(),\n                g: Math.random(),\n                b: Math.random()\n            });\n        },\n\n        /**\n         * Mix 2 colors\n         * @param  {String} color1 First color\n         * @param  {String} color2 Second color\n         * @param  {Integer} amount Amount of mix\n         * @return {Rise.Color}        Returns mixed color\n         * @static\n         */\n        mix: function(firstColor, secondColor, amount) {\n            amount = amount === 0 ? 0 : (amount || 50);\n\n            Rise.Logger.log('Start mixing %O and %O colors by %i amount', firstColor, secondColor, amount);\n\n            var rgbA = new Rise.Color(firstColor).toRgb(),\n                rgbB = new Rise.Color(secondColor).toRgb(),\n                p = amount / 100,\n                w = p * 2 - 1,\n                a = rgbB.a - rgbA.a,\n                w1,\n                w2;\n\n            if (w * a == -1) {\n                w1 = w;\n            } else {\n                w1 = (w + a) / (1 + w * a);\n            }\n\n            w1 = (w1 + 1) / 2;\n            w2 = 1 - w1;\n            rgba = {\n                r: rgbB.r * w1 + rgbA.r * w2,\n                g: rgbB.g * w1 + rgbA.g * w2,\n                b: rgbB.b * w1 + rgbA.b * w2,\n                a: rgbB.a * p + rgbA.a * (1 - p)\n            };\n\n            Rise.Logger.log('Successfully mixed colors returns %O color', rgba);\n\n            return new Rise.Color(rgba);\n        },\n\n        /**\n         * Analyze 2 colors and returns information about\n         * @param  {String} firstColor First color\n         * @param  {String} secondColor Second color\n         * @return {Object} Object with brightness and color properties\n         * @static\n         */\n        readability: function(firstColor, secondColor) {\n            var colorA = new Rise.Color(firstColor),\n                colorB = new Rise.Color(secondColor),\n                rgbA = colorA.toRgb(),\n                rgbB = colorB.toRgb(),\n                brightnessA = colorA.getBrightness(),\n                brightnessB = colorB.getBrightness(),\n                colorDiff = (\n                    Math.max(rgbA.r, rgbB.r) - Math.min(rgbA.r, rgbB.r) +\n                    Math.max(rgbA.g, rgbB.g) - Math.min(rgbA.g, rgbB.g) +\n                    Math.max(rgbA.b, rgbB.b) - Math.min(rgbA.b, rgbB.b)\n                );\n\n            return {\n                brightness: Math.abs(brightnessA - brightnessB),\n                color: colorDiff\n            };\n        },\n\n        /**\n         * Ensure that foreground and background color combinations provide sufficient contrast.\n         * @param  {String} foregroundColor Foreground color\n         * @param  {String} backgroundColor Background color\n         * @return {Boolean} Returns true if readable and false otherwise\n         * @static\n         */\n        isReadable: function(foregroundColor, backgroundColor) {\n            var readability = new Rise.Color.readability(foregroundColor, backgroundColor);\n            return readability.brightness > 125 && readability.color > 500;\n        },\n\n        /**\n         * Get most readable foreground or background color for given color\n         * @param  {String} baseColor Base color\n         * @param  {Array} colorList Array of possibles colors\n         * @return {Rise.Color|Boolean} Best color from array where base color will be most readable or false otherwise\n         * @static\n         */\n        mostReadable: function(baseColor, colorList) {\n            var bestColor = false,\n                bestScore = 0,\n                bestIsReadable = false;\n\n            Rise.Logger.startGroup('Rise.Color.mostReadable -> Start calculating');\n            Rise.Logger.log('Trying to find best readability color for %O color from %O array', baseColor, colorList);\n\n            for (var i = 0; i < colorList.length; i++) {\n                var readability = new Rise.Color.readability(baseColor, colorList[i]),\n                    readable = readability.brightness > 125 && readability.color > 500,\n                    score = 3 * (readability.brightness / 125) + (readability.color / 500);\n\n                Rise.Logger.log(\n                    '%i -> For %O color calculated readability %O, is readable %s, score %i',\n                    i,\n                    colorList[i],\n                    readability,\n                    readable,\n                    score\n                );\n\n                if (\n                    (readable && !bestIsReadable) ||\n                    (readable && bestIsReadable && score > bestScore) ||\n                    ((!readable) && (!bestIsReadable) && score > bestScore)\n                ) {\n                    bestColor = new Rise.Color(colorList[i]);\n                    bestScore = score;\n                    bestIsReadable = readable;\n                }\n            }\n\n            Rise.Logger.log('Finded best readable color %O for %O color', bestColor, baseColor);\n            Rise.Logger.endGroup();\n\n            return bestColor;\n        }\n    });\n})(this);\n(function(global) {\n    'use strict';\n\n    global.Rise.Font = Rise.Class.extend({\n        /**\n         * Create new Font object\n         * @constructor\n         * @param  {Object} options Font options\n         * @return {Rise.Font}      Returns Rise.Font instance\n         * @example\n         * new Rise.Font({\n         *     style: 'normal',\n         *     variant: 'normal',\n         *     weight: 'normal',\n         *     size: 'medium',\n         *     lineHeight: 'normal',\n         *     family: 'serif'\n         * });\n         */\n        init: function(options) {\n            options = options || {};\n\n            Rise.Logger.startGroup(true, 'Rise.Font -> init()');\n            Rise.Logger.log('Trying to parse options object -> %O', options);\n\n            this.style = options.style || 'normal';\n            this.variant = options.variant || 'normal';\n            this.weight = options.weight || 'normal';\n            this.size = options.size || 'medium';\n            this.lineHeight = options.lineHeight || 'normal';\n            this.family = options.family || 'serif';\n\n            if (!Rise.Font.isFontValid(this)) {\n                Rise.Logger.warning('Rise.Font -> Something wrong with options -> %O', options);\n            }\n\n            Rise.Logger.log('Instantiated Rise.Font -> %O', this);\n            Rise.Logger.endGroup();\n\n            return this;\n        },\n\n        /**\n         * Check if Rise.Font is valid instance\n         * @return {Boolean} Returns true if Rise.Font instance valid\n         * @example\n         * new Rise.Font().isValid(); // true\n         */\n        isValid: function() {\n            return Rise.Font.isFontValid(this);\n        },\n\n        /**\n         * Get current style\n         * @return {String} Returns CSS font style\n         * @example\n         * new Rise.Font().getStyle();\n         */\n        getStyle: function() {\n            return this.style;\n        },\n\n        /**\n         * Set style to Rise.Font\n         * @param {String} style New CSS font style\n         * @return {Rise.Font} Returns Rise.Font instance\n         * @example\n         * new Rise.Font().setStyle('normal');\n         */\n        setStyle: function(style) {\n            if (Rise.Font.isFontStyleValid(style)) {\n                this.style = style;\n            } else {\n                Rise.Logger.warning('Rise.Font.setStyle() -> \"%s\" is not valid value', style);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font variant\n         * @return {String} Returns CSS font variant\n         * @example\n         * new Rise.Font().getVariant();\n         */\n        getVariant: function() {\n            return this.variant;\n        },\n\n        /**\n         * Set font variant to Rise.Font\n         * @param {String} variant New CSS font variant\n         * @return {Rise.Font} Returns Rise.Font instance\n         * @example\n         * new Rise.Font().setVariant('normal');\n         */\n        setVariant: function(variant) {\n            if (Rise.Font.isFontVariantValid(variant)) {\n                this.variant = variant;\n            } else {\n                Rise.Logger.warning('Rise.Font.setVariant() -> \"%s\" is not valid value', variant);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font weight\n         * @return {String} Returns CSS font weight\n         * @example\n         * new Rise.Font().getWeight();\n         */\n        getWeight: function() {\n            return this.weight;\n        },\n\n        /**\n         * Set font weight to Rise.Font\n         * @param {String} weight New CSS font weight\n         * @return {Rise.Font} Returns Rise.Font instance\n         * @example\n         * new Rise.Font().setWeight('normal')\n         */\n        setWeight: function(weight) {\n            if (Rise.Font.isFontWeightValid(weight)) {\n                this.weight = weight;\n            } else {\n                Rise.Logger.warning('Rise.Font.setWeight() -> \"%s\" is not valid value', weight);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font size\n         * @return {String} Returns CSS font size\n         * @example\n         * new Rise.Font().getSize();\n         */\n        getSize: function() {\n            return this.size;\n        },\n\n        /**\n         * Set font size to Rise.Font\n         * @param {String} size New CSS font size\n         * @return {Rise.Font} Returns Rise.Font instance\n         * @example\n         * new Rise.Font().setSize('medium');\n         */\n        setSize: function(size) {\n            if (Rise.Font.isFontSizeValid(size)) {\n                this.size = size;\n            } else {\n                Rise.Logger.warning('Rise.Font.setSize() -> \"%s\" is not valid value', size);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font line height\n         * @return {String} Returns CSS font line-height\n         * @example\n         * new Rise.Font().getLineHeight();\n         */\n        getLineHeight: function() {\n            return this.lineHeight;\n        },\n\n        /**\n         * Set font line height to Rise.Font\n         * @param {String} lineHeight New CSS font line-height\n         * @return {Rise.Font} Returns Rise.Font instance\n         * @example\n         * new Rise.Font().setLineHeight('normal');\n         */\n        setLineHeight: function(lineHeight) {\n            if (Rise.Font.isFontLineHeightValid(lineHeight)) {\n                this.lineHeight = lineHeight;\n            } else {\n                Rise.Logger.warning('Rise.Font.setLineHeight() -> \"%s\" is not valid value', lineHeight);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font family\n         * @return {String} Returns CSS font family\n         * @example\n         * new Rise.Font().getFamily();\n         */\n        getFamily: function() {\n            return this.family;\n        },\n\n        /**\n         * Set font family to Rise.Font\n         * @param {String} family New CSS font family\n         * @return {Rise.Font} Returns Rise.Font instance\n         * @example\n         * new Rise.Font().setFamily('serif');\n         */\n        setFamily: function(family) {\n            if (Rise.Font.isFontFamilyValid(family)) {\n                this.family = family;\n            } else {\n                Rise.Logger.warning('Rise.Font.setFamily() -> \"%s\" is not valid value', family);\n            }\n\n            return this;\n        },\n\n        /**\n         * Convert Rise.Font to CSS string representation\n         * @return {String} Returns CSS string of Rise.Font representation\n         * @example\n         * new Rise.Font().toString();\n         */\n        toString: function() {\n            return (\n                [\n                    this.getStyle(),\n                    this.getVariant(),\n                    this.getWeight(),\n                    this.getSize(),\n                    '/' + this.getLineHeight(),\n                    this.getFamily()\n                ].join(' ')\n            );\n        }\n    }, {\n        /**\n         * Map of CSS units\n         * @static\n         * @type {Array}\n         */\n        unitsMap: ['em', 'ex', 'pt', 'px', '%'],\n\n        /**\n         * Map of CSS font styles\n         * @static\n         * @type {Array}\n         */\n        fontStyleMap: ['normal', 'italic', 'oblique', 'inherit'],\n\n        /**\n         * Map of CSS font variants\n         * @static\n         * @type {Array}\n         */\n        fontVariantMap: ['normal', 'small-caps', 'inherit'],\n\n        /**\n         * Map of CSS font weights\n         * @static\n         * @type {Array}\n         */\n        fontWeightMap: ['bold', 'bolder', 'lighter', 'normal', '100', '200', '300', '400', '500', '600', '700', '800', '900'],\n\n        /**\n         * Map of CSS font sizes\n         * @static\n         * @type {Array}\n         */\n        fontSizeMap: ['xx-small', 'x-small', 'smaller', 'small', 'medium', 'large', 'larger', 'x-large', 'xx-large'],\n\n        /**\n         * Map of CSS font line heights\n         * @static\n         * @type {Array}\n         */\n        fontLineHeightMap: ['normal', 'inherit'],\n\n        /**\n         * Check if provided value is valid CSS value\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid CSS value\n         */\n        isCssValueValid: function(value) {\n            return Rise.Font.unitsMap.some(function(unit) {\n                return value.lastIndexOf(unit) != -1;\n            });\n        },\n\n        /**\n         * Check if provided value is valid CSS font style\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontStyleValid: function(value) {\n            return Rise.Font.fontStyleMap.indexOf(value) != -1;\n        },\n\n        /**\n         * Check if provided value is valid CSS font variant\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontVariantValid: function(value) {\n            return Rise.Font.fontVariantMap.indexOf(value) != -1;\n        },\n\n        /**\n         * Check if provided value is valid CSS font weight\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontWeightValid: function(value) {\n            return Rise.Font.fontWeightMap.indexOf(value) != -1;\n        },\n\n        /**\n         * Check if provided value is valid CSS font size\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontSizeValid: function(value) {\n            return (\n                Rise.Font.fontSizeMap.indexOf(value) != -1 ||\n                Rise.Font.isCssValueValid(value)\n            );\n        },\n\n        /**\n         * Check if provided value is valid CSS font line height\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontLineHeightValid: function(value) {\n            return (\n                Rise.Font.isCssValueValid(value) ||\n                Rise.Font.fontLineHeightMap.indexOf(value) != -1\n            );\n        },\n\n        /**\n         * Check if provided value is valid CSS font family\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontFamilyValid: function(value) {\n            // TODO: implement\n            return true;\n        },\n\n        /**\n         * Check whole Rise.Font instance for valid values\n         * @static\n         * @param  {Rise.Font}  font Rise.Font instance where need to check their font values\n         * @return {Boolean}         Returns true if Rise.Font is correct instance\n         */\n        isFontValid: function(font) {\n            return (\n                Rise.Font.isFontStyleValid(font.getStyle()) &&\n                Rise.Font.isFontVariantValid(font.getVariant()) &&\n                Rise.Font.isFontWeightValid(font.getWeight()) &&\n                Rise.Font.isFontSizeValid(font.getSize()) &&\n                Rise.Font.isFontLineHeightValid(font.getLineHeight()) &&\n                Rise.Font.isFontFamilyValid(font.getFamily())\n            );\n        },\n\n        /**\n         * Create Rise.Font instance from string representation\n         * @static\n         * @param  {String} font    Font string\n         * @return {Rise.Font}      Returns Rise.Font instance with parsed options from string\n         */\n        fromString: function(font) {\n            // TODO: implement\n            Rise.Logger.warning('Rise.Font -> fromString() not realized yet');\n            return new Rise.Font();\n        },\n\n        /**\n         * Create Rise.Font instance from exists node element\n         * @static\n         * @param  {Element} element Existing node element from where font options will parse\n         * @return {Rise.Font}       Returns Rise.Font instance\n         */\n        fromNode: function(element) {\n            var style = window.getComputedStyle(element, null);\n\n            return new Rise.Font({\n                style: style.getPropertyValue('font-style'),\n                variant: style.getPropertyValue('font-variant'),\n                weight: style.getPropertyValue('font-weight'),\n                size: style.getPropertyValue('font-size'),\n                lineHeight: style.getPropertyValue('line-height'),\n                family: style.getPropertyValue('font-family')\n            });\n        }\n    });\n})(this);\n(function(global) {\n    'use strict';\n\n    /**\n     * Current log level\n     * @type {Number}\n     * @private\n     */\n    var currentLogLevel = 3;\n\n    /**\n     * Check if level is allow to print message\n     * @param  {Integer}  level Level that need to check\n     * @return {Boolean}        Returns true if this level can be printed out\n     * @private\n     */\n    function isAllowedLevel(level) {\n        return level >= currentLogLevel;\n    }\n\n    /**\n     * Prepend message to every log message\n     * @param  {String} string Message to what will be prepended header message\n     * @return {String}        Returns resulting strint\n     * @private\n     */\n    function prependLoggerInfo(string) {\n        return ['Rise', new Date().toLocaleTimeString(), string].join(' -> ');\n    }\n\n    /**\n     * Invoke console methods\n     * @param  {String} type Type of console that need to be invoked\n     * @param  {Array} args Array of arguments to console method\n     * @private\n     * @example\n     * invokeConsole('log', ['test', 'test2']); // test test2\n     */\n    function invokeConsole(type, args) {\n        args = Array.prototype.slice.call(args, 0);\n\n        if (console[type] && Rise.Util.isFunction(console[type])) {\n            args[0] = prependLoggerInfo(args[0] ? args[0] : '');\n            console[type].apply(console, args);\n        }\n    }\n\n    /**\n     * Print welcome message to console\n     * @private\n     */\n    (function printWelcomeMessage() {\n        if (window.chrome) {\n            console.log.apply(console, [\n                '%c %c %c Rise v' + Rise.getVersion() + ' %c %c %c',\n                'background: #0E173E; font-size: 8pt;',\n                'background: #020C25; font-size: 9pt;',\n                'color: #FFFFFF; background: #0D0B0E; font-size: 10pt',\n                'background: #020C25; font-size: 9pt;',\n                'background: #0E173E; font-size: 8pt;',\n                'background: #0E173E; font-size: 8pt;'\n            ]);\n        } else {\n            console.log('Rise v' + Rise.getVersion());\n        }\n    })();\n\n    /**\n     * Logger object\n     * @static\n     * @type {Object}\n     */\n    var Logger = {\n        /**\n         * Allow print out all messages\n         * @static\n         * @type {Number}\n         */\n        VERBOSE: 1,\n\n        /**\n         * Allow print out only .debug(), .error(), .warn(), .info()\n         * @static\n         * @type {Number}\n         */\n        DEBUG: 2,\n\n        /**\n         * Allow print out only .error(), .warn(), .info()\n         * @static\n         * @type {Number}\n         */\n        ERROR: 3,\n\n        /**\n         * Allow print out only .warn() and .info()\n         * @static\n         * @type {Number}\n         */\n        WARNING: 4,\n\n        /**\n         * Allow print out only .info()\n         * @static\n         * @type {Number}\n         */\n        INFO: 5,\n\n        /**\n         * Disable all logs\n         * @static\n         * @type {Number}\n         */\n        OFF: 100,\n\n        /**\n         * Set current level for logger\n         * @param {Integer} level Predefined constant in Rise.Logger\n         * @return {Rise.Logger}\n         * @static\n         * @example\n         * Rise.Logger.setLevel(Rise.Logger.VERBOSE);\n         */\n        setLevel: function(level) {\n            currentLogLevel = level;\n            return this;\n        },\n\n        /**\n         * Get current log level\n         * @static\n         * @return {Integer} Returns integer value of current log level\n         */\n        getLevel: function() {\n            return currentLogLevel;\n        },\n\n        /**\n         * Log message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        log: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('log', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Debug message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        debug: function() {\n            if (isAllowedLevel(this.DEBUG)) {\n                invokeConsole('debug', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Error message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        error: function() {\n            if (isAllowedLevel(this.ERROR)) {\n                invokeConsole('error', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Warning message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        warning: function() {\n            if (isAllowedLevel(this.WARNING)) {\n                invokeConsole('warn', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Info message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        info: function() {\n            if (isAllowedLevel(this.INFO)) {\n                invokeConsole('info', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Start new group in console\n         * @static\n         * @param {Boolean} [startCollapsed] If first argument true, group will be collapsed\n         * @return {Rise.Logger}\n         */\n        startGroup: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                if (Rise.Util.isBoolean(arguments[0]) && arguments[0] === true) {\n                    invokeConsole('groupCollapsed', Array.prototype.slice.call(arguments, 1));\n                } else {\n                    invokeConsole('group', arguments);\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * End current group in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        endGroup: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('groupEnd', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Start profiling time in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        startTime: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('time', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * End profiling time in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        endTime: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('timeEnd', arguments);\n            }\n\n            return this;\n        }\n    };\n\n    global.Rise.Logger = Logger;\n\n})(this);\n(function(global) {\n    'use strict';\n\n    global.Rise.Opacity = Rise.Class.extend({\n        /**\n         * Create new Opacity object\n         * @constructor\n         * @param {Float} opacity Percentage range [0, 100] (100% - transparent, 0% - blank) or [0, 1] range\n         * @return {Rise.Opacity} Returns new Rise.Opacity instance\n         * @example\n         * new Rise.Opacity(40).toString(); // 0.60\n         * new Rise.Opacity(0.20).getOpacity(); // 80\n         */\n        init: function(opacity) {\n            opacity = opacity || 0;\n\n            Rise.Logger.startGroup('Rise.Opacity -> init()');\n            Rise.Logger.log('Trying to parse opacity -> \"$s\"', opacity);\n            this.set(opacity);\n            Rise.Logger.endGroup();\n\n            return this;\n        },\n\n        /**\n         * Set opacity\n         * @param {Integer} opacity Opacity in percentage range [0, 100] or [0, 1] range\n         * @return {Rise.Opacity} Returns current Rise.Opacity instance\n         * @example\n         * new Rise.Opacity(20).set(60).toString(); // 0.4\n         */\n        set: function(opacity) {\n            if (Rise.Opacity.isDecimal01Value(opacity)) {\n                Rise.Logger.log('\"%s\" decimal value, converting to percentage', opacity);\n                this.opacity = Rise.Opacity.fromCssToPercentage(opacity);\n            } else if (Rise.Opacity.isPercentageValue(opacity)) {\n                Rise.Logger.log('\"%s\" percentage value, setting it', opacity);\n                this.opacity = opacity;\n            } else {\n                Rise.Logger.warning('Opacity -> %O not parsed, set to 0%', opacity);\n                this.opacity = 0;\n            }\n\n            return this;\n        },\n\n        /**\n         * Get opacity in percentage\n         * @return {Integer} Returns opacity in range from 0% to 100%\n         * @example\n         * new Rise.Opacity(60).get(); // 60\n         */\n        get: function() {\n            return this.opacity;\n        },\n\n        /**\n         * Convert opacity value to CSS string\n         * @return {String} Returns string which you can apply to CSS\n         */\n        toString: function() {\n            return Rise.Opacity.fromPercentageToCss(this.opacity);\n        }\n    }, {\n        /**\n         * Check if provided value is percentage value in [0, 100] range and not decimal\n         * @param  {Float} value Value that need to be checked\n         * @return {Boolean} True if value is percentage value\n         * @static\n         * @example\n         * isPercentageValue(20); // true\n         * isPercentageValue(0); // true\n         * isPercentageValue(400); // false\n         * isPercentageValue(0.40); //false\n         */\n        isPercentageValue: function(value) {\n            return (\n                Rise.Util.isNumber(value) &&\n                value >= 0 &&\n                value <= 100 &&\n                value == Math.floor(value)\n            );\n        },\n\n        /**\n         * Check if provided value is decimal value in [0, 1] range\n         * @param  {Float} value Value that need to be checked\n         * @return {Boolean} True if value is decimal\n         * @static\n         * @example\n         * isDecimal01Value(0.20); // true\n         * isDecimal01Value(2); // false\n         * isDecimal01Value(1.00); // false\n         */\n        isDecimal01Value: function(value) {\n            return (\n                Rise.Util.isNumber(value) &&\n                value >= 0 &&\n                value <= 1 &&\n                value != Math.floor(value)\n            );\n        },\n\n        /**\n         * Convert CSS opacity value to percentage value\n         * @param  {Float} value CSS opacity value that need to be converted\n         * @return {Float} Returns float value in percentage\n         * @static\n         * @example\n         * Rise.Opacity.fromCssToPercentage(0.40); // 60%\n         * Rise.Opacity.fromCssToPercentage(1); // 0%\n         */\n        fromCssToPercentage: function(value) {\n            return (100 - (value * 100.0).toFixed(0));\n        },\n\n        /**\n         * Convert percentage value to CSS opacity\n         * @param  {Float} value Percentage value\n         * @return {Float} Returns float value for CSS opacity\n         * @static\n         * @example\n         * Rise.Opacity.fromPercentageToCss(60); // 0.40\n         * Rise.Opacity.fromPercentageToCss(0); // 1\n         */\n        fromPercentageToCss: function(value) {\n            return (100 - value) / 100.0;\n        }\n    });\n})(this);\n(function(global) {\n    'use strict';\n\n    /**\n     * Factory method that returns new Rise.RQuery instance\n     * @static\n     * @return {Rise.RQuery} Returns Rise.RQuery instance\n     * @example\n     * Rise.$('div');\n     * Rise.$('.my-selector');\n     */\n    global.Rise.$ = function() {\n        return Rise.RQuery.apply(Object.create(Rise.RQuery.prototype), arguments);\n    };\n\n    /**\n     * Factory method that returns new Rise.RQuery instance with created Element\n     * @static\n     * @param  {String} tag Tag element that need to create\n     * @return {Rise.RQuery} Returns Rise.RQuery instance with created Element\n     * @example\n     * Rise.$.create('div');\n     * Rise.$.create('span').text('My text');\n     */\n    global.Rise.$.create = function(tag) {\n        return new Rise.RQuery(document.createElement(tag));\n    };\n\n    global.Rise.RQuery = Rise.Class.extend({\n        /**\n         * Create new Rise.RQuery instance\n         * @constructor\n         * @param  {String|Rise.RQuery|Element|Array} selector Selector or exists Element\n         * @param  {Element|Document|Window} parent Parent from where selector will parse\n         * @return {Rise.RQuery} Returns Rise.RQuery instance\n         * @example\n         * new Rise.RQuery('.selector');\n         */\n        init: function(selector, parent) {\n            selector = selector || window;\n            parent = parent || document;\n\n            /**\n             * Push Element to this.elements if valid\n             * @this {Rise.RQuery}\n             * @param  {Element} element It should be Element instance\n             * @private\n             */\n            var pushElement = function(element) {\n                if (element instanceof Element) {\n                    this.elements.push(element);\n                }\n            }.bind(this);\n\n            this.elements = [];\n\n            Rise.Logger.startGroup(true, 'Rise.RQuery -> init()');\n            Rise.Logger.log('Parsing selector -> \"%O\" with parent -> %O', selector, parent);\n\n            if (selector instanceof Rise.RQuery) {\n                this.elements = selector.get();\n            } else if (\n                Rise.Util.isArray(selector) ||\n                selector instanceof HTMLCollection ||\n                selector instanceof NodeList\n            ) {\n                Array.prototype.forEach.call(selector, pushElement);\n            } else if (selector instanceof Element) {\n                this.elements[0] = selector;\n            } else if (Rise.Util.isString(selector)) {\n                Array.prototype.forEach.call(parent.querySelectorAll(selector), pushElement);\n            } else {\n                Rise.Logger.warning('Selector is not valid -> %O', selector);\n            }\n\n            Rise.Logger.log('Instantiated Rise.RQuery -> %O', this);\n            Rise.Logger.endGroup();\n\n            return this;\n        },\n\n        /**\n         * Get Element by index\n         * @param  {Integer} index Index\n         * @return {Array|Element} Returns Element with corresponding index or array of elements\n         * @example\n         * Rise.$('body').get(0);\n         * Rise.$('div').get();\n         */\n        get: function(index) {\n            return Rise.Util.isUndefined(index) ? this.elements : this.elements[index];\n        },\n\n        /**\n         * Get elements count\n         * @return {Integer} Returns elements count\n         * @example\n         * Rise.$('body').count(); // 1\n         */\n        count: function() {\n            return (this.elements && this.elements.length) || 0;\n        },\n\n        /**\n         * Iterate through all elements and call callback function\n         * @param  {Function} cb Callback which called at each iteration cb(element, index, array)\n         * @return {Rise.RQuery}\n         * @example\n         * Rise.$('div').each(function(element, index, array) {\n         *     console.log(element, index, array);\n         * });\n         */\n        each: function(cb) {\n            Array.prototype.forEach.call(this.get(), cb);\n            return this;\n        },\n\n        /**\n         * Get parent node\n         * @return {Rise.RQuery} Returns parent node of element\n         * @example\n         * Rise.$('body').parent();\n         */\n        parent: function() {\n            return new Rise.RQuery(this.get(0).parentNode);\n        },\n\n        /**\n         * Get array of children nodes\n         * @return {Rise.RQuery} Return Rise.RQuery object with child nodes\n         * @example\n         * Rise.$('body').children();\n         */\n        children: function() {\n            return new Rise.RQuery(this.get(0).children);\n        },\n\n        /**\n         * Check if node contains other node\n         * @param {Rise.RQuery} child Child node which need to check for exists in node\n         * @return {Boolean} True if contains\n         * @example\n         * Rise.$('body').contains(Rise.$('div'));\n         */\n        contains: function(child) {\n            child = child.get(0);\n\n            var element = this.get(0);\n\n            return element !== child && element.contains(child);\n        },\n\n        /**\n         * Get node's width\n         * @return {Integer} Returns offsetWidth of node\n         * @example\n         * Rise.$('div').offsetWidth();\n         */\n        offsetWidth: function() {\n            return this.get(0).offsetWidth;\n        },\n\n        /**\n         * Get node's height\n         * @return {Integer} Returns offsetHeight of node\n         * @example\n         * Rise.$('div').offsetHeight();\n         */\n        offsetHeight: function() {\n            return this.get(0).offsetHeight;\n        },\n\n        /**\n         * Get left offset of node\n         * @return {Integer} Returns offsetLeft of node\n         * @example\n         * Rise.$('div').offsetLeft();\n         */\n        offsetLeft: function() {\n            return this.get(0).offsetLeft;\n        },\n\n        /**\n         * Get top offset of node\n         * @return {Integer} Returns offsetTop of node\n         * @example\n         * Rise.$('div').offsetTop();\n         */\n        offsetTop: function() {\n            return this.get(0).offsetTop;\n        },\n\n        /**\n         * Focus at node\n         * @return {Rise.RQuery} Returns Rise.RQuery instance\n         * @example\n         * Rise.$('input').focus();\n         */\n        focus: function() {\n            this.get(0).focus();\n            return this;\n        },\n\n        /**\n         * Unfocus from node\n         * @return {Rise.RQuery} Returns Rise.RQuery instance\n         * @example\n         * Rise.$('input').blur();\n         */\n        blur: function() {\n            this.get(0).blur();\n            return this;\n        },\n\n        /**\n         * Iterate through nodes and filter them out\n         * @param  {Function} cb Callback function accept 3 arguments cb(node, index, array) and must return bool\n         * @return {Rise.RQuery} Returns Rise.RQuery instance with filtered nodes\n         * @example\n         * Rise.$('div').filter(function(node, index, array) {\n         *     return Rise.$(node).hasClass('example');\n         * });\n         */\n        filter: function(cb) {\n            if (Rise.Util.isFunction(cb)) {\n                return new Rise.RQuery(Array.prototype.filter.call(this.get(), cb));\n            } else {\n                Rise.Logger.warning('Rise.RQuery.filter() -> You must provide function');\n            }\n        },\n\n        /**\n         * Find nodes by selector, starting from current parent node\n         * @param  {String} selector Selector for find other nodes\n         * @return {Rise.RQuery} Returns new Rise.RQuery instance with finded nodes\n         * @example\n         * Rise.$('body').find('div').find('span');\n         */\n        find: function(selector) {\n            return new Rise.RQuery(selector, this.get(0));\n        },\n\n        /**\n         * Set or get attribute value to nodes\n         * @param  {String|Object} attr String for getting attribute value and object for set\n         * @return {Rise.RQuery|Mixed} Returns current Rise.RQuery instance or attribute value\n         * @example\n         * Rise.$('div').attr('id');\n         * Rise.$('div').attr({\n         *     id: 'test'\n         * });\n         */\n        attr: function(attr) {\n            if (Rise.Util.isString(attr)) {\n                return this.get(0).getAttribute(attr);\n            } else if (Rise.Util.isObject(attr)) {\n                Rise.Logger.startGroup(true, 'Rise.RQuery.attr() -> Set attributes');\n                this.each(function(element) {\n                    Object.keys(attr).forEach(function(key) {\n                        Rise.Logger.log('Set key-value \"%s\" -> \"%s\" to element %O', key, attr[key], element);\n                        if (attr[key] === false) {\n                            element.removeAttribute(key);\n                        } else {\n                            element.setAttribute(key, attr[key]);\n                        }\n                    });\n                });\n                Rise.Logger.endGroup();\n            }\n\n            return this;\n        },\n\n        /**\n         * Set or get css-rules\n         * @param  {String|Object} name String if you want get CSS-rule or Object for set\n         * @param {String} pseudoElement You can provide pseudoElement selector\n         * @return {Rise.RQuery|Mixed} Returns current Rise.RQuery instance or CSS value\n         * @example\n         * Rise.RQuery('div').css({\n         *     width: 200\n         * });\n         * Rise.RQuery('div').css('width', ':after');\n         * Rise.RQuery('div').css('width');\n         */\n        css: function(css, pseudoElement) {\n            pseudoElement = pseudoElement || null;\n\n            if (Rise.Util.isString(css)) {\n                return window.getComputedStyle(this.get(0), pseudoElement).getPropertyValue(Rise.Util.getDashedString(css));\n            } else if (Rise.Util.isObject(css)) {\n                Rise.Logger.startGroup(true, 'Rise.RQuery.css() -> Set CSS');\n                this.each(function(element) {\n                    Object.keys(css).forEach(function(key) {\n                        Rise.Logger.log('Set key-value \"%s\" -> \"%s\" to element %O', key, css[key], element);\n\n                        if (css[key] === false) {\n                            element.style.removeProperty(Rise.Util.getDashedString(key));\n                        } else if (isNaN(css[key]) || Rise.RQuery.cssNumbersMap.indexOf(key) != -1) {\n                            element.style[Rise.Util.getCamelizedString(key)] = css[key];\n                        } else {\n                            element.style[Rise.Util.getCamelizedString(key)] = css[key] + 'px';\n                        }\n                    });\n                });\n                Rise.Logger.endGroup();\n            }\n\n            return this;\n        },\n\n        /**\n         * Wrap nodes with new node\n         * @param  {Rise.RQuery} html Rise.RQuery instance with HTML which will be the wrapper\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').wrap(Rise.$.create('a')); // Wrap all div with a tag\n         */\n        wrap: function(html) {\n            var wrapper;\n\n            return this.each(function(element) {\n                wrapper = html.clone();\n                element.parentNode.insertBefore(wrapper.get(0), element);\n                wrapper.append(element);\n            });\n        },\n\n        /**\n         * Unwrap nodes, remove parent node from nodes\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').unwrap();\n         */\n        unwrap: function() {\n            return this.each(function(element) {\n                element.parentNode.parentNode.replaceChild(element, element.parentNode);\n            });\n        },\n\n        /**\n         * Check if this node is matches to selector\n         * @param  {String} selector Selector for checking\n         * @return {Boolean} Returns true if all elements is match to selector and false otherwise\n         * @example\n         * Rise.$('div').is('div'); // true\n         */\n        is: function(selector) {\n            var element;\n\n            if (this.count() > 0) {\n                element = this.get(0);\n\n                return (\n                    element.matches ||\n                    element.matchesSelector ||\n                    element.msMatchesSelector ||\n                    element.mozMatchesSelector ||\n                    element.webkitMatchesSelector ||\n                    element.oMatchesSelector\n                ).call(element, selector);\n            }\n\n            return false;\n        },\n\n        /**\n         * Add class name to nodes\n         * @param {String} names Class names splitted with spaces\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').addClass('foo bar');\n         */\n        addClass: function(names) {\n            names = names.split(/[ ]+/);\n\n            return this.each(function(element) {\n                names.forEach(function(name) {\n                    element.classList.add(name);\n                });\n            });\n        },\n\n        /**\n         * Remove class name from nodes\n         * @param  {String} names Class names that need to be removed from nodes\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').removeClass('foo bar');\n         */\n        removeClass: function(names) {\n            names = names.split(/[ ]+/);\n\n            return this.each(function(element) {\n                names.forEach(function(name) {\n                    element.classList.remove(name);\n                });\n            });\n        },\n\n        /**\n         * Toggle class name for nodes\n         * @param  {String} names Class names that need to be toggled\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').toggleClass('foo bar');\n         */\n        toggleClass: function(names) {\n            names = names.split(/[ ]+/);\n\n            return this.each(function(element) {\n                names.forEach(function(name) {\n                    element.classList.toggle(name);\n                });\n            });\n        },\n\n        /**\n         * Check if nodes have class name\n         * @param  {String}  className Class name that need check for exists in node\n         * @return {Boolean} Returns true if ALL nodes have className and false otherwise\n         * @example\n         * Rise.$('div').hasClass('foo');\n         */\n        hasClass: function(name) {\n            if (this.count() > 0) {\n                return Array.prototype.every.call(this.get(), function(element) {\n                    return element.classList.contains(name);\n                });\n            }\n\n            return false;\n        },\n\n        /**\n         * Bind event to nodes\n         * @param  {String|Object} eventType Event type\n         * @param  {Function} handler Your function which you want execute on event\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').on('click', function(event) {\n         *     console.log(this, event);\n         * });\n         * Rise.$('div').on({\n         *     click: function(event) {\n         *         console.log(this, event);\n         *     }\n         * });\n         */\n        on: function(eventType, handler) {\n            if (Rise.Util.isObject(eventType)) {\n                Object.keys(eventType).forEach(function(key) {\n                    this.on(key, eventType[key]);\n                });\n            } else {\n                Rise.Logger.startGroup(true, 'Rise.RQuery.on() -> Binding events');\n                this.each(function(element) {\n                    Rise.Logger.log('Bind event \"%s\" to %O', eventType, element);\n                    element.addEventListener(eventType, handler, false);\n                });\n                Rise.Logger.endGroup();\n            }\n\n            return this;\n        },\n\n        /**\n         * Unbind event from nodes\n         * @param  {String} eventType Event type\n         * @param  {Function} handler Your function which you want to unsubscribe from event\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').off('click', yourFunction);\n         * Rise.$('div').off({\n         *     click: yourFunction\n         * });\n         */\n        off: function(eventType, handler) {\n            if (Rise.Util.isObject(eventType)) {\n                Object.keys(eventType).forEach(function(key) {\n                    this.off(key, eventType[key]);\n                });\n            } else {\n                Rise.Logger.startGroup(true, 'Rise.RQuery.off() -> Unbinding events');\n                this.each(function(element) {\n                    Rise.Logger.log('Unbind event \"%s\" from element %O', eventType, element);\n                    element.removeEventListener(eventType, handler, false);\n                });\n                Rise.Logger.endGroup();\n            }\n\n            return this;\n        },\n\n        /**\n         * Trigger native event for node\n         * @param  {String} eventName Name of event\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('button').trigger('click');\n         */\n        trigger: function(eventName) {\n            var event = document.createEvent('HTMLEvents');\n\n            event.initEvent(eventName, true, false);\n            this.get(0).dispatch(event);\n\n            return this;\n        },\n\n        /**\n         * Remove nodes from DOM\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').remove();\n         */\n        remove: function() {\n            return this.each(function(element) {\n                if (element && element.parentNode) {\n                    element.parentNode.removeChild(element);\n                }\n            });\n        },\n\n        /**\n         * Get or set HTML to nodes\n         * @param  {String|Rise.RQuery} [html] HTML string or Rise.RQuery instance\n         * @return {Rise.RQuery|String} Returns modified Rise.RQuery instance or HTML string\n         * @example\n         * Rise.$('div').html('test');\n         * Rise.$('div').html(); // 'test'\n         */\n        html: function(html) {\n            if (Rise.Util.isUndefined(html)) {\n                return this.get(0).innerHTML;\n            } else {\n                return this.each(function(element) {\n                    new Rise.RQuery(element).empty().append(html);\n                });\n            }\n        },\n\n        /**\n         * Append HTML before node's end\n         * @param  {String|Rise.RQuery|Element} html You can send String or exists node\n         * @return {Rise.RQuery} Returns modified Rise.RQuery instance\n         * @example\n         * Rise.$('div').append('test');\n         * Rise.$('div').append(Rise.$.create('span'));\n         * Rise.$('div').append(document.createElement('a'));\n         */\n        append: function(html) {\n            if (Rise.Util.isString(html)) {\n                this.each(function(element) {\n                    element.insertAdjacentHTML('beforeend', html);\n                });\n            } else if (html instanceof Rise.RQuery) {\n                this.each(function(element) {\n                    element.appendChild(html.get(0));\n                });\n            } else if (html instanceof Element) {\n                this.each(function(element) {\n                    element.appendChild(html);\n                });\n            }\n\n            return this;\n        },\n\n        /**\n         * Prepend HTML after node began\n         * @param  {String|Rise.RQuery|Element} html You can send String or existing Element\n         * @return {Rise.RQuery} Returns modified Rise.RQuery instance\n         * @example\n         * Rise.$('div').prepend('test');\n         * Rise.$('div').prepend(Rise.$.create('span'));\n         * Rise.$('div').prepend(document.createElement('a'));\n         */\n        prepend: function(html) {\n            if (Rise.Util.isString(html)) {\n                this.each(function(element) {\n                    element.insertAdjacentHTML('afterbegin', html);\n                });\n            } else if (html instanceof Rise.RQuery) {\n                this.each(function(element) {\n                    element.insertBefore(html.get(0), element.firstChild);\n                });\n            } else if (html instanceof Element) {\n                this.each(function(element) {\n                    element.insertBefore(html, element.firstChild);\n                });\n            }\n\n            return this;\n        },\n\n        /**\n         * Set or get inner text\n         * @param  {String} [text] Text which you want to set in elements\n         * @return {Rise.RQuery|String} Returns current Rise.RQuery instance or string with text\n         * @example\n         * Rise.$('div').text('test');\n         * Rise.$('div').text(); // 'test'\n         */\n        text: function(text) {\n            if (Rise.Util.isUndefined(text)) {\n                return this.get(0).textContent;\n            } else {\n                return this.each(function(element) {\n                    element.textContent = text;\n                });\n            }\n        },\n\n        /**\n         * Remove all child nodes from nodes\n         * @return {Rise.RQuery} Returns modified Rise.RQuery instance\n         * @example\n         * Rise.$('div').empty();\n         */\n        empty: function() {\n            return this.each(function(element) {\n                element.innerHTML = '';\n            });\n        },\n\n        /**\n         * Clone node\n         * @return {Rise.RQuery} Returns new Rise.RQuery instance with cloned nodes\n         * @example\n         * Rise.$('div').clone();\n         */\n        clone: function() {\n            var clones = [];\n\n            this.each(function(element) {\n                clones.push(element.cloneNode(true));\n            });\n\n            return new Rise.RQuery(clones);\n        }\n    }, {\n        /**\n         * Map of CSS attributes which have only numbers at value\n         * @static\n         * @type {Array}\n         */\n        cssNumbersMap: [\n            \"columnCount\",\n            \"fillOpacity\",\n            \"flexGrow\",\n            \"flexShrink\",\n            \"fontWeight\",\n            \"lineHeight\",\n            \"opacity\",\n            \"order\",\n            \"orphans\",\n            \"widows\",\n            \"zIndex\",\n            \"zoom\"\n        ]\n    });\n})(this);\n(function(global) {\n    'use strict';\n\n    global.Rise.Shadow = Rise.Class.extend({\n        /**\n         * Create new Rise.Shadow instance\n         * @constructor\n         * @param {Object} shadow Object with color, blur, offsetX, offsetY attributes or string\n         * @return {Rise.Shadow} Returns new Rise.Shadow instance\n         * @example\n         * new Rise.Shadow({\n         *     color: new Rise.Color('aqua'),\n         *     blur: 2,\n         *     offsetX: 5,\n         *     offsetY: 10\n         * });\n         */\n        init: function(shadow) {\n            shadow = shadow || {};\n\n            Rise.Logger.startGroup(true, 'Rise.Shadow -> init()');\n            Rise.Logger.log('Trying to parse options -> %O', shadow);\n\n            this.color = new Rise.Color(shadow.color) || new Rise.Color('black');\n            this.blur = shadow.blur || 0;\n            this.offsetX = shadow.offsetX || 0;\n            this.offsetY = shadow.offsetY || 0;\n\n            Rise.Logger.log('Instantiated new Rise.Shadow -> %O', this);\n            Rise.Logger.endGroup();\n\n            return this;\n        },\n\n        /**\n         * Set color\n         * @param {Rise.Color|String|Object} color Color that you want set to shadow\n         * @return {Rise.Shadow} Returns current Rise.Shadow instance\n         * @example\n         * new Rise.Shadow().setColor(new Rise.Color('aqua'));\n         */\n        setColor: function(color) {\n            this.color = new Rise.Color(color);\n            return this;\n        },\n\n        /**\n         * Get color\n         * @return {Rise.Color} Returns Rise.Color instance\n         * @example\n         * new Rise.Shadow().getColor();\n         */\n        getColor: function() {\n            return this.color;\n        },\n\n        /**\n         * Set blur\n         * @param {Integer} blur Blur in integer\n         * @return {Rise.Shadow} Returns current Rise.Shadow instance\n         * @example\n         * new Rise.Shadow().setBlur(3);\n         */\n        setBlur: function(blur) {\n            this.blur = blur;\n            return this;\n        },\n\n        /**\n         * Get blur\n         * @return {Integer} Returns current value of blur\n         * @example\n         * new Rise.Shadow().getBlur();\n         */\n        getBlur: function() {\n            return this.blur;\n        },\n\n        /**\n         * Set offsetX\n         * @param {Integer} x OffsetX\n         * @return {Rise.Shadow} Returns current Rise.Shadow instance\n         * @example\n         * new Rise.Shadow().setOffsetX(5);\n         */\n        setOffsetX: function(x) {\n            this.offsetX = x;\n            return this;\n        },\n\n        /**\n         * Get offsetX\n         * @return {Integer} Returns offsetX\n         * @example\n         * new Rise.Shadow().getOffsetX();\n         */\n        getOffsetX: function() {\n            return this.offsetX;\n        },\n\n        /**\n         * Set offsetY\n         * @param {Integer} y OffsetY\n         * @return {Rise.Shadow} Returns Rise.Shadow instance\n         * @example\n         * new Rise.Shadow().setOffsetY(5);\n         */\n        setOffsetY: function(y) {\n            this.offsetY = y;\n            return this;\n        },\n\n        /**\n         * Get offsetY\n         * @return {Integer} Returns offsetY\n         * @example\n         * new Rise.Shadow().getOffsetY();\n         */\n        getOffsetY: function() {\n            return this.offsetY;\n        },\n\n        /**\n         * Returns CSS string\n         * @return {String} Returns CSS shadow string representation\n         * @example\n         * new Rise.Shadow().toString();\n         */\n        toString: function() {\n            return [\n                this.offsetX,\n                this.offsetY,\n                this.blur,\n                this.color.toRgbString()\n            ].join('px ');\n        }\n    }, {\n        /**\n         * Regex that match shadow offsetX, offsetY and blur\n         * @static\n         * @example\n         * 2px 2px 10px rgba(0, 0, 0, 0.2)\n         * rgb(0,255,0) 2px 2px\n         */\n        shadowRegex: /(?:\\s|^)(-?\\d+(?:px)?(?:\\s?|$))?(-?\\d+(?:px)?(?:\\s?|$))?(\\d+(?:px)?)?(?:\\s?|$)(?:$|\\s)/,\n\n        /**\n         * Create Rise.Shadow from shadow string representation\n         * @static\n         * @param {String} shadow Shadow value that need to parse\n         * @return {Rise.Shadow} Rise.Shadow instance\n         * @example\n         * var shadow = Rise.Shadow.fromString('2px 2px 10px rgba(0, 0, 0, 0.2)');\n         */\n        fromString: function(shadow) {\n            shadow = shadow.trim();\n\n            var offsetsAndBlur = shadowRegex.exec(shadow) || [],\n                color = shadow.replace(shadowRegex, '') || 'rgb(0,0,0)';\n\n            return new Rise.Shadow({\n                color: new Rise.Color(color),\n                blur: parseInt(offsetsAndBlur[3], 10) || 0,\n                offsetX: parseInt(offsetsAndBlur[1], 10) || 0,\n                offsetY: parseInt(offsetsAndBlur[2], 10) || 0\n            });\n        }\n    });\n})(this);\n(function(global) {\n    'use strict';\n\n    /**\n     * Util object\n     * @static\n     * @type {Object}\n     */\n    var Util = {\n        /**\n         * Extend object\n         * @param  {Object} destination Destination object will be also modified\n         * @param  {Object} source Source objects\n         * @return {Object} Returns extended object\n         * @static\n         * @example\n         * Rise.Util.extend({}, obj1, obj2, obj3);\n         */\n        extend: function() {\n            /**\n             * Copy source object to destination object\n             * @this {Rise.Util}\n             * @param  {String} key Current key of current source object\n             * @private\n             */\n            var copyObject = function(key) {\n                if (source[key] && source[key].constructor && source[key].constructor === Object) {\n                    destination[key] = destination[key] || {};\n                    this.extend(destination[key], source[key]);\n                } else {\n                    destination[key] = source[key];\n                }\n            }.bind(this);\n\n            var destination = arguments[0],\n                source;\n\n            for (var i = 1; i < arguments.length; i++) {\n                source = arguments[i];\n                Object.keys(source).forEach(copyObject);\n            }\n\n            return destination;\n        },\n\n        /**\n         * Camelize string\n         * @param  {String} string String which need to camelize\n         * @return {String} Returns camelized string\n         * @static\n         * @example\n         * Rise.Util.getCamelizedString('font-style'); // fontStyle\n         */\n        getCamelizedString: function(string) {\n            return string.replace(/\\-(\\w)/g, function(string, letter) {\n                return letter.toUpperCase();\n            });\n        },\n\n        /**\n         * Get dashed string\n         * @param  {String} string String which need to make dashed\n         * @return {String} Returns dashed string\n         * @static\n         * @example\n         * Rise.Util.getDashedString('borderRadius'); // border-radius\n         */\n        getDashedString: function(string) {\n            return string.replace(/([A-Z])/g, function(string) {\n                return '-' + string.toLowerCase();\n            });\n        },\n\n        /**\n         * Get random string\n         * @param  {String} prepend   String which prepends to random string\n         * @param  {String} append    String which appends to random string\n         * @param  {String} separator String which separate prepender and appender\n         * @return {String}           Returns random generated string\n         * @static\n         * @example\n         * Rise.Util.getRandomString('preffix', 'suffix', 'separator');\n         */\n        getRandomString: function(prepend, append, separator) {\n            prepend = this.isUndefined(prepend) ? '' : prepend;\n            append = this.isUndefined(append) ? '' : append;\n            separator = this.isUndefined(separator) ? '' : separator;\n\n            return [\n                prepend,\n                Math.random().toString(36).slice(2),\n                append\n            ].join(separator);\n        },\n\n        /**\n         * Get type of variable\n         * @static\n         * @param  {Mixed} value Variable that might be checked\n         * @return {String}      Returns string representation of type\n         */\n        getType: function(value) {\n            return Object.prototype.toString.call(value).replace(/^\\[object (.+)\\]$/, '$1').toLowerCase();\n        },\n\n        /**\n         * Check if this object\n         * @static\n         * @param  {Mixed}  object Value that might be checked\n         * @return {Boolean}       Returns true if object\n         */\n        isObject: function(object) {\n            return this.getType(object) == 'object';\n        },\n\n        /**\n         * Check if this is number\n         * @static\n         * @param  {Mixed}  number Value that might be checked\n         * @return {Boolean}       Returns true if number\n         */\n        isNumber: function(number) {\n            return (\n                this.getType(number) == 'number' &&\n                !isNaN(number) &&\n                isFinite(number)\n            );\n        },\n\n        /**\n         * Check if this array\n         * @static\n         * @param  {Mixed}  array Value that might be checked\n         * @return {Boolean}      Returns true if array\n         */\n        isArray: function(array) {\n            return this.getType(array) == 'array';\n        },\n\n        /**\n         * Check if this is boolean\n         * @static\n         * @param  {Mixed}  bool Value that might be checked\n         * @return {Boolean}      Returns true if boolean\n         */\n        isBoolean: function(bool) {\n            return this.getType(bool) == 'boolean';\n        },\n\n        /**\n         * Check if this function\n         * @static\n         * @param  {Mixed}  method Value that might be checked\n         * @return {Boolean}       Returns true if function\n         */\n        isFunction: function(method) {\n            return this.getType(method) == 'function';\n        },\n\n        /**\n         * Check if this is string\n         * @static\n         * @param  {Mixed}  string Value that might be checked\n         * @return {Boolean}       Returns true if string\n         */\n        isString: function(string) {\n            return this.getType(string) == 'string';\n        },\n\n        /**\n         * Check if this is undefined\n         * @static\n         * @param  {Mixed}  value Value that might be checked\n         * @return {Boolean}       Returns true if undefined\n         */\n        isUndefined: function(value) {\n            return (\n                this.getType(value) == 'undefined' ||\n                this.getType(value) == 'domwindow'\n            );\n        }\n    };\n\n    global.Rise.Util = Util;\n\n})(this);"],"sourceRoot":"/source/"}