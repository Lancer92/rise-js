{"version":3,"file":"rise.min.js","sources":["rise.min.js"],"names":["global","Rise","this","VERSION","prototype","Object","create","getVersion","copyProperties","source","target","parent","keys","forEach","key","test","wrapMethod","method","parentMethod","backup","_super","apply","arguments","Class","extend","staticProperties","mixins","Constructor","init","constructor","i","length","isAllowedLevel","level","currentLogLevel","prependLoggerInfo","string","Date","toLocaleTimeString","join","invokeConsole","type","args","Array","slice","call","console","Util","isFunction","printWelcomeMessage","window","chrome","log","addEventListener","Logger","VERBOSE","DEBUG","ERROR","WARNING","INFO","OFF","setLevel","getLevel","debug","error","warning","info","startGroup","endGroup","startTime","endTime","getType","value","toString","replace","toLowerCase","isObject","object","isNumber","number","isNaN","isFinite","isArray","array","isBoolean","bool","isString","getRandomString","prepend","append","separator","undefined","Math","random"],"mappings":"CAAA,SAAUA,GAYN,QAASC,KACL,MAAOC,MAPX,GAAIC,GAAU,gBAUdF,GAAKG,UAAYC,OAAOC,WAOxBL,EAAKM,WAAa,WACd,MAAOJ,IAGXH,EAAOC,KAAOA,GAEfC,MACH,SAAUF,GAQN,QAASQ,GAAeC,EAAQC,EAAQC,GACpCN,OAAOO,KAAKH,GAAQI,QAAQ,SAASC,GAE7BJ,EAAOI,GADe,kBAAfL,GAAOK,IAA4C,kBAAfH,GAAOG,IAAsB,aAAaC,KAAKN,EAAOK,IACnFE,EAAWP,EAAOK,GAAMH,EAAOG,IAE/BL,EAAOK,KAYjC,QAASE,GAAWC,EAAQC,GACxB,MAAO,YACH,GAAIC,GAASjB,KAAKkB,MAClBlB,MAAKkB,OAASF,CAEd,KACI,MAAOD,GAAOI,MAAMnB,KAAMoB,WAC5B,QACEpB,KAAKkB,OAASD,IAU1B,QAASI,MAeTA,EAAMC,OAAS,SAASpB,EAAWqB,EAAkBC,GAKjD,QAASC,KACL,MAAOzB,MAAK0B,MAAQ1B,KAAK0B,KAAKP,MAAMnB,KAAMoB,WAL9ClB,EAAYA,MACZqB,EAAmBA,MACnBC,EAASA,MAMTC,EAAYvB,UAAYC,OAAOC,OAAOJ,KAAKE,WAC3CuB,EAAYvB,UAAUyB,YAAcF,EACpCA,EAAYH,OAASD,EAAMC,OAE3BhB,EAAeiB,EAAkBE,EAAazB,MAC9CM,EAAeJ,EAAWuB,EAAYvB,UAAWF,KAAKE,UACtD,KAAK,GAAI0B,GAAIJ,EAAOK,OAAS,EAAGD,GAAK,EAAGA,IACpCtB,EAAekB,EAAOI,GAAIH,EAAYvB,UAAWF,KAAKE,UAG1D,OAAOuB,IAGX3B,EAAOC,KAAKsB,MAAQA,GAErBrB,MACH,SAAUF,GAcN,QAASgC,GAAeC,GACpB,MAAOA,IAASC,EASpB,QAASC,GAAkBC,GACvB,OAAQ,QAAQ,GAAIC,OAAOC,qBAAsBF,GAAQG,KAAK,QAWlE,QAASC,GAAcC,EAAMC,GACzBA,EAAOC,MAAMvC,UAAUwC,MAAMC,KAAKH,EAAM,GAEpCI,QAAQL,IAASxC,KAAK8C,KAAKC,WAAWF,QAAQL,MAC9CC,EAAK,GAAKP,EAAkBO,EAAK,GAAKA,EAAK,GAAK,IAChDI,QAAQL,GAAMpB,MAAMyB,QAASJ,IAQrC,QAASO,KACDC,OAAOC,OACPL,QAAQM,IAAI/B,MAAMyB,SACd,kBAAoB7C,KAAKM,aAAe,YACxC,uCACA,uCACA,uDACA,uCACA,uCACA,yCAGJuC,QAAQM,IAAI,SAAWnD,KAAKM,cAvDpC,GAAI2B,GAAkB,CA2DtBgB,QAAOG,iBAAiB,mBAAoBJ,EAE5C,IAAIK,IAMAC,QAAS,EAOTC,MAAO,EAOPC,MAAO,EAOPC,QAAS,EAOTC,KAAM,EAONC,IAAK,IAULC,SAAU,SAAS5B,GAEf,MADAC,GAAkBD,EACX/B,MAQX4D,SAAU,WACN,MAAO5B,IAQXkB,IAAK,WAKD,MAJIpB,GAAe9B,KAAKqD,UACpBf,EAAc,MAAOlB,WAGlBpB,MAQX6D,MAAO,WAKH,MAJI/B,GAAe9B,KAAKsD,QACpBhB,EAAc,QAASlB,WAGpBpB,MAQX8D,MAAO,WAKH,MAJIhC,GAAe9B,KAAKuD,QACpBjB,EAAc,QAASlB,WAGpBpB,MAQX+D,QAAS,WAKL,MAJIjC,GAAe9B,KAAKwD,UACpBlB,EAAc,OAAQlB,WAGnBpB,MAQXgE,KAAM,WAKF,MAJIlC,GAAe9B,KAAKyD,OACpBnB,EAAc,OAAQlB,WAGnBpB,MAQXiE,WAAY,WAKR,MAJInC,GAAe9B,KAAKqD,UACpBf,EAAc,QAASlB,WAGpBpB,MAQXkE,SAAU,WAKN,MAJIpC,GAAe9B,KAAKqD,UACpBf,EAAc,WAAYlB,WAGvBpB,MAQXmE,UAAW,WAKP,MAJIrC,GAAe9B,KAAKqD,UACpBf,EAAc,OAAQlB,WAGnBpB,MAQXoE,QAAS,WAKL,MAJItC,GAAe9B,KAAKqD,UACpBf,EAAc,UAAWlB,WAGtBpB,MAIfF,GAAOC,KAAKqD,OAASA,GAEtBpD,MACH,SAAUF,GACN,GAAI+C,IAMAwB,QAAS,SAASC,GACd,MAAOnE,QAAOD,UAAUqE,SAAS5B,KAAK2B,GAAOE,QAAQ,oBAAqB,MAAMC,eAQpFC,SAAU,SAASC,GACf,MAA+B,UAAxB3E,KAAKqE,QAAQM,IAQxBC,SAAU,SAASC,GACf,MAC4B,UAAxB7E,KAAKqE,QAAQQ,KACZC,MAAMD,IACPE,SAASF,IASjBG,QAAS,SAASC,GACd,MAA8B,SAAvBjF,KAAKqE,QAAQY,IAQxBC,UAAW,SAASC,GAChB,MAA6B,WAAtBnF,KAAKqE,QAAQc,IAQxBrC,WAAY,SAAS/B,GACjB,MAA+B,YAAxBf,KAAKqE,QAAQtD,IAQxBqE,SAAU,SAASlD,GACf,MAA+B,UAAxBlC,KAAKqE,QAAQnC,IAWxBmD,gBAAiB,SAASC,EAASC,EAAQC,GAKvC,MAJAF,GAAsBG,SAAZH,EAAwB,GAAKA,EACvCC,EAAoBE,SAAXF,EAAuB,GAAKA,EACrCC,EAA0BC,SAAdD,EAA0B,GAAKA,GAEnCF,EAASI,KAAKC,SAASpB,SAAS,IAAI7B,MAAM,GAAI6C,GAAQlD,KAAKmD,IAI3E1F,GAAOC,KAAK8C,KAAOA,GAEpB7C","sourcesContent":["(function(global) {\n    /**\n     * Current version of Rise\n     * @type {String}\n     * @private\n     */\n    var VERSION = '0.0.1 -> alpha';\n\n    /**\n     * Rise constuctor\n     * @constructor\n     */\n    function Rise() {\n        return this;\n    }\n\n    Rise.prototype = Object.create({});\n\n    /**\n     * Get current version\n     * @return {String} Returns current version\n     * @private\n     */\n    Rise.getVersion = function() {\n        return VERSION;\n    };\n\n    global.Rise = Rise;\n\n})(this);\n(function(global) {\n    /**\n     * Copy properties from parent to target object\n     * @param  {Object} source Object from where properties will be copied\n     * @param  {Object} target Object to where properties will copy\n     * @param  {Object} parent Parent object\n     * @private\n     */\n    function copyProperties(source, target, parent) {\n        Object.keys(source).forEach(function(key) {\n            if (typeof source[key] == \"function\" && typeof parent[key] == \"function\" && /\\b_super\\b/.test(source[key])) {\n                target[key] = wrapMethod(source[key], parent[key]);\n            } else {\n                target[key] = source[key];\n            }\n        });\n    }\n\n    /**\n     * Wrap method with parent method.\n     * Useful for create this._super() in subclasses.\n     * @param  {Function} method       Method that need to be wrapped\n     * @param  {Function} parentMethod Parent method in other works - this._super();\n     * @return {Function}              Returns wrapped function\n     */\n    function wrapMethod(method, parentMethod) {\n        return function() {\n            var backup = this._super;\n            this._super = parentMethod;\n\n            try {\n                return method.apply(this, arguments);\n            } finally {\n                this._super = backup;\n            }\n        };\n    }\n\n    /**\n     * Empty function (interface)\n     * @member Rise.Class\n     * @private\n     */\n    function Class() {}\n\n    /**\n     * Create new Class or extend exists\n     * @param {Array} [mixins] Optional parameter. Array of mixins which need to inject in new Class\n     * @param {Object} prototype Prototype object for new Class\n     * @param {Object} staticProperties Object with static properties for new Class. Will send in Object.defineProperties.\n     * @return {Object} Returns new Class\n     * @member Rise.Class\n     *\n     * @example\n     * Rise.Class.extend([prototype])\n     * Rise.Class.extend([prototype], [staticProperties])\n     * Rise.Class.extend([prototype], [staticProperties], [mixins])\n     */\n    Class.extend = function(prototype, staticProperties, mixins) {\n        prototype = prototype || {};\n        staticProperties = staticProperties || {};\n        mixins = mixins || [];\n\n        function Constructor() {\n            return this.init && this.init.apply(this, arguments);\n        }\n\n        Constructor.prototype = Object.create(this.prototype);\n        Constructor.prototype.constructor = Constructor;\n        Constructor.extend = Class.extend;\n\n        copyProperties(staticProperties, Constructor, this);\n        copyProperties(prototype, Constructor.prototype, this.prototype);\n        for (var i = mixins.length - 1; i >= 0; i--) {\n            copyProperties(mixins[i], Constructor.prototype, this.prototype);\n        }\n\n        return Constructor;\n    };\n\n    global.Rise.Class = Class;\n\n})(this);\n(function(global) {\n    /**\n     * Current log level\n     * @type {Number}\n     * @private\n     */\n    var currentLogLevel = 3;\n\n    /**\n     * Check if level is allow to print message\n     * @param  {Integer}  level Level that need to check\n     * @return {Boolean}        Returns true if this level can be printed out\n     * @private\n     */\n    function isAllowedLevel(level) {\n        return level >= currentLogLevel;\n    }\n\n    /**\n     * Prepend message to every log message\n     * @param  {String} string Message to what will be prepended header message\n     * @return {String}        Returns resulting strint\n     * @private\n     */\n    function prependLoggerInfo(string) {\n        return ['Rise', new Date().toLocaleTimeString(), string].join(' -> ');\n    }\n\n    /**\n     * Invoke console methods\n     * @param  {String} type Type of console that need to be invoked\n     * @param  {Array} args Array of arguments to console method\n     * @private\n     * @example\n     * invokeConsole('log', ['test', 'test2']); // test test2\n     */\n    function invokeConsole(type, args) {\n        args = Array.prototype.slice.call(args, 0);\n\n        if (console[type] && Rise.Util.isFunction(console[type])) {\n            args[0] = prependLoggerInfo(args[0] ? args[0] : '');\n            console[type].apply(console, args);\n        }\n    }\n\n    /**\n     * Print welcome message to console\n     * @private\n     */\n    function printWelcomeMessage() {\n        if (window.chrome) {\n            console.log.apply(console, [\n                '%c %c %c Rise v' + Rise.getVersion() + ' %c %c %c',\n                'background: #0E173E; font-size: 8pt;',\n                'background: #020C25; font-size: 9pt;',\n                'color: #FFFFFF; background: #0D0B0E; font-size: 10pt',\n                'background: #020C25; font-size: 9pt;',\n                'background: #0E173E; font-size: 8pt;',\n                'background: #0E173E; font-size: 8pt;'\n            ]);\n        } else {\n            console.log('Rise v' + Rise.getVersion());\n        }\n    }\n\n    window.addEventListener('DOMContentLoaded', printWelcomeMessage);\n\n    var Logger = {\n        /**\n         * Allow print out all messages\n         * @static\n         * @type {Number}\n         */\n        VERBOSE: 1,\n\n        /**\n         * Allow print out only .debug(), .error(), .warn(), .info()\n         * @static\n         * @type {Number}\n         */\n        DEBUG: 2,\n\n        /**\n         * Allow print out only .error(), .warn(), .info()\n         * @static\n         * @type {Number}\n         */\n        ERROR: 3,\n\n        /**\n         * Allow print out only .warn() and .info()\n         * @static\n         * @type {Number}\n         */\n        WARNING: 4,\n\n        /**\n         * Allow print out only .info()\n         * @static\n         * @type {Number}\n         */\n        INFO: 5,\n\n        /**\n         * Disable all logs\n         * @static\n         * @type {Number}\n         */\n        OFF: 100,\n\n        /**\n         * Set current level for logger\n         * @param {Integer} level Predefined constant in Rise.Logger\n         * @return {Rise.Logger}\n         * @static\n         * @example\n         * Rise.Logger.setLevel(Rise.Logger.VERBOSE);\n         */\n        setLevel: function(level) {\n            currentLogLevel = level;\n            return this;\n        },\n\n        /**\n         * Get current log level\n         * @static\n         * @return {Integer} Returns integer value of current log level\n         */\n        getLevel: function() {\n            return currentLogLevel;\n        },\n\n        /**\n         * Log message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        log: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('log', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Debug message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        debug: function() {\n            if (isAllowedLevel(this.DEBUG)) {\n                invokeConsole('debug', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Error message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        error: function() {\n            if (isAllowedLevel(this.ERROR)) {\n                invokeConsole('error', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Warning message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        warning: function() {\n            if (isAllowedLevel(this.WARNING)) {\n                invokeConsole('warn', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Info message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        info: function() {\n            if (isAllowedLevel(this.INFO)) {\n                invokeConsole('info', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Start new group in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        startGroup: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('group', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * End current group in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        endGroup: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('groupEnd', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Start profiling time in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        startTime: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('time', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * End profiling time in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        endTime: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('timeEnd', arguments);\n            }\n\n            return this;\n        }\n    };\n\n    global.Rise.Logger = Logger;\n\n})(this);\n(function(global) {\n    var Util = {\n        /**\n         * Get type of variable\n         * @param  {Mixed} value Variable that might be checked\n         * @return {String}       Returns string representation of type\n         */\n        getType: function(value) {\n            return Object.prototype.toString.call(value).replace(/^\\[object (.+)\\]$/, '$1').toLowerCase();\n        },\n\n        /**\n         * Check if this object\n         * @param  {Mixed}  object Value that might be checked\n         * @return {Boolean}       Returns true if object\n         */\n        isObject: function(object) {\n            return this.getType(object) == 'object';\n        },\n\n        /**\n         * Check if this is number\n         * @param  {Mixed}  number Value that might be checked\n         * @return {Boolean}       Returns true if number\n         */\n        isNumber: function(number) {\n            return (\n                this.getType(number) == 'number' &&\n                !isNaN(number) &&\n                isFinite(number)\n            );\n        },\n\n        /**\n         * Check if this array\n         * @param  {Mixed}  array Value that might be checked\n         * @return {Boolean}      Returns true if array\n         */\n        isArray: function(array) {\n            return this.getType(array) == 'array';\n        },\n\n        /**\n         * Check if this is boolean\n         * @param  {Mixed}  bool Value that might be checked\n         * @return {Boolean}      Returns true if boolean\n         */\n        isBoolean: function(bool) {\n            return this.getType(bool) == 'boolean';\n        },\n\n        /**\n         * Check if this function\n         * @param  {Mixed}  method Value that might be checked\n         * @return {Boolean}       Returns true if function\n         */\n        isFunction: function(method) {\n            return this.getType(method) == 'function';\n        },\n\n        /**\n         * Check if this is string\n         * @param  {Mixed}  string Value that might be checked\n         * @return {Boolean}       Returns true if string\n         */\n        isString: function(string) {\n            return this.getType(string) == 'string';\n        },\n\n        /**\n         * Get random string\n         * @param  {String} prepend   String which prepends to random string\n         * @param  {String} append    String which appends to random string\n         * @param  {String} separator String which separate prepender and appender\n         * @return {String}           Returns random generated string\n         * @memberOf Rise.Util\n         */\n        getRandomString: function(prepend, append, separator) {\n            prepend = prepend === undefined ? '' : prepend;\n            append = append === undefined ? '' : append;\n            separator = separator === undefined ? '' : separator;\n\n            return [prepend, Math.random().toString(36).slice(2), append].join(separator);\n        }\n    };\n\n    global.Rise.Util = Util;\n\n})(this);"],"sourceRoot":"/source/"}