{"version":3,"file":"rise.min.js","sources":["rise.min.js"],"names":["isCssValueValid","value","cssUnitsMap","some","unit","lastIndexOf","isFontStyleValid","fontStyleMap","indexOf","isFontVariantValid","fontVariantMap","isFontWeightValid","fontWeightMap","isFontSizeValid","fontSizeMap","isFontLineHeightValid","isFontFamilyValid","isFontObjectValid","font","getStyle","getVariant","getWeight","getSize","getLineHeight","getFamily","stringToObject","Rise","Logger","warning","fromNodeElementToObject","element","style","window","getComputedStyle","getPropertyValue","variant","weight","size","lineHeight","family","global","this","VERSION","prototype","Object","create","getVersion","copyProperties","source","target","parent","keys","forEach","key","test","wrapMethod","method","parentMethod","backup","_super","apply","arguments","Class","extend","staticProperties","mixins","Constructor","init","constructor","i","length","Font","options","callee","newObject","Util","getType","$","get","Element","startGroup","log","valid","endGroup","isValid","setStyle","setVariant","setWeight","setSize","setLineHeight","setFamily","toString","join","isAllowedLevel","level","currentLogLevel","prependLoggerInfo","string","Date","toLocaleTimeString","invokeConsole","type","args","Array","slice","call","console","isFunction","chrome","VERBOSE","DEBUG","ERROR","WARNING","INFO","OFF","setLevel","getLevel","debug","error","info","startTime","endTime","replace","toLowerCase","isObject","object","isNumber","number","isNaN","isFinite","isArray","array","isBoolean","bool","isString","getRandomString","prepend","append","separator","undefined","Math","random"],"mappings":"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","sourcesContent":["(function(global) {\n    /**\n     * Current version of Rise\n     * @type {String}\n     * @private\n     */\n    var VERSION = '0.0.1 -> alpha';\n\n    /**\n     * Rise constuctor\n     * @constructor\n     */\n    function Rise() {\n        return this;\n    }\n\n    Rise.prototype = Object.create({});\n\n    /**\n     * Get current version\n     * @return {String} Returns current version\n     * @private\n     */\n    Rise.getVersion = function() {\n        return VERSION;\n    };\n\n    global.Rise = Rise;\n\n})(this);\n(function(global) {\n    /**\n     * Copy properties from parent to target object\n     * @param  {Object} source Object from where properties will be copied\n     * @param  {Object} target Object to where properties will copy\n     * @param  {Object} parent Parent object\n     * @private\n     */\n    function copyProperties(source, target, parent) {\n        Object.keys(source).forEach(function(key) {\n            if (typeof source[key] == \"function\" && typeof parent[key] == \"function\" && /\\b_super\\b/.test(source[key])) {\n                target[key] = wrapMethod(source[key], parent[key]);\n            } else {\n                target[key] = source[key];\n            }\n        });\n    }\n\n    /**\n     * Wrap method with parent method.\n     * Useful for create this._super() in subclasses.\n     * @param  {Function} method       Method that need to be wrapped\n     * @param  {Function} parentMethod Parent method in other works - this._super();\n     * @return {Function}              Returns wrapped function\n     */\n    function wrapMethod(method, parentMethod) {\n        return function() {\n            var backup = this._super;\n            this._super = parentMethod;\n\n            try {\n                return method.apply(this, arguments);\n            } finally {\n                this._super = backup;\n            }\n        };\n    }\n\n    /**\n     * Empty function (interface)\n     * @member Rise.Class\n     * @private\n     */\n    function Class() {}\n\n    /**\n     * Create new Class or extend exists\n     * @param {Array} [mixins] Optional parameter. Array of mixins which need to inject in new Class\n     * @param {Object} prototype Prototype object for new Class\n     * @param {Object} staticProperties Object with static properties for new Class. Will send in Object.defineProperties.\n     * @return {Object} Returns new Class\n     * @member Rise.Class\n     *\n     * @example\n     * Rise.Class.extend([prototype])\n     * Rise.Class.extend([prototype], [staticProperties])\n     * Rise.Class.extend([prototype], [staticProperties], [mixins])\n     */\n    Class.extend = function(prototype, staticProperties, mixins) {\n        prototype = prototype || {};\n        staticProperties = staticProperties || {};\n        mixins = mixins || [];\n\n        function Constructor() {\n            return this.init && this.init.apply(this, arguments);\n        }\n\n        Constructor.prototype = Object.create(this.prototype);\n        Constructor.prototype.constructor = Constructor;\n        Constructor.extend = Class.extend;\n\n        copyProperties(staticProperties, Constructor, this);\n        copyProperties(prototype, Constructor.prototype, this.prototype);\n        for (var i = mixins.length - 1; i >= 0; i--) {\n            copyProperties(mixins[i], Constructor.prototype, this.prototype);\n        }\n\n        return Constructor;\n    };\n\n    global.Rise.Class = Class;\n\n})(this);\nRise.Font = Rise.Class.extend({\n    init: function() {\n        options = options || {};\n\n        if (!(this instanceof arguments.callee)) {\n            var callee = arguments.callee,\n                newObject = Object.create(callee.prototype);\n            callee.apply(newObject, callee.arguments);\n            return newObject;\n        } else if (Rise.Util.getType(options) == 'string') {\n            options = stringToObject(options);\n        } else if (options instanceof Rise.$) {\n            options = fromNodeElementToObject(options.get(0));\n        } else if (options instanceof Element) {\n            options = fromNodeElementToObject(options);\n        } else {\n            Rise.Logger.warning('Rise.Font -> Options %O not valid', options);\n        }\n\n        Rise.Logger.startGroup('Rise.Font -> Start parsing');\n        Rise.Logger.log('Trying to parse %O', options);\n\n        this.valid = true;\n        this.style = options.style || 'normal';\n        this.variant = options.variant || 'normal';\n        this.weight = options.weight || 'normal';\n        this.size = options.size || 'medium';\n        this.lineHeight = options.lineHeight || 'normal';\n        this.family = options.family || 'serif';\n\n        if (!isFontObjectValid(this)) {\n            this.valid = false;\n            Rise.Logger.warning('Font %O not parsed, reset to defaults', options);\n        }\n\n        Rise.Logger.log('Font %O parsed to Rise.Font %O', options, this);\n        Rise.Logger.endGroup();\n\n        return this;\n    },\n\n    isValid: function() {\n        return this.valid;\n    },\n\n    getStyle: function() {\n        return this.style;\n    },\n\n    setStyle: function(style) {\n        if (isFontStyleValid(style)) {\n            this.style = style;\n        }\n\n        return this;\n    },\n\n    getVariant: function() {\n        return this.variant;\n    },\n\n    setVariant: function(variant) {\n        if (isFontVariantValid(variant)) {\n            this.variant = variant;\n        }\n\n        return this;\n    },\n\n    getWeight: function() {\n        return this.weight;\n    },\n\n    setWeight: function(weight) {\n        if (isFontWeightValid(weight)) {\n            this.weight = weight;\n        }\n\n        return this;\n    },\n\n    getSize: function() {\n        return this.size;\n    },\n\n    setSize: function(size) {\n        if (isFontSizeValid(size)) {\n            this.size = size;\n        }\n\n        return this;\n    },\n\n    getLineHeight: function() {\n        return this.lineHeight;\n    },\n\n    setLineHeight: function(lineHeight) {\n        if (isFontLineHeightValid(lineHeight)) {\n            this.lineHeight = lineHeight;\n        }\n\n        return this;\n    },\n\n    getFamily: function() {\n        return this.family;\n    },\n\n    setFamily: function(family) {\n        if (isFontFamilyValid(family)) {\n            this.family = family;\n        }\n\n        return this;\n    },\n\n    toString: function() {\n        return (\n            [\n                this.style,\n                this.variant,\n                this.weight,\n                this.size,\n                '/' + this.lineHeight,\n                this.family\n            ].join(' ')\n        );\n    }\n});\n\n/**\n * Map of valid CSS units\n * @type {Array}\n * @private\n */\nvar cssUnitsMap = ['em', 'ex', 'pt', 'px', '%'];\n\n/**\n * Map of valid font styles\n * @type {Array}\n * @private\n */\nvar fontStyleMap = ['normal', 'italic', 'oblique', 'inherit'];\n\n/**\n * Map of valid font variants\n * @type {Array}\n * @private\n */\nvar fontVariantMap = ['normal', 'small-caps', 'inherit'];\n\n/**\n * Map of valid font weight\n * @type {Array}\n * @private\n */\nvar fontWeightMap = ['bold', 'bolder', 'lighter', 'normal', '100', '200', '300', '400', '500', '600', '700', '800', '900'];\n\n/**\n * Map of valid font size constants\n * @type {Array}\n * @private\n */\nvar fontSizeMap = ['xx-small', 'x-small', 'smaller', 'small', 'medium', 'large', 'larger', 'x-large', 'xx-large'];\n\n/**\n * Check if value ends on valid css unit\n * @param  {String} value Value that need to check\n * @return {Boolean} True if valid\n * @private\n */\nfunction isCssValueValid(value) {\n    return cssUnitsMap.some(function(unit) {\n        return value.lastIndexOf(unit) != -1;\n    });\n}\n\n/**\n * Check if this value is valid font-style attribute\n * @param  {String} value Value that need to check\n * @return {Boolean} If value valid then true\n * @private\n */\nfunction isFontStyleValid(value) {\n    return fontStyleMap.indexOf(value) != -1;\n}\n\n/**\n * Check if value is valid font-variant attribute\n * @param  {String} value Value that need to check\n * @return {Boolean} True if value is valid\n * @private\n */\nfunction isFontVariantValid(value) {\n    return fontVariantMap.indexOf(value) != -1;\n}\n\n/**\n * Check if provided value it's valid font-weight attribute\n * @param  {String} value Font weight value that need to check\n * @return {Boolean} True if valid\n * @private\n */\nfunction isFontWeightValid(value) {\n    return fontWeightMap.indexOf(value) != -1;\n}\n\n/**\n * Check if provided value it's valid font size attribute\n * @param  {String} value Font size that need to check\n * @return {Boolean} True if valid\n * @private\n */\nfunction isFontSizeValid(value) {\n    return (\n        fontSizeMap.indexOf(value) != -1 ||\n        isCssValueValid(value)\n    );\n}\n\n/**\n * Check if provided value it's valid font line-height attribute\n * @param  {String} value Value that need to be checked\n * @return {Boolean} True if valid\n * @private\n */\nfunction isFontLineHeightValid(value) {\n    return isCssValueValid(value);\n}\n\n/**\n * Check if provided value it's valid font-family attribute\n * @param  {String} value Value that need to be checked\n * @return {Boolean} True if valid\n * @private\n */\nfunction isFontFamilyValid(value) {\n    // TODO: implement\n    return true;\n}\n\n/**\n * Check if created Rise.Font object is valid\n * @param {Rise.Font} font Font object that need to be checked\n * @return {Boolean} True if valid\n * @private\n */\nfunction isFontObjectValid(font) {\n    // FIXME: sometimes it returns false on valid objects\n    return (\n        isFontStyleValid(font.getStyle()) &&\n        isFontVariantValid(font.getVariant()) &&\n        isFontWeightValid(font.getWeight()) &&\n        isFontSizeValid(font.getSize()) &&\n        isFontLineHeightValid(font.getLineHeight()) &&\n        isFontFamilyValid(font.getFamily())\n    );\n}\n\n/**\n * Parse font string and return object with corresponding values\n * @param  {String} font Font string that need to parse\n * @return {Object} Object with font values\n * @private\n */\nfunction stringToObject(font) {\n    // TODO: implement\n    Rise.Logger.warning('Rise.Font -> stringToObject() not realized yet');\n    return {};\n}\n\n/**\n * Parse node Element for font properties and get font object\n * @param  {Element|Rise.$} element Node Element from where you want get font properties\n * @return {Rise.Font}\n * @private\n */\nfunction fromNodeElementToObject(element) {\n    var style = window.getComputedStyle(element, null);\n\n    return {\n        style: style.getPropertyValue('font-style'),\n        variant: style.getPropertyValue('font-variant'),\n        weight: style.getPropertyValue('font-weight'),\n        size: style.getPropertyValue('font-size'),\n        lineHeight: style.getPropertyValue('line-height'),\n        family: style.getPropertyValue('font-family')\n    };\n}\n(function(global) {\n    /**\n     * Current log level\n     * @type {Number}\n     * @private\n     */\n    var currentLogLevel = 3;\n\n    /**\n     * Check if level is allow to print message\n     * @param  {Integer}  level Level that need to check\n     * @return {Boolean}        Returns true if this level can be printed out\n     * @private\n     */\n    function isAllowedLevel(level) {\n        return level >= currentLogLevel;\n    }\n\n    /**\n     * Prepend message to every log message\n     * @param  {String} string Message to what will be prepended header message\n     * @return {String}        Returns resulting strint\n     * @private\n     */\n    function prependLoggerInfo(string) {\n        return ['Rise', new Date().toLocaleTimeString(), string].join(' -> ');\n    }\n\n    /**\n     * Invoke console methods\n     * @param  {String} type Type of console that need to be invoked\n     * @param  {Array} args Array of arguments to console method\n     * @private\n     * @example\n     * invokeConsole('log', ['test', 'test2']); // test test2\n     */\n    function invokeConsole(type, args) {\n        args = Array.prototype.slice.call(args, 0);\n\n        if (console[type] && Rise.Util.isFunction(console[type])) {\n            args[0] = prependLoggerInfo(args[0] ? args[0] : '');\n            console[type].apply(console, args);\n        }\n    }\n\n    /**\n     * Print welcome message to console\n     * @private\n     */\n    (function printWelcomeMessage() {\n        if (window.chrome) {\n            console.log.apply(console, [\n                '%c %c %c Rise v' + Rise.getVersion() + ' %c %c %c',\n                'background: #0E173E; font-size: 8pt;',\n                'background: #020C25; font-size: 9pt;',\n                'color: #FFFFFF; background: #0D0B0E; font-size: 10pt',\n                'background: #020C25; font-size: 9pt;',\n                'background: #0E173E; font-size: 8pt;',\n                'background: #0E173E; font-size: 8pt;'\n            ]);\n        } else {\n            console.log('Rise v' + Rise.getVersion());\n        }\n    })();\n\n    var Logger = {\n        /**\n         * Allow print out all messages\n         * @static\n         * @type {Number}\n         */\n        VERBOSE: 1,\n\n        /**\n         * Allow print out only .debug(), .error(), .warn(), .info()\n         * @static\n         * @type {Number}\n         */\n        DEBUG: 2,\n\n        /**\n         * Allow print out only .error(), .warn(), .info()\n         * @static\n         * @type {Number}\n         */\n        ERROR: 3,\n\n        /**\n         * Allow print out only .warn() and .info()\n         * @static\n         * @type {Number}\n         */\n        WARNING: 4,\n\n        /**\n         * Allow print out only .info()\n         * @static\n         * @type {Number}\n         */\n        INFO: 5,\n\n        /**\n         * Disable all logs\n         * @static\n         * @type {Number}\n         */\n        OFF: 100,\n\n        /**\n         * Set current level for logger\n         * @param {Integer} level Predefined constant in Rise.Logger\n         * @return {Rise.Logger}\n         * @static\n         * @example\n         * Rise.Logger.setLevel(Rise.Logger.VERBOSE);\n         */\n        setLevel: function(level) {\n            currentLogLevel = level;\n            return this;\n        },\n\n        /**\n         * Get current log level\n         * @static\n         * @return {Integer} Returns integer value of current log level\n         */\n        getLevel: function() {\n            return currentLogLevel;\n        },\n\n        /**\n         * Log message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        log: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('log', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Debug message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        debug: function() {\n            if (isAllowedLevel(this.DEBUG)) {\n                invokeConsole('debug', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Error message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        error: function() {\n            if (isAllowedLevel(this.ERROR)) {\n                invokeConsole('error', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Warning message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        warning: function() {\n            if (isAllowedLevel(this.WARNING)) {\n                invokeConsole('warn', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Info message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        info: function() {\n            if (isAllowedLevel(this.INFO)) {\n                invokeConsole('info', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Start new group in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        startGroup: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('group', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * End current group in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        endGroup: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('groupEnd', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Start profiling time in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        startTime: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('time', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * End profiling time in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        endTime: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('timeEnd', arguments);\n            }\n\n            return this;\n        }\n    };\n\n    global.Rise.Logger = Logger;\n\n})(this);\n(function(global) {\n    var Util = {\n        /**\n         * Get type of variable\n         * @param  {Mixed} value Variable that might be checked\n         * @return {String}       Returns string representation of type\n         */\n        getType: function(value) {\n            return Object.prototype.toString.call(value).replace(/^\\[object (.+)\\]$/, '$1').toLowerCase();\n        },\n\n        /**\n         * Check if this object\n         * @param  {Mixed}  object Value that might be checked\n         * @return {Boolean}       Returns true if object\n         */\n        isObject: function(object) {\n            return this.getType(object) == 'object';\n        },\n\n        /**\n         * Check if this is number\n         * @param  {Mixed}  number Value that might be checked\n         * @return {Boolean}       Returns true if number\n         */\n        isNumber: function(number) {\n            return (\n                this.getType(number) == 'number' &&\n                !isNaN(number) &&\n                isFinite(number)\n            );\n        },\n\n        /**\n         * Check if this array\n         * @param  {Mixed}  array Value that might be checked\n         * @return {Boolean}      Returns true if array\n         */\n        isArray: function(array) {\n            return this.getType(array) == 'array';\n        },\n\n        /**\n         * Check if this is boolean\n         * @param  {Mixed}  bool Value that might be checked\n         * @return {Boolean}      Returns true if boolean\n         */\n        isBoolean: function(bool) {\n            return this.getType(bool) == 'boolean';\n        },\n\n        /**\n         * Check if this function\n         * @param  {Mixed}  method Value that might be checked\n         * @return {Boolean}       Returns true if function\n         */\n        isFunction: function(method) {\n            return this.getType(method) == 'function';\n        },\n\n        /**\n         * Check if this is string\n         * @param  {Mixed}  string Value that might be checked\n         * @return {Boolean}       Returns true if string\n         */\n        isString: function(string) {\n            return this.getType(string) == 'string';\n        },\n\n        /**\n         * Get random string\n         * @param  {String} prepend   String which prepends to random string\n         * @param  {String} append    String which appends to random string\n         * @param  {String} separator String which separate prepender and appender\n         * @return {String}           Returns random generated string\n         * @memberOf Rise.Util\n         */\n        getRandomString: function(prepend, append, separator) {\n            prepend = prepend === undefined ? '' : prepend;\n            append = append === undefined ? '' : append;\n            separator = separator === undefined ? '' : separator;\n\n            return [prepend, Math.random().toString(36).slice(2), append].join(separator);\n        }\n    };\n\n    global.Rise.Util = Util;\n\n})(this);"],"sourceRoot":"/source/"}