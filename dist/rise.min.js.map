{"version":3,"file":"rise.min.js","sources":["rise.min.js"],"names":["global","Rise","this","VERSION","prototype","Object","create","getVersion","copyWrappedProps","targetPropsObj","parentPropsObj","name","fnTest","test","wrapMethod","method","parentMethod","backup","_super","apply","arguments","Class","alert","extend","staticProperties","mixins","Constructor","init","inherit","constructor","i","length","Text","console","log","AdvText","Util","getType","value","toString","call","replace","toLowerCase","isObject","object","isArray","array","isNumber","number","isNaN","isFinite","isString","string","isBoolean","bool","getRandomString","prepend","append","separator","undefined","Math","random","slice","join"],"mappings":"CAAA,SAAUA,GAYN,QAASC,KACL,MAAOC,MAPX,GAAIC,GAAU,gBAUdF,GAAKG,UAAYC,OAAOC,WAOxBL,EAAKM,WAAa,WACd,MAAOJ,IAGXH,EAAOC,KAAOA,GAEfC,MACH,SAAUF,GAKN,QAASQ,GAAiBJ,EAAWK,EAAgBC,GACjD,GAAKN,EAEL,IAAK,GAAIO,KAAQP,GAETK,EAAeE,GADW,kBAAnBP,GAAUO,IAAsD,kBAAxBD,GAAeC,IAAuBC,EAAOC,KAAKT,EAAUO,IACpFG,EAAWV,EAAUO,GAAOD,EAAeC,IAE3CP,EAAUO,GAQ7C,QAASG,GAAWC,EAAQC,GACxB,MAAO,YACH,GAAIC,GAASf,KAAKgB,MAElBhB,MAAKgB,OAASF,CAEd,KACI,MAAOD,GAAOI,MAAMjB,KAAMkB,WAC5B,QACElB,KAAKgB,OAASD,IAW1B,QAASI,MAvCT,GAAIT,GAAS,WAAWC,KAAK,WACzBS,UACC,aAAe,GAoDpBD,GAAME,OAAS,SAASnB,EAAWoB,EAAkBC,GAGjD,QAASC,KACLxB,KAAKyB,MAAQzB,KAAKyB,KAAKR,MAAMjB,KAAMkB,WAHvCK,EAASA,MAQTC,EAAYtB,UAAYiB,EAAMO,QAAQ1B,KAAKE,WAG3CsB,EAAYtB,UAAUyB,YAAcH,EAGpCA,EAAYH,OAASF,EAAME,OAG3Bf,EAAiBgB,EAAkBE,EAAaxB,KAGhD,KAAK,GAAI4B,GAAI,EAAGA,EAAIL,EAAOM,OAAQD,IAC/BtB,EAAiBiB,EAAOK,GAAIJ,EAAYtB,UAAWF,KAAKE,UAI5D,OAFAI,GAAiBJ,EAAWsB,EAAYtB,UAAWF,KAAKE,WAEjDsB,GAGX1B,EAAOC,KAAKoB,MAAQA,GAErBnB,KAIH,IAAI8B,MAAO/B,KAAKoB,MAAME,QAClBI,KAAM,WACFM,QAAQC,IAAIhC,SAIhBiC,QAAUH,KAAKT,QACfI,KAAM,WACFM,QAAQC,IAAI,UAAWhC,QAI/B,IAAI8B,MACJ,GAAIG,SACJ,SAAUnC,GACN,GAAIoC,IAMAC,QAAS,SAASC,GACd,MAAOjC,QAAOD,UAAUmC,SAASC,KAAKF,GAAOG,QAAQ,oBAAqB,MAAMC,eAQpFC,SAAU,SAASC,GACf,MAA+B,UAAxB1C,KAAKmC,QAAQO,IAQxBC,QAAS,SAASC,GACd,MAA8B,SAAvB5C,KAAKmC,QAAQS,IAQxBC,SAAU,SAASC,GACf,MAC4B,UAAxB9C,KAAKmC,QAAQW,KACZC,MAAMD,IACPE,SAASF,IASjBG,SAAU,SAASC,GACf,MAA+B,UAAxBlD,KAAKmC,QAAQe,IAQxBC,UAAW,SAASC,GAChB,MAA6B,WAAtBpD,KAAKmC,QAAQiB,IAWxBC,gBAAiB,SAASC,EAASC,EAAQC,GAKvC,MAJAF,GAAsBG,SAAZH,EAAwB,GAAKA,EACvCC,EAAoBE,SAAXF,EAAuB,GAAKA,EACrCC,EAA0BC,SAAdD,EAA0B,GAAKA,GAEnCF,EAASI,KAAKC,SAAStB,SAAS,IAAIuB,MAAM,GAAIL,GAAQM,KAAKL,IAI3E1D,GAAOC,KAAKmC,KAAOA,GAEpBlC","sourcesContent":["(function(global) {\n    /**\n     * Current version of Rise\n     * @type {String}\n     * @private\n     */\n    var VERSION = '0.0.1 -> alpha';\n\n    /**\n     * Rise constuctor\n     * @constructor\n     */\n    function Rise() {\n        return this;\n    }\n\n    Rise.prototype = Object.create({});\n\n    /**\n     * Get current version\n     * @return {String} Returns current version\n     * @private\n     */\n    Rise.getVersion = function() {\n        return VERSION;\n    };\n\n    global.Rise = Rise;\n\n})(this);\n(function(global) {\n    var fnTest = /alert();/.test(function() {\n        alert();\n    }) ? /\\b_super\\b/ : /./;\n\n    function copyWrappedProps(prototype, targetPropsObj, parentPropsObj) {\n        if (!prototype) return;\n\n        for (var name in prototype) {\n            if (typeof prototype[name] == \"function\" && typeof parentPropsObj[name] == \"function\" && fnTest.test(prototype[name])) {\n                targetPropsObj[name] = wrapMethod(prototype[name], parentPropsObj[name]);\n            } else {\n                targetPropsObj[name] = prototype[name];\n            }\n        }\n\n    }\n\n    // возвращает обёртку вокруг method, которая ставит this._super на родителя\n    // и возвращает его потом \n    function wrapMethod(method, parentMethod) {\n        return function() {\n            var backup = this._super;\n\n            this._super = parentMethod;\n\n            try {\n                return method.apply(this, arguments);\n            } finally {\n                this._super = backup;\n            }\n        };\n    }\n\n\n    /**\n     * Empty function (interface)\n     * @member Rise.Class\n     * @private\n     */\n    function Class() {}\n\n    /**\n     * Create new Class or extend exists\n     * @param {Array} [mixins] Optional parameter. Array of mixins which need to inject in new Class\n     * @param {Object} prototype Prototype object for new Class\n     * @param {Object} staticProperties Object with static properties for new Class. Will send in Object.defineProperties.\n     * @return {Object} Returns new Class\n     * @member Rise.Class\n     *\n     * @example\n     * Rise.Class.extend([prototype])\n     * Rise.Class.extend([prototype], [staticProperties])\n     * Rise.Class.extend([prototype], [staticProperties], [mixins])\n     */\n    Class.extend = function(prototype, staticProperties, mixins) {\n        mixins = mixins || [];\n\n        function Constructor() {\n            this.init && this.init.apply(this, arguments);\n        }\n\n        // this -- это класс \"перед точкой\", для которого вызван extend (Animal.extend)\n        // наследуем от него:\n        Constructor.prototype = Class.inherit(this.prototype);\n\n        // constructor был затёрт вызовом inherit\n        Constructor.prototype.constructor = Constructor;\n\n        // добавим возможность наследовать дальше\n        Constructor.extend = Class.extend;\n\n        // скопировать в Constructor статические свойства\n        copyWrappedProps(staticProperties, Constructor, this);\n\n        // скопировать в Constructor.prototype свойства из примесей и prototype\n        for (var i = 0; i < mixins.length; i++) {\n            copyWrappedProps(mixins[i], Constructor.prototype, this.prototype);\n        }\n        copyWrappedProps(prototype, Constructor.prototype, this.prototype);\n\n        return Constructor;\n    };\n\n    global.Rise.Class = Class;\n\n})(this);\n\n\n\nvar Text = Rise.Class.extend({\n    init: function() {\n        console.log(this);\n    }\n});\n\nvar AdvText = Text.extend({\n    init: function() {\n        console.log('AdvText', this);\n    }\n});\n\nnew Text();\nnew AdvText();\n(function(global) {\n    var Util = {\n        /**\n         * Get type of variable\n         * @param  {Mixed} value Variable that might be checked\n         * @return {String}       Returns string representation of type\n         */\n        getType: function(value) {\n            return Object.prototype.toString.call(value).replace(/^\\[object (.+)\\]$/, '$1').toLowerCase();\n        },\n\n        /**\n         * Check if this object\n         * @param  {Mixed}  object Value that might be checked\n         * @return {Boolean}       Returns true if object\n         */\n        isObject: function(object) {\n            return this.getType(object) == 'object';\n        },\n\n        /**\n         * Check if this array\n         * @param  {Mixed}  array Value that might be checked\n         * @return {Boolean}      Returns true if array\n         */\n        isArray: function(array) {\n            return this.getType(array) == 'array';\n        },\n\n        /**\n         * Check if this is number\n         * @param  {Mixed}  number Value that might be checked\n         * @return {Boolean}       Returns true if number\n         */\n        isNumber: function(number) {\n            return (\n                this.getType(number) == 'number' &&\n                !isNaN(number) &&\n                isFinite(number)\n            );\n        },\n\n        /**\n         * Check if this is string\n         * @param  {Mixed}  string Value that might be checked\n         * @return {Boolean}       Returns true if string\n         */\n        isString: function(string) {\n            return this.getType(string) == 'string';\n        },\n\n        /**\n         * Check if this is boolean\n         * @param  {Mixed}  bool Value that might be checked\n         * @return {Boolean}      Returns true if boolean\n         */\n        isBoolean: function(bool) {\n            return this.getType(bool) == 'boolean';\n        },\n\n        /**\n         * Get random string\n         * @param  {String} prepend   String which prepends to random string\n         * @param  {String} append    String which appends to random string\n         * @param  {String} separator String which separate prepender and appender\n         * @return {String}           Returns random generated string\n         * @memberOf Rise.Util\n         */\n        getRandomString: function(prepend, append, separator) {\n            prepend = prepend === undefined ? '' : prepend;\n            append = append === undefined ? '' : append;\n            separator = separator === undefined ? '' : separator;\n\n            return [prepend, Math.random().toString(36).slice(2), append].join(separator);\n        }\n    };\n\n    global.Rise.Util = Util;\n\n})(this);"],"sourceRoot":"/source/"}