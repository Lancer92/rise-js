{"version":3,"file":"rise.min.js","sources":["rise.min.js"],"names":["global","Rise","this","VERSION","prototype","Object","create","getVersion","Util","extend","source","copyObject","key","constructor","destination","bind","arguments","i","length","keys","forEach","getCamelizedString","string","replace","letter","toUpperCase","getDashedString","toLowerCase","getRandomString","prepend","append","separator","isUndefined","Math","random","toString","slice","join","flipObject","object","flipped","getType","value","call","isObject","isNumber","number","isNaN","isFinite","isArray","array","isBoolean","bool","isFunction","method","isString","copyProperties","target","parent","test","wrapMethod","parentMethod","backup","_super","apply","Class","staticProperties","mixins","Constructor","init","Color","color","config","rgb","alpha","valid","format","fromString","Logger","startGroup","log","hasOwnProperty","rgbToRgb","r","g","b","String","substr","s","convertDecimalToPercentage","v","hsvToRgb","h","l","hslToRgb","warning","a","min","max","boundAlpha","red","round","green","blue","roundA","gradientType","endGroup","isDark","getBrightness","isLight","isValid","getFormat","getRed","setRed","getGreen","setGreen","getBlue","setBlue","getAlpha","setAlpha","toRgb","toHsv","hsv","rgbToHsv","toHsvString","toHsl","hsl","rgbToHsl","toHslString","toHex","allow3Char","rgbToHex","toHexString","toHex8","rgbaToHex","toHex8String","toRgbString","toPercentageRgb","bound01","toPercentageRgbString","toName","hexNamesMap","toFilterString","secondColor","hex8String","secondHex8String","formattedString","lighten","amount","clamp01","brighten","darken","desaturate","saturate","greyscale","spin","hue","getAnalogous","results","slices","part","result","push","getComplementary","getMonochromatic","modification","getSplitComplementary","getTriad","getTetrad","colorNamesMap","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","colorRegexMap","cssInteger","cssNumber","cssUnit","permissiveMatch3","permissiveMatch4","RegExp","rgba","hsla","hex3","hex6","hex8","parseFloat","isOnePointZero","isPercentageValue","isPercentage","parseInt","abs","pad2","indexOf","convertHexToInteger","convertDecimalToHex","convertHexToDecimal","d","hue2rgb","p","q","t","floor","f","mod","hex","charAt","match","trimLeft","trimRight","named","exec","fromRatio","newColor","equals","firstColor","mix","w1","w2","rgbA","rgbB","w","Font","font","Element","fromNode","style","variant","weight","size","lineHeight","family","isFontValid","getStyle","setStyle","isFontStyleValid","getVariant","setVariant","isFontVariantValid","getWeight","setWeight","isFontWeightValid","getSize","setSize","isFontSizeValid","getLineHeight","setLineHeight","isFontLineHeightValid","getFamily","setFamily","isFontFamilyValid","unitsMap","fontStyleMap","fontVariantMap","fontWeightMap","fontSizeMap","fontLineHeightMap","isCssValueValid","some","unit","lastIndexOf","element","window","getComputedStyle","getPropertyValue","isAllowedLevel","level","currentLogLevel","prependLoggerInfo","Date","toLocaleTimeString","invokeConsole","type","args","Array","console","chrome","VERBOSE","DEBUG","ERROR","WARNING","INFO","OFF","setLevel","getLevel","debug","error","info","startTime","endTime","Opacity","opacity","set","isDecimal01Value","convertCssToPercentage","get","convertPercentageToCss","toFixed","$","RQuery","tag","document","createElement","selector","pushElement","elements","HTMLCollection","NodeList","querySelectorAll","index","count","each","cb","parentNode","children","contains","child","offsetWidth","offsetHeight","offsetLeft","offsetTop","focus","blur","filter","find","attr","getAttribute","removeAttribute","setAttribute","css","pseudoElement","removeProperty","cssNumbersMap","wrap","html","wrapper","clone","insertBefore","unwrap","replaceChild","is","matches","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","addClass","names","split","name","classList","add","removeClass","remove","toggleClass","toggle","hasClass","every","on","eventType","handler","addEventListener","off","removeEventListener","triggerMouseEvent","eventName","event","createEvent","initMouseEvent","dispatchEvent","removeChild","innerHTML","empty","insertAdjacentHTML","appendChild","firstChild","text","textContent","clones","cloneNode","Shadow","shadow","offsetX","offsetY","setColor","getColor","setBlur","getBlur","setOffsetX","x","getOffsetX","setOffsetY","y","getOffsetY","shadowRegex","trim","offsetsAndBlur"],"mappings":"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","sourcesContent":["(function(global) {\n    /**\n     * Current version of Rise\n     * @type {String}\n     * @private\n     */\n    var VERSION = '0.0.2-alpha';\n\n    /**\n     * Rise constuctor\n     * @constructor\n     */\n    function Rise() {\n        return this;\n    }\n\n    Rise.prototype = Object.create({});\n\n    /**\n     * Get current version\n     * @static\n     * @return {String} Returns current version\n     */\n    Rise.getVersion = function() {\n        return VERSION;\n    };\n\n    global.Rise = Rise;\n\n})(this);\n(function(global) {\n    'use strict';\n\n    /**\n     * Util object\n     * @static\n     * @type {Object}\n     */\n    var Util = {\n        /**\n         * Extend object\n         * @param  {Object} destination Destination object will be also modified\n         * @param  {Object} source Source objects\n         * @return {Object} Returns extended object\n         * @static\n         * @example\n         * Rise.Util.extend({}, obj1, obj2, obj3);\n         */\n        extend: function() {\n            /**\n             * Copy source object to destination object\n             * @this {Rise.Util}\n             * @param  {String} key Current key of current source object\n             * @private\n             */\n            var copyObject = function(key) {\n                if (source[key] && source[key].constructor && source[key].constructor === Object) {\n                    destination[key] = destination[key] || {};\n                    this.extend(destination[key], source[key]);\n                } else {\n                    destination[key] = source[key];\n                }\n            }.bind(this);\n\n            var destination = arguments[0],\n                source;\n\n            for (var i = 1; i < arguments.length; i++) {\n                source = arguments[i];\n                Object.keys(source).forEach(copyObject);\n            }\n\n            return destination;\n        },\n\n        /**\n         * Camelize string\n         * @param  {String} string String which need to camelize\n         * @return {String} Returns camelized string\n         * @static\n         * @example\n         * Rise.Util.getCamelizedString('font-style'); // fontStyle\n         */\n        getCamelizedString: function(string) {\n            return string.replace(/\\-(\\w)/g, function(string, letter) {\n                return letter.toUpperCase();\n            });\n        },\n\n        /**\n         * Get dashed string\n         * @param  {String} string String which need to make dashed\n         * @return {String} Returns dashed string\n         * @static\n         * @example\n         * Rise.Util.getDashedString('borderRadius'); // border-radius\n         */\n        getDashedString: function(string) {\n            return string.replace(/([A-Z])/g, function(string) {\n                return '-' + string.toLowerCase();\n            });\n        },\n\n        /**\n         * Get random string\n         * @param  {String} prepend   String which prepends to random string\n         * @param  {String} append    String which appends to random string\n         * @param  {String} separator String which separate prepender and appender\n         * @return {String}           Returns random generated string\n         * @static\n         * @example\n         * Rise.Util.getRandomString('preffix', 'suffix', 'separator');\n         */\n        getRandomString: function(prepend, append, separator) {\n            prepend = this.isUndefined(prepend) ? '' : prepend;\n            append = this.isUndefined(append) ? '' : append;\n            separator = this.isUndefined(separator) ? '' : separator;\n\n            return [\n                prepend,\n                Math.random().toString(36).slice(2),\n                append\n            ].join(separator);\n        },\n\n        /**\n         * Flip key-values in object\n         * @param  {Object} object Object which you want to flip\n         * @return {Object} Returns flipped object\n         * @static\n         * @example\n         * var flipped = Rise.Util.flipObject({\n         *     foo: 'bar',\n         *     bar: 'test'\n         * });\n         */\n        flipObject: function(object) {\n            var flipped = {};\n\n            Object.keys(object).forEach(function(key) {\n                flipped[object[key]] = key;\n            });\n\n            return flipped;\n        },\n\n        /**\n         * Get type of variable\n         * @static\n         * @param  {Mixed} value Variable that might be checked\n         * @return {String}      Returns string representation of type\n         */\n        getType: function(value) {\n            return Object.prototype.toString.call(value).replace(/^\\[object (.+)\\]$/, '$1').toLowerCase();\n        },\n\n        /**\n         * Check if this object\n         * @static\n         * @param  {Mixed}  object Value that might be checked\n         * @return {Boolean}       Returns true if object\n         */\n        isObject: function(object) {\n            return this.getType(object) == 'object';\n        },\n\n        /**\n         * Check if this is number\n         * @static\n         * @param  {Mixed}  number Value that might be checked\n         * @return {Boolean}       Returns true if number\n         */\n        isNumber: function(number) {\n            return (\n                this.getType(number) == 'number' &&\n                !isNaN(number) &&\n                isFinite(number)\n            );\n        },\n\n        /**\n         * Check if this array\n         * @static\n         * @param  {Mixed}  array Value that might be checked\n         * @return {Boolean}      Returns true if array\n         */\n        isArray: function(array) {\n            return this.getType(array) == 'array';\n        },\n\n        /**\n         * Check if this is boolean\n         * @static\n         * @param  {Mixed}  bool Value that might be checked\n         * @return {Boolean}      Returns true if boolean\n         */\n        isBoolean: function(bool) {\n            return this.getType(bool) == 'boolean';\n        },\n\n        /**\n         * Check if this function\n         * @static\n         * @param  {Mixed}  method Value that might be checked\n         * @return {Boolean}       Returns true if function\n         */\n        isFunction: function(method) {\n            return this.getType(method) == 'function';\n        },\n\n        /**\n         * Check if this is string\n         * @static\n         * @param  {Mixed}  string Value that might be checked\n         * @return {Boolean}       Returns true if string\n         */\n        isString: function(string) {\n            return this.getType(string) == 'string';\n        },\n\n        /**\n         * Check if this is undefined\n         * @static\n         * @param  {Mixed}  value Value that might be checked\n         * @return {Boolean}       Returns true if undefined\n         */\n        isUndefined: function(value) {\n            return (\n                this.getType(value) == 'undefined' ||\n                this.getType(value) == 'domwindow'\n            );\n        }\n    };\n\n    global.Rise.Util = Util;\n\n})(this);\n(function(global) {\n    'use strict';\n\n    /**\n     * Copy properties from parent to target object\n     * @param  {Object} source Object from where properties will be copied\n     * @param  {Object} target Object to where properties will copy\n     * @param  {Object} parent Parent object\n     * @private\n     */\n    function copyProperties(source, target, parent) {\n        Object.keys(source).forEach(function(key) {\n            if (\n                typeof source[key] == \"function\" &&\n                typeof parent[key] == \"function\" &&\n                /\\b_super\\b/.test(source[key])\n            ) {\n                target[key] = wrapMethod(source[key], parent[key]);\n            } else {\n                target[key] = source[key];\n            }\n        });\n    }\n\n    /**\n     * Wrap method with parent method.\n     * Useful for create this._super() in subclasses.\n     * @param  {Function} method       Method that need to be wrapped\n     * @param  {Function} parentMethod Parent method, in other words - this._super();\n     * @return {Function}              Returns wrapped function\n     * @private\n     */\n    function wrapMethod(method, parentMethod) {\n        return function() {\n            var backup = this._super;\n            this._super = parentMethod;\n\n            try {\n                return method.apply(this, arguments);\n            } finally {\n                this._super = backup;\n            }\n        };\n    }\n\n    /**\n     * Empty function (interface)\n     * @private\n     */\n    function Class() {}\n\n    /**\n     * Create new Class or extend exists\n     * @static\n     * @param {Object} [prototype] Prototype object for new Class\n     * @param {Object} [staticProperties] Object with static properties for new Class\n     * @param {Array}  [mixins] Array of mixins which need to inject in new Class prototype\n     * @return {Object} Returns new Class\n     *\n     * @example\n     * Rise.Class.create([prototype])\n     * Rise.Class.create([prototype], [staticProperties])\n     * Rise.Class.create([prototype], [staticProperties], [mixins])\n     */\n    Class.create = function(prototype, staticProperties, mixins) {\n        prototype = prototype || {};\n        staticProperties = staticProperties || {};\n        mixins = mixins || [];\n\n        function Constructor() {\n            return this.init && this.init.apply(this, arguments);\n        }\n\n        Constructor.prototype = Object.create(this.prototype);\n        Constructor.prototype.constructor = Constructor;\n        Constructor.extend = Class.create;\n\n        copyProperties(staticProperties, Constructor, this);\n        copyProperties(prototype, Constructor.prototype, this.prototype);\n        for (var i = mixins.length - 1; i >= 0; i--) {\n            copyProperties(mixins[i], Constructor.prototype, this.prototype);\n        }\n\n        return Constructor;\n    };\n\n    global.Rise.Class = Class;\n\n})(this);\n(function(global) {\n    'use strict';\n\n    global.Rise.Color = Rise.Class.create({\n        /**\n         * Create new Rise.Color instance\n         * @constructor\n         * @param {String|Object|Rise.Color} color String or object with appropriate properties\n         * @param {Object} config Additional config for color\n         * @return {Rise.Color} Returns Rise.Color instance\n         * @example\n         * Rise.Color('red');\n         * Rise.Color({\n         *     r: 255,\n         *     g: 0,\n         *     b: 0,\n         *     a: 1\n         * })\n         */\n        init: function(color, config) {\n            color = color || 'black';\n            config = config || {};\n\n            var rgb = {},\n                alpha = 1,\n                valid = false,\n                format = false;\n\n            if (color instanceof Rise.Color) {\n                return color;\n            } else if (Rise.Util.isString(color)) {\n                return Rise.Color.fromString(color, config);\n            } else if (Rise.Util.isObject(color)) {\n                Rise.Logger.startGroup(true, 'Rise.Color -> init()');\n                Rise.Logger.log('Trying to parse color -> %O with config -> %O', color, config);\n\n                if (color.hasOwnProperty('r') && color.hasOwnProperty('g') && color.hasOwnProperty('b')) {\n                    Rise.Logger.log('Convert RGB -> %O', color);\n\n                    rgb = Rise.Color.rgbToRgb(color.r, color.g, color.b);\n                    valid = true;\n                    format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n                } else if (color.hasOwnProperty('h') && color.hasOwnProperty('s') && color.hasOwnProperty('v')) {\n                    Rise.Logger.log('Convert HSV -> %O', color);\n\n                    color.s = Rise.Color.convertDecimalToPercentage(color.s);\n                    color.v = Rise.Color.convertDecimalToPercentage(color.v);\n                    rgb = Rise.Color.hsvToRgb(color.h, color.s, color.v);\n                    valid = true;\n                    format = \"hsv\";\n                } else if (color.hasOwnProperty('h') && color.hasOwnProperty('s') && color.hasOwnProperty('l')) {\n                    Rise.Logger.log('Convert HSL -> %O', color);\n\n                    color.s = Rise.Color.convertDecimalToPercentage(color.s);\n                    color.l = Rise.Color.convertDecimalToPercentage(color.l);\n                    rgb = Rise.Color.hslToRgb(color.h, color.s, color.l);\n                    valid = true;\n                    format = \"hsl\";\n                } else {\n                    Rise.Logger.warning('Color object -> %O not parsed', color);\n                }\n\n                if (color.hasOwnProperty('a')) {\n                    alpha = color.a;\n                }\n\n                rgb.r = Math.min(255, Math.max(rgb.r, 0));\n                rgb.g = Math.min(255, Math.max(rgb.g, 0));\n                rgb.b = Math.min(255, Math.max(rgb.b, 0));\n                alpha = Rise.Color.boundAlpha(alpha);\n\n                this.red = rgb.r < 1 ? Math.round(rgb.r) : rgb.r;\n                this.green = rgb.g < 1 ? Math.round(rgb.g) : rgb.g;\n                this.blue = rgb.b < 1 ? Math.round(rgb.b) : rgb.b;\n                this.alpha = alpha;\n                this.valid = valid;\n                this.roundA = Math.round(100 * this.alpha) / 100;\n                this.format = config.format || format;\n                this.gradientType = config.gradientType;\n\n                if (!this.valid) {\n                    Rise.Logger.warning('Rise.Color -> %O have errors', color);\n                }\n\n                Rise.Logger.log('Instantiated new Rise.Color instance -> %O', this);\n                Rise.Logger.endGroup();\n            } else {\n                Rise.Logger.warning('Color -> %O not parsed', color);\n            }\n\n            return this;\n        },\n\n        /**\n         * Check if this color is dark\n         * @return {Boolean} Returns true if color is dark\n         */\n        isDark: function() {\n            return this.getBrightness() < 128;\n        },\n\n        /**\n         * Check if this color is light\n         * @return {Boolean} Returns true if color is light\n         */\n        isLight: function() {\n            return !this.isDark();\n        },\n\n        /**\n         * Check if this color valid and successfully parsed\n         * @return {Boolean} Returns true if valid\n         */\n        isValid: function() {\n            return this.valid;\n        },\n\n        /**\n         * Get format of this color\n         * @return {String} Returns string with color format\n         */\n        getFormat: function() {\n            return this.format;\n        },\n\n        /**\n         * Get red channel\n         * @return {Integer} Returns red channel value\n         */\n        getRed: function() {\n            return this.red;\n        },\n\n        /**\n         * Set red channel\n         * @param {Integer} value Red channel in [0, 255] range\n         * @return {Rise.Color} Returns Rise.Color instance\n         */\n        setRed: function(value) {\n            this.red = Math.min(255, Math.max(value, 0));\n            return this;\n        },\n\n        /**\n         * Get green channel\n         * @return {Integer} Returns green channel value\n         */\n        getGreen: function() {\n            return this.green;\n        },\n\n        /**\n         * Set green channel\n         * @param {Integer} value Green channel in [0, 255] range\n         * @return {Rise.Color} Returns Rise.Color instance\n         */\n        setGreen: function(value) {\n            this.green = Math.min(255, Math.max(value, 0));\n            return this;\n        },\n\n        /**\n         * Get blue channel\n         * @return {Integer} Returns blue channel value\n         */\n        getBlue: function() {\n            return this.blue;\n        },\n\n        /**\n         * Set blue channel\n         * @param {Integer} value Blue channel in [0, 255] range\n         * @return {Rise.Color} Returns Rise.Color instance\n         */\n        setBlue: function(value) {\n            this.blue = Math.min(255, Math.max(value, 0));\n            return this;\n        },\n\n        /**\n         * Get alpha channel of this color\n         * @return {Float} Returns float value of alpha channel\n         */\n        getAlpha: function() {\n            return this.alpha;\n        },\n\n        /**\n         * Set alpha channel for this color\n         * @param {Float} value Float value of alpha channel in 0-1 range\n         * @return {Rise.Color} Returns Rise.Color instance\n         */\n        setAlpha: function(value) {\n            this.alpha = Rise.Color.boundAlpha(value);\n            this.roundA = Math.round(100 * this.alpha) / 100;\n            return this;\n        },\n\n        /**\n         * Get brightness level of color\n         * @return {Integer} Returns float value of brightness level\n         */\n        getBrightness: function() {\n            var rgb = this.toRgb();\n            return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n        },\n\n        /**\n         * Convert color to HSV\n         * @return {Object} Object with h, s, v, a properties\n         */\n        toHsv: function() {\n            var hsv = Rise.Color.rgbToHsv(this.red, this.green, this.blue);\n\n            return {\n                h: hsv.h * 360,\n                s: hsv.s,\n                v: hsv.v,\n                a: this.alpha\n            };\n        },\n\n        /**\n         * Convert to HSV in string\n         * @return {String} Returns string with HSV color\n         */\n        toHsvString: function() {\n            var hsv = Rise.Color.rgbToHsv(this.red, this.green, this.blue),\n                h = Math.round(hsv.h * 360),\n                s = Math.round(hsv.s * 100),\n                v = Math.round(hsv.v * 100);\n\n            return this.alpha == 1 ?\n                \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\" :\n                \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + this.roundA + \")\";\n        },\n\n        /**\n         * Convert color to HSL\n         * @return {Object} Object with h, s, l, a properties\n         */\n        toHsl: function() {\n            var hsl = Rise.Color.rgbToHsl(this.red, this.green, this.blue);\n\n            return {\n                h: hsl.h * 360,\n                s: hsl.s,\n                l: hsl.l,\n                a: this.alpha\n            };\n        },\n\n        /**\n         * Convert color to HSL in string\n         * @return {String} Returns HSL in string\n         */\n        toHslString: function() {\n            var hsl = Rise.Color.rgbToHsl(this.red, this.green, this.blue),\n                h = Math.round(hsl.h * 360),\n                s = Math.round(hsl.s * 100),\n                l = Math.round(hsl.l * 100);\n\n            return (this.alpha == 1) ?\n                \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\" :\n                \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + this.roundA + \")\";\n        },\n\n        /**\n         * Convert color to HEX\n         * @param  {Boolean} allow3Char Allow 3 char format or not\n         * @return {String} Returns HEX value of this color\n         */\n        toHex: function(allow3Char) {\n            return Rise.Color.rgbToHex(this.red, this.green, this.blue, allow3Char);\n        },\n\n        /**\n         * Convert color to HEX string\n         * @param  {Boolean} allow3Char Allow 3 char format or not\n         * @return {String} Returns string with # and HEX color\n         */\n        toHexString: function(allow3Char) {\n            return '#' + this.toHex(allow3Char);\n        },\n\n        /**\n         * Convert color to HEX 8\n         * @return {String} Returns HEX string with 8 chars\n         */\n        toHex8: function() {\n            return Rise.Color.rgbaToHex(this.red, this.green, this.blue, this.alpha);\n        },\n\n        /**\n         * Convert color to HEX 8 string\n         * @return {String} Returns HEX string with # and 8 chars\n         */\n        toHex8String: function() {\n            return '#' + this.toHex8();\n        },\n\n        /**\n         * Convert color to RGB\n         * @return {Object} Returns object with r, g, b, a properties\n         */\n        toRgb: function() {\n            return {\n                r: Math.round(this.red),\n                g: Math.round(this.green),\n                b: Math.round(this.blue),\n                a: this.alpha\n            };\n        },\n\n        /**\n         * Convert color to RGB string\n         * @return {String} Returns RGB string\n         */\n        toRgbString: function() {\n            return (this.alpha == 1) ?\n                \"rgb(\" + Math.round(this.red) + \", \" + Math.round(this.green) + \", \" + Math.round(this.blue) + \")\" :\n                \"rgba(\" + Math.round(this.red) + \", \" + Math.round(this.green) + \", \" + Math.round(this.blue) + \", \" + this.roundA + \")\";\n        },\n\n        /**\n         * Convert color to RGB in percentage format\n         * @return {Object} Returns object with r,g,b,a properties in percentage\n         */\n        toPercentageRgb: function() {\n            return {\n                r: Math.round(Rise.Color.bound01(this.red, 255) * 100) + \"%\",\n                g: Math.round(Rise.Color.bound01(this.green, 255) * 100) + \"%\",\n                b: Math.round(Rise.Color.bound01(this.blue, 255) * 100) + \"%\",\n                a: this.alpha\n            };\n        },\n\n        /**\n         * Convert color to RGB string in percentage format\n         * @return {String} Returns RGB string in percentage format\n         */\n        toPercentageRgbString: function() {\n            return (this.alpha == 1) ?\n                \"rgb(\" + Math.round(Rise.Color.bound01(this.red, 255) * 100) + \"%, \" + Math.round(Rise.Color.bound01(this.green, 255) * 100) + \"%, \" + Math.round(Rise.Color.bound01(this.blue, 255) * 100) + \"%)\" :\n                \"rgba(\" + Math.round(Rise.Color.bound01(this.red, 255) * 100) + \"%, \" + Math.round(Rise.Color.bound01(this.green, 255) * 100) + \"%, \" + Math.round(Rise.Color.bound01(this.blue, 255) * 100) + \"%, \" + this.roundA + \")\";\n        },\n\n        /**\n         * Convert this color to name string\n         * @return {String|Boolean} Returns color name in user friendly notation or false if couldn't detect\n         */\n        toName: function() {\n            if (this.alpha === 0) {\n                return \"transparent\";\n            }\n\n            if (this.alpha < 1) {\n                return false;\n            }\n\n            return Rise.Color.hexNamesMap[Rise.Color.rgbToHex(this.red, this.green, this.blue).toUpperCase()] || false;\n        },\n\n        /**\n         * Convert color to DX Filter notation\n         * @param  {String} secondColor Second color\n         * @return {String} Returns DX Filter format for this color\n         */\n        toFilterString: function(secondColor) {\n            var hex8String = '#' + Rise.Color.rgbaToHex(this.red, this.green, this.blue, this.alpha),\n                secondHex8String = secondColor ? new Rise.Color(secondColor).toHex8String() : hex8String,\n                gradientType = this.gradientType ? \"GradientType = 1, \" : \"\";\n\n            return \"progid:DXImageTransform.Microsoft.gradient(\" + gradientType + \"startColorstr=\" + hex8String + \",endColorstr=\" + secondHex8String + \")\";\n        },\n\n        /**\n         * Print a string color depending on input format\n         * @param  {String} format Custom format\n         * @return {String} Returns string of this color depending of input format or custom format\n         */\n        toString: function(format) {\n            format = format || this.format;\n\n            var formattedString = false;\n\n            if (format === \"rgb\") {\n                formattedString = this.toRgbString();\n            } else if (format === \"prgb\") {\n                formattedString = this.toPercentageRgbString();\n            } else if (format === \"hex\" || format === \"hex6\") {\n                formattedString = this.toHexString();\n            } else if (format === \"hex3\") {\n                formattedString = this.toHexString(true);\n            } else if (format === \"hex8\") {\n                formattedString = this.toHex8String();\n            } else if (format === \"name\") {\n                formattedString = this.toName();\n            } else if (format === \"hsl\") {\n                formattedString = this.toHslString();\n            } else if (format === \"hsv\") {\n                formattedString = this.toHsvString();\n            }\n\n            return formattedString || this.toHexString();\n        },\n\n        /**\n         * Make color more lighten\n         * @param {Integer} amount Custom amount for lighten level in [0, 100] range\n         * @return {Rise.Color} Returns new color\n         */\n        lighten: function(amount) {\n            amount = (amount === 0) ? 0 : (amount || 10);\n\n            var hsl = this.toHsl();\n            hsl.l += amount / 100;\n            hsl.l = Rise.Color.clamp01(hsl.l);\n\n            return new Rise.Color(hsl);\n        },\n\n        /**\n         * Make color more brighten\n         * @param {Integer} amount Custom amount for brighten level in 0-100 range\n         * @return {Rise.Color} Returns new color\n         */\n        brighten: function(amount) {\n            amount = (amount === 0) ? 0 : (amount || 10);\n\n            var rgb = this.toRgb();\n            rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n            rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n            rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n\n            return new Rise.Color(rgb);\n        },\n\n        /**\n         * Make color more darken\n         * @param {Integer} amount Custom amount for darken level in 0-100 range\n         * @return {Rise.Color} Returns new color\n         */\n        darken: function(amount) {\n            amount = (amount === 0) ? 0 : (amount || 10);\n\n            var hsl = this.toHsl();\n            hsl.l -= amount / 100;\n            hsl.l = Rise.Color.clamp01(hsl.l);\n\n            return new Rise.Color(hsl);\n        },\n\n        /**\n         * Desaturate the color\n         * @param {Integer} amount Custom amount for desaturate in 0-100 range\n         * @return {Rise.Color} Returns new color\n         */\n        desaturate: function(amount) {\n            amount = (amount === 0) ? 0 : (amount || 10);\n\n            var hsl = this.toHsl();\n            hsl.s -= amount / 100;\n            hsl.s = Rise.Color.clamp01(hsl.s);\n\n            return new Rise.Color(hsl);\n        },\n\n        /**\n         * Saturate the color\n         * @param {Integer} amount Custom amount for saturate level in [0, 100] range\n         * @return {Rise.Color} Returns new color\n         */\n        saturate: function(amount) {\n            amount = (amount === 0) ? 0 : (amount || 10);\n\n            var hsl = this.toHsl();\n            hsl.s += amount / 100;\n            hsl.s = Rise.Color.clamp01(hsl.s);\n\n            return new Rise.Color(hsl);\n        },\n\n        /**\n         * Completely desaturate the color\n         * @return {Rise.Color} Returns new color\n         */\n        greyscale: function() {\n            return this.desaturate(100);\n        },\n\n        /**\n         * Spin the hue level for a given amount\n         * @param {Integer} amount Custom amount for spin from -360 to 360 range\n         * @return {Rise.Color} Returns new color\n         */\n        spin: function(amount) {\n            var hsl = this.toHsl(),\n                hue = (Math.round(hsl.h) + amount) % 360;\n\n            hsl.h = hue < 0 ? 360 + hue : hue;\n\n            return new Rise.Color(hsl);\n        },\n\n        /**\n         * Get analogous combinations for this color\n         * @param {Integer} results Count of results\n         * @param {Integer} slices Count of slices\n         * @return {Array} Returns array of Rise.Color\n         */\n        getAnalogous: function(results, slices) {\n            results = results || 6;\n            slices = slices || 30;\n\n            var hsl = this.toHsl(),\n                part = 360 / slices,\n                result = [new Rise.Color(this)];\n\n            for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results;) {\n                hsl.h = (hsl.h + part) % 360;\n                result.push(new Rise.Color(hsl));\n            }\n\n            return result;\n        },\n\n        /**\n         * Get complementary combinations for this color\n         * @return {Rise.Color} Returns Rise.Color instance with complementary color\n         */\n        getComplementary: function() {\n            var hsl = this.toHsl();\n            hsl.h = (hsl.h + 180) % 360;\n            return new Rise.Color(hsl);\n        },\n\n        /**\n         * Get monochromatic combinations for this color\n         * @param {Integer} results Count of results\n         * @return {Array} Returns array of Rise.Color\n         */\n        getMonochromatic: function(results) {\n            results = results || 6;\n\n            var hsv = this.toHsv(),\n                h = hsv.h,\n                s = hsv.s,\n                v = hsv.v,\n                result = [],\n                modification = 1 / results;\n\n            while (results--) {\n                result.push(new Rise.Color({\n                    h: h,\n                    s: s,\n                    v: v\n                }));\n                v = (v + modification) % 1;\n            }\n\n            return result;\n        },\n\n        /**\n         * Get splitcomplement combinations for this color\n         * @return {Array} Returns array of Rise.Color\n         */\n        getSplitComplementary: function() {\n            var hsl = this.toHsl(),\n                h = hsl.h;\n\n            return [\n                new Rise.Color(this),\n                new Rise.Color({\n                    h: (h + 72) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                }),\n                new Rise.Color({\n                    h: (h + 216) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                })\n            ];\n        },\n\n        /**\n         * Get triad combinations for this color\n         * @return {Array} Returns array of Rise.Color\n         */\n        getTriad: function() {\n            var hsl = this.toHsl(),\n                h = hsl.h;\n\n            return [\n                new Rise.Color(this),\n                new Rise.Color({\n                    h: (h + 120) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                }),\n                new Rise.Color({\n                    h: (h + 240) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                })\n            ];\n        },\n\n        /**\n         * Get tetrad combinations for this color\n         * @return {Array} Returns array of Rise.Color\n         */\n        getTetrad: function() {\n            var hsl = this.toHsl(),\n                h = hsl.h;\n\n            return [\n                new Rise.Color(this),\n                new Rise.Color({\n                    h: (h + 90) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                }),\n                new Rise.Color({\n                    h: (h + 180) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                }),\n                new Rise.Color({\n                    h: (h + 270) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                })\n            ];\n        }\n    }, {\n        /**\n         * Map of CSS colours. This map simplify select colours when set by name i.e. 'aqua'.\n         * @type {Object}\n         * @static\n         */\n        colorNamesMap: {\n            aliceblue: \"F0F8FF\",\n            antiquewhite: \"FAEBD7\",\n            aqua: \"00FFFF\",\n            aquamarine: \"7FFFD4\",\n            azure: \"F0FFFF\",\n            beige: \"F5F5DC\",\n            bisque: \"FFE4C4\",\n            black: \"000000\",\n            blanchedalmond: \"FFEBCD\",\n            blue: \"0000FF\",\n            blueviolet: \"8A2BE2\",\n            brown: \"A52A2A\",\n            burlywood: \"DEB887\",\n            burntsienna: \"EA7E5D\",\n            cadetblue: \"5F9EA0\",\n            chartreuse: \"7FFF00\",\n            chocolate: \"D2691E\",\n            coral: \"FF7F50\",\n            cornflowerblue: \"6495ED\",\n            cornsilk: \"FFF8DC\",\n            crimson: \"DC143C\",\n            cyan: \"00FFFF\",\n            darkblue: \"00008B\",\n            darkcyan: \"008B8B\",\n            darkgoldenrod: \"B8860B\",\n            darkgray: \"A9A9A9\",\n            darkgreen: \"006400\",\n            darkgrey: \"A9A9A9\",\n            darkkhaki: \"BDB76B\",\n            darkmagenta: \"8B008B\",\n            darkolivegreen: \"556B2F\",\n            darkorange: \"FF8C00\",\n            darkorchid: \"9932CC\",\n            darkred: \"8B0000\",\n            darksalmon: \"E9967A\",\n            darkseagreen: \"8FBC8F\",\n            darkslateblue: \"483D8B\",\n            darkslategray: \"2F4F4F\",\n            darkslategrey: \"2F4F4F\",\n            darkturquoise: \"00CED1\",\n            darkviolet: \"9400D3\",\n            deeppink: \"FF1493\",\n            deepskyblue: \"00BFFF\",\n            dimgray: \"696969\",\n            dimgrey: \"696969\",\n            dodgerblue: \"1E90FF\",\n            firebrick: \"B22222\",\n            floralwhite: \"FFFAF0\",\n            forestgreen: \"228B22\",\n            fuchsia: \"FF00FF\",\n            gainsboro: \"DCDCDC\",\n            ghostwhite: \"F8F8FF\",\n            gold: \"FFD700\",\n            goldenrod: \"DAA520\",\n            gray: \"808080\",\n            green: \"008000\",\n            greenyellow: \"ADFF2F\",\n            grey: \"808080\",\n            honeydew: \"F0FFF0\",\n            hotpink: \"FF69B4\",\n            indianred: \"CD5C5C\",\n            indigo: \"4B0082\",\n            ivory: \"FFFFF0\",\n            khaki: \"F0E68C\",\n            lavender: \"E6E6FA\",\n            lavenderblush: \"FFF0F5\",\n            lawngreen: \"7CFC00\",\n            lemonchiffon: \"FFFACD\",\n            lightblue: \"ADD8E6\",\n            lightcoral: \"F08080\",\n            lightcyan: \"E0FFFF\",\n            lightgoldenrodyellow: \"FAFAD2\",\n            lightgray: \"D3D3D3\",\n            lightgreen: \"90EE90\",\n            lightgrey: \"D3D3D3\",\n            lightpink: \"FFB6C1\",\n            lightsalmon: \"FFA07A\",\n            lightseagreen: \"20B2AA\",\n            lightskyblue: \"87CEFA\",\n            lightslategray: \"778899\",\n            lightslategrey: \"778899\",\n            lightsteelblue: \"B0C4DE\",\n            lightyellow: \"FFFFE0\",\n            lime: \"00FF00\",\n            limegreen: \"32CD32\",\n            linen: \"FAF0E6\",\n            magenta: \"FF00FF\",\n            maroon: \"800000\",\n            mediumaquamarine: \"66CDAA\",\n            mediumblue: \"0000CD\",\n            mediumorchid: \"BA55D3\",\n            mediumpurple: \"9370DB\",\n            mediumseagreen: \"3CB371\",\n            mediumslateblue: \"7B68EE\",\n            mediumspringgreen: \"00FA9A\",\n            mediumturquoise: \"48D1CC\",\n            mediumvioletred: \"C71585\",\n            midnightblue: \"191970\",\n            mintcream: \"F5FFFA\",\n            mistyrose: \"FFE4E1\",\n            moccasin: \"FFE4B5\",\n            navajowhite: \"FFDEAD\",\n            navy: \"000080\",\n            oldlace: \"FDF5E6\",\n            olive: \"808000\",\n            olivedrab: \"6B8E23\",\n            orange: \"FFA500\",\n            orangered: \"FF4500\",\n            orchid: \"DA70D6\",\n            palegoldenrod: \"EEE8AA\",\n            palegreen: \"98FB98\",\n            paleturquoise: \"AFEEEE\",\n            palevioletred: \"DB7093\",\n            papayawhip: \"FFEFD5\",\n            peachpuff: \"FFDAB9\",\n            peru: \"CD853F\",\n            pink: \"FFC0CB\",\n            plum: \"DDA0DD\",\n            powderblue: \"B0E0E6\",\n            purple: \"800080\",\n            red: \"FF0000\",\n            rosybrown: \"BC8F8F\",\n            royalblue: \"4169E1\",\n            saddlebrown: \"8B4513\",\n            salmon: \"FA8072\",\n            sandybrown: \"F4A460\",\n            seagreen: \"2E8B57\",\n            seashell: \"FFF5EE\",\n            sienna: \"A0522D\",\n            silver: \"C0C0C0\",\n            skyblue: \"87CEEB\",\n            slateblue: \"6A5ACD\",\n            slategray: \"708090\",\n            slategrey: \"708090\",\n            snow: \"FFFAFA\",\n            springgreen: \"00FF7F\",\n            steelblue: \"4682B4\",\n            tan: \"D2B48C\",\n            teal: \"008080\",\n            thistle: \"D8BFD8\",\n            tomato: \"FF6347\",\n            turquoise: \"40E0D0\",\n            violet: \"EE82EE\",\n            wheat: \"F5DEB3\",\n            white: \"FFFFFF\",\n            whitesmoke: \"F5F5F5\",\n            yellow: \"FFFF00\",\n            yellowgreen: \"9ACD32\"\n        },\n\n        /**\n         * IIFE that returns object with regex for color's strings\n         * @return {Object}\n         * @static\n         */\n        colorRegexMap: (function() {\n            var cssInteger = \"[-\\\\+]?\\\\d+%?\",\n                cssNumber = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\",\n                cssUnit = \"(?:\" + cssNumber + \")|(?:\" + cssInteger + \")\",\n                permissiveMatch3 = \"[\\\\s|\\\\(]+(\" + cssUnit + \")[,|\\\\s]+(\" + cssUnit + \")[,|\\\\s]+(\" + cssUnit + \")\\\\s*\\\\)?\",\n                permissiveMatch4 = \"[\\\\s|\\\\(]+(\" + cssUnit + \")[,|\\\\s]+(\" + cssUnit + \")[,|\\\\s]+(\" + cssUnit + \")[,|\\\\s]+(\" + cssUnit + \")\\\\s*\\\\)?\";\n\n            return {\n                rgb: new RegExp(\"rgb\" + permissiveMatch3),\n                rgba: new RegExp(\"rgba\" + permissiveMatch4),\n                hsl: new RegExp(\"hsl\" + permissiveMatch3),\n                hsla: new RegExp(\"hsla\" + permissiveMatch4),\n                hsv: new RegExp(\"hsv\" + permissiveMatch3),\n                hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n                hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n                hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n            };\n        })(),\n\n        /**\n         * Set bounds for alpha channel to [0, 1] range\n         * @param  {Float} alpha Alpha value\n         * @return {Float}       Returns incoming value if in bound and 1 otherwise\n         * @static\n         */\n        boundAlpha: function(alpha) {\n            alpha = parseFloat(alpha);\n\n            if (isNaN(alpha) || alpha < 0 || alpha > 1) {\n                alpha = 1;\n            }\n\n            return alpha;\n        },\n\n        /**\n         * Set bounds to values in [0, 1] range\n         * @param  {Integer} value Value that need to bound\n         * @param  {Integer} max Maximum value\n         * @return {Float} Returns float in [0, 1] range\n         * @static\n         * @example\n         * Rise.Color.bound01(40, 100); // 0.4\n         */\n        bound01: function(value, max) {\n            value = Rise.Color.isOnePointZero(value) ? '100%' : value;\n\n            var isPercentageValue = Rise.Color.isPercentage(value);\n            value = Math.min(max, Math.max(0, parseFloat(value)));\n\n            if (isPercentageValue) {\n                value = parseInt(value * max, 10) / 100;\n            }\n\n            if (Math.abs(value - max) < 0.000001) {\n                return 1;\n            }\n\n            return (value % max) / parseFloat(max);\n        },\n\n        /**\n         * Force a number between 0 and 1\n         * @param  {Integer} value Value that need to clamp\n         * @return {Integer} Returns clamped integer\n         * @static\n         * @example\n         * Rise.Color.clamp01(2); // 1\n         * Rise.Color.clamp01(0.4); // 0.4\n         */\n        clamp01: function(value) {\n            return Math.min(1, Math.max(0, value));\n        },\n\n        /**\n         * Force a HEX value to have 2 chars\n         * @param  {String} value Value that must be padded\n         * @return {String}       Returns padded string\n         * @static\n         * @example\n         * Rise.Color.pad2('F'); // 0F\n         * Rise.Color.pad2('FF'); // FF\n         */\n        pad2: function(value) {\n            return value.length == 1 ? '0' + value : '' + value;\n        },\n\n        /**\n         * Check if number is 1.0\n         * @param  {Float}  value Value for check\n         * @return {Boolean}      Returns true if 1.0\n         * @static\n         */\n        isOnePointZero: function(value) {\n            return (\n                Rise.Util.isString(value) &&\n                value.indexOf('.') != -1 &&\n                parseFloat(value) === 1\n            );\n        },\n\n        /**\n         * Check if value is percentage\n         * @param  {String} value Value that might be checked\n         * @return {Boolean}      Returns true if percentage value\n         * @static\n         */\n        isPercentage: function(value) {\n            return Rise.Util.isString(value) && value.indexOf('%') != -1;\n        },\n\n        /**\n         * Parse a base-16 hex value into a base-10 integer\n         * @param  {String} value HEX value\n         * @return {Integer}      Returns parsed integer\n         * @static\n         */\n        convertHexToInteger: function(value) {\n            return parseInt(value, 16);\n        },\n\n        /**\n         * Replace a decimal with it's percentage value\n         * @param  {Integer} value Decimal value\n         * @return {String}        Returns this value in percentage value\n         * @static\n         */\n        convertDecimalToPercentage: function(value) {\n            if (value <= 1) {\n                value = (value * 100) + \"%\";\n            }\n\n            return value;\n        },\n\n        /**\n         * Convert the decimal to HEX value\n         * @param  {Integer} value Decimal value\n         * @return {String}        Returns HEX string\n         * @static\n         */\n        convertDecimalToHex: function(value) {\n            return Math.round(parseFloat(value) * 255).toString(16);\n        },\n\n        /**\n         * Convert the HEX value to decimal\n         * @param  {String} value HEX value\n         * @return {Integer}      Returns decimal value\n         * @static\n         */\n        convertHexToDecimal: function(value) {\n            return Rise.Color.convertHexToInteger(value) / 255;\n        },\n\n        /**\n         * Convert RGB colour to RGB.\n         * Better to use this because here processing handling of bound or percentage in RGB profile.\n         * @param  {Integer} r Red channel\n         * @param  {Integer} g Green channel\n         * @param  {Integer} b Blue channel\n         * @return {Object}    Object with r, g, b properties\n         * @static\n         */\n        rgbToRgb: function(r, g, b) {\n            return {\n                r: Rise.Color.bound01(r, 255) * 255,\n                g: Rise.Color.bound01(g, 255) * 255,\n                b: Rise.Color.bound01(b, 255) * 255\n            };\n        },\n\n        /**\n         * Convert RGB colour to HSL\n         * @param  {Integer} r Red channel\n         * @param  {Integer} g Green channel\n         * @param  {Integer} b Blue channel\n         * @return {Object}    Object with h, s, l properties\n         * @static\n         */\n        rgbToHsl: function(r, g, b) {\n            r = Rise.Color.bound01(r, 255);\n            g = Rise.Color.bound01(g, 255);\n            b = Rise.Color.bound01(b, 255);\n\n            var max = Math.max(r, g, b),\n                min = Math.min(r, g, b),\n                h, s, l = (max + min) / 2;\n\n            if (max == min) {\n                h = s = 0;\n            } else {\n                var d = max - min;\n                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n                switch (max) {\n                    case r:\n                        h = (g - b) / d + (g < b ? 6 : 0);\n                        break;\n                    case g:\n                        h = (b - r) / d + 2;\n                        break;\n                    case b:\n                        h = (r - g) / d + 4;\n                        break;\n                }\n\n                h /= 6;\n            }\n\n            return {\n                h: h,\n                s: s,\n                l: l\n            };\n        },\n\n        /**\n         * Convert HSL colour to RGB\n         * @param  {Integer} h Hue channel\n         * @param  {Integer} s Saturation channel\n         * @param  {Integer} l Lightness channel\n         * @return {Object}    Object with r,g,b properties\n         * @static\n         */\n        hslToRgb: function(h, s, l) {\n            h = Rise.Color.bound01(h, 360);\n            s = Rise.Color.bound01(s, 100);\n            l = Rise.Color.bound01(l, 100);\n\n            function hue2rgb(p, q, t) {\n                if (t < 0) t += 1;\n                if (t > 1) t -= 1;\n                if (t < 1 / 6) return p + (q - p) * 6 * t;\n                if (t < 1 / 2) return q;\n                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n                return p;\n            }\n\n            var r, g, b;\n\n            if (s === 0) {\n                r = g = b = l;\n            } else {\n                var q = l < 0.5 ? l * (1 + s) : l + s - l * s,\n                    p = 2 * l - q;\n\n                r = hue2rgb(p, q, h + 1 / 3);\n                g = hue2rgb(p, q, h);\n                b = hue2rgb(p, q, h - 1 / 3);\n            }\n\n            return {\n                r: r * 255,\n                g: g * 255,\n                b: b * 255\n            };\n        },\n\n        /**\n         * Convert RGB colour to HSV\n         * @param  {Integer} r Red channel\n         * @param  {Integer} g Green channel\n         * @param  {Integer} b Blue channel\n         * @return {Object}    Object with h, s, v properties\n         * @static\n         */\n        rgbToHsv: function(r, g, b) {\n            r = Rise.Color.bound01(r, 255);\n            g = Rise.Color.bound01(g, 255);\n            b = Rise.Color.bound01(b, 255);\n\n            var max = Math.max(r, g, b),\n                min = Math.min(r, g, b),\n                h, s, v = max,\n                d = max - min;\n\n            s = max === 0 ? 0 : d / max;\n\n            if (max == min) {\n                h = 0;\n            } else {\n                switch (max) {\n                    case r:\n                        h = (g - b) / d + (g < b ? 6 : 0);\n                        break;\n                    case g:\n                        h = (b - r) / d + 2;\n                        break;\n                    case b:\n                        h = (r - g) / d + 4;\n                        break;\n                }\n\n                h /= 6;\n            }\n\n            return {\n                h: h,\n                s: s,\n                v: v\n            };\n        },\n\n        /**\n         * Convert HSV colour to RGB\n         * @param  {Integer} h Hue channel\n         * @param  {Integer} s Saturation channel\n         * @param  {Integer} v Value channel\n         * @return {Object}    Object with r,g,b properties\n         * @static\n         */\n        hsvToRgb: function(h, s, v) {\n            h = Rise.Color.bound01(h, 360) * 6;\n            s = Rise.Color.bound01(s, 100);\n            v = Rise.Color.bound01(v, 100);\n\n            var i = Math.floor(h),\n                f = h - i,\n                p = v * (1 - s),\n                q = v * (1 - f * s),\n                t = v * (1 - (1 - f) * s),\n                mod = i % 6,\n                r = [v, q, p, p, t, v][mod],\n                g = [t, v, v, q, p, p][mod],\n                b = [p, p, t, v, v, q][mod];\n\n            return {\n                r: r * 255,\n                g: g * 255,\n                b: b * 255\n            };\n        },\n\n        /**\n         * Convert RGB colour to HEX\n         * @param  {Integer} r Red channel\n         * @param  {Integer} g Green channel\n         * @param  {Integer} b Blue channel\n         * @param  {Boolean} allow3Char Allow 3 char notation in HEX\n         * @return {String} HEX in string\n         * @static\n         */\n        rgbToHex: function(r, g, b, allow3Char) {\n            var hex = [\n                Rise.Color.pad2(Math.round(r).toString(16)),\n                Rise.Color.pad2(Math.round(g).toString(16)),\n                Rise.Color.pad2(Math.round(b).toString(16))\n            ];\n\n            if (\n                allow3Char &&\n                hex[0].charAt(0) == hex[0].charAt(1) &&\n                hex[1].charAt(0) == hex[1].charAt(1) &&\n                hex[2].charAt(0) == hex[2].charAt(1)\n            ) {\n                return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n            }\n\n            return hex.join(\"\");\n        },\n\n        /**\n         * Convert RGBA colour to HEX\n         * @param  {Integer} r Red channel\n         * @param  {Integer} g Green channel\n         * @param  {Integer} b Blue channel\n         * @param  {Float} a Alpha channel\n         * @return {String}   Returns HEX 8 string\n         * @static\n         */\n        rgbaToHex: function(r, g, b, a) {\n            var hex = [\n                Rise.Color.pad2(Rise.Color.convertDecimalToHex(a)),\n                Rise.Color.pad2(Math.round(r).toString(16)),\n                Rise.Color.pad2(Math.round(g).toString(16)),\n                Rise.Color.pad2(Math.round(b).toString(16))\n            ];\n\n            return hex.join(\"\");\n        },\n\n        /**\n         * Create new Rise.Color instance from string colour\n         * @param  {String} color String representation of colour\n         * @return {Rise.Color}   Returns Rise.Color instance\n         */\n        fromString: function(color, config) {\n            var trimLeft = /^[\\s,#]+/,\n                trimRight = /\\s+$/,\n                named = false,\n                match;\n\n            color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();\n\n            if (Rise.Color.colorNamesMap[color]) {\n                color = Rise.Color.colorNamesMap[color];\n                named = true;\n            } else if (color == 'transparent') {\n                return new Rise.Color({\n                    r: 0,\n                    g: 0,\n                    b: 0,\n                    a: 0\n                }, {\n                    format: \"name\"\n                });\n            }\n\n            if ((match = Rise.Color.colorRegexMap.rgb.exec(color))) {\n                return new Rise.Color({\n                    r: match[1],\n                    g: match[2],\n                    b: match[3]\n                }, config);\n            } else if ((match = Rise.Color.colorRegexMap.rgba.exec(color))) {\n                return new Rise.Color({\n                    r: match[1],\n                    g: match[2],\n                    b: match[3],\n                    a: match[4]\n                }, config);\n            } else if ((match = Rise.Color.colorRegexMap.hsl.exec(color))) {\n                return new Rise.Color({\n                    h: match[1],\n                    s: match[2],\n                    l: match[3]\n                }, config);\n            } else if ((match = Rise.Color.colorRegexMap.hsla.exec(color))) {\n                return new Rise.Color({\n                    h: match[1],\n                    s: match[2],\n                    l: match[3],\n                    a: match[4]\n                }, config);\n            } else if ((match = Rise.Color.colorRegexMap.hsv.exec(color))) {\n                return new Rise.Color({\n                    h: match[1],\n                    s: match[2],\n                    v: match[3]\n                }, config);\n            } else if ((match = Rise.Color.colorRegexMap.hex8.exec(color))) {\n                return new Rise.Color({\n                    a: Rise.Color.convertHexToDecimal(match[1]),\n                    r: Rise.Color.convertHexToInteger(match[2]),\n                    g: Rise.Color.convertHexToInteger(match[3]),\n                    b: Rise.Color.convertHexToInteger(match[4]),\n                }, {\n                    format: config.format || (named ? \"name\" : \"hex8\")\n                });\n            } else if ((match = Rise.Color.colorRegexMap.hex6.exec(color))) {\n                return new Rise.Color({\n                    r: Rise.Color.convertHexToInteger(match[1]),\n                    g: Rise.Color.convertHexToInteger(match[2]),\n                    b: Rise.Color.convertHexToInteger(match[3]),\n                }, {\n                    format: config.format || (named ? \"name\" : \"hex\")\n                });\n            } else if ((match = Rise.Color.colorRegexMap.hex3.exec(color))) {\n                return new Rise.Color({\n                    r: Rise.Color.convertHexToInteger(match[1] + '' + match[1]),\n                    g: Rise.Color.convertHexToInteger(match[2] + '' + match[2]),\n                    b: Rise.Color.convertHexToInteger(match[3] + '' + match[3]),\n                }, {\n                    format: config.format || (named ? \"name\" : \"hex\")\n                });\n            } else {\n                Rise.Logger.warning('Color -> %O not parsed', color);\n                return false;\n            }\n\n            return false;\n        },\n\n        /**\n         * Create Rise.Color from ratio\n         * @param  {Object|String} color  Can be object with r, g, b, a properties or string\n         * @param  {Object} config Configuration object\n         * @return {Rise.Color}\n         * @static\n         */\n        fromRatio: function(color, config) {\n            var newColor = {};\n\n            if (Rise.Util.isObject(color)) {\n                Object.keys(color).forEach(function(key) {\n                    if (key === \"a\") {\n                        newColor[key] = color[key];\n                    } else {\n                        newColor[key] = Rise.Color.convertDecimalToPercentage(color[key]);\n                    }\n                });\n\n                color = newColor;\n            }\n\n            return new Rise.Color(color, config);\n        },\n\n        /**\n         * Check if two colors are equals\n         * @param  {String} firstColor  First color\n         * @param  {String} secondColor Second color\n         * @return {Boolean}            True if colors equals and false otherwise\n         * @static\n         */\n        equals: function(firstColor, secondColor) {\n            if (!firstColor || !secondColor) {\n                return false;\n            }\n\n            return new Rise.Color(firstColor).toRgbString() == new Rise.Color(secondColor).toRgbString();\n        },\n\n        /**\n         * Generate random color and return it\n         * @return {Rise.Color} Random color\n         * @static\n         */\n        random: function() {\n            return Rise.Color.fromRatio({\n                r: Math.random(),\n                g: Math.random(),\n                b: Math.random()\n            });\n        },\n\n        /**\n         * Mix 2 colors\n         * @param  {String} color1  First color\n         * @param  {String} color2  Second color\n         * @param  {Integer} amount Amount of mix\n         * @return {Rise.Color}     Returns mixed color\n         * @static\n         */\n        mix: function(firstColor, secondColor, amount) {\n            amount = amount === 0 ? 0 : (amount || 50);\n\n            var rgbA = new Rise.Color(firstColor).toRgb(),\n                rgbB = new Rise.Color(secondColor).toRgb(),\n                p = amount / 100,\n                w = p * 2 - 1,\n                a = rgbB.a - rgbA.a,\n                w1,\n                w2;\n\n            if (w * a == -1) {\n                w1 = w;\n            } else {\n                w1 = (w + a) / (1 + w * a);\n            }\n\n            w1 = (w1 + 1) / 2;\n            w2 = 1 - w1;\n\n            return new Rise.Color({\n                r: rgbB.r * w1 + rgbA.r * w2,\n                g: rgbB.g * w1 + rgbA.g * w2,\n                b: rgbB.b * w1 + rgbA.b * w2,\n                a: rgbB.a * p + rgbA.a * (1 - p)\n            });\n        }\n    });\n\n    /**\n     * Map of HEX colours names.\n     * HEX value as key and it name as value in object.\n     * @type {Object}\n     * @static\n     */\n    Rise.Color.hexNamesMap = Rise.Util.flipObject(Rise.Color.colorNamesMap);\n})(this);\n(function(global) {\n    'use strict';\n\n    global.Rise.Font = Rise.Class.create({\n        /**\n         * Create new Rise.Font instance\n         * @constructor\n         * @param  {Element|String|Object} options Font options\n         * @return {Rise.Font}                     Returns Rise.Font instance\n         * @example\n         * new Rise.Font({\n         *     style: 'normal',\n         *     variant: 'normal',\n         *     weight: 'normal',\n         *     size: 'medium',\n         *     lineHeight: 'normal',\n         *     family: 'serif'\n         * });\n         */\n        init: function(font) {\n            font = font || {};\n\n            if (font instanceof Rise.Font) {\n                return font;\n            } else if (Rise.Util.isString(font)) {\n                return Rise.Font.fromString(font);\n            } else if (font instanceof Element) {\n                return Rise.Font.fromNode(font);\n            } else if (Rise.Util.isObject(font)) {\n                Rise.Logger.startGroup(true, 'Rise.Font -> init()');\n                Rise.Logger.log('Trying to parse font object -> %O', font);\n\n                this.style = font.style || 'normal';\n                this.variant = font.variant || 'normal';\n                this.weight = font.weight || 'normal';\n                this.size = font.size || 'medium';\n                this.lineHeight = font.lineHeight || 'normal';\n                this.family = font.family || 'serif';\n\n                if (!Rise.Font.isFontValid(this)) {\n                    Rise.Logger.warning('Rise.Font -> Something wrong with font -> %O', font);\n                }\n\n                Rise.Logger.log('Instantiated Rise.Font -> %O', this);\n                Rise.Logger.endGroup();\n            } else {\n                Rise.Logger.warning('Font -> %O not parsed', font);\n                return false;\n            }\n\n            return this;\n        },\n\n        /**\n         * Check if Rise.Font is valid instance\n         * @return {Boolean} Returns true if Rise.Font instance valid\n         * @example\n         * new Rise.Font().isValid(); // true\n         */\n        isValid: function() {\n            return Rise.Font.isFontValid(this);\n        },\n\n        /**\n         * Get current style\n         * @return {String} Returns CSS font style\n         * @example\n         * new Rise.Font().getStyle();\n         */\n        getStyle: function() {\n            return this.style;\n        },\n\n        /**\n         * Set style to Rise.Font\n         * @param {String} style New CSS font style\n         * @return {Rise.Font} Returns Rise.Font instance\n         * @example\n         * new Rise.Font().setStyle('normal');\n         */\n        setStyle: function(style) {\n            if (Rise.Font.isFontStyleValid(style)) {\n                this.style = style;\n            } else {\n                Rise.Logger.warning('Rise.Font.setStyle() -> \"%s\" is not valid value', style);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font variant\n         * @return {String} Returns CSS font variant\n         * @example\n         * new Rise.Font().getVariant();\n         */\n        getVariant: function() {\n            return this.variant;\n        },\n\n        /**\n         * Set font variant to Rise.Font\n         * @param {String} variant New CSS font variant\n         * @return {Rise.Font} Returns Rise.Font instance\n         * @example\n         * new Rise.Font().setVariant('normal');\n         */\n        setVariant: function(variant) {\n            if (Rise.Font.isFontVariantValid(variant)) {\n                this.variant = variant;\n            } else {\n                Rise.Logger.warning('Rise.Font.setVariant() -> \"%s\" is not valid value', variant);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font weight\n         * @return {String} Returns CSS font weight\n         * @example\n         * new Rise.Font().getWeight();\n         */\n        getWeight: function() {\n            return this.weight;\n        },\n\n        /**\n         * Set font weight to Rise.Font\n         * @param {String} weight New CSS font weight\n         * @return {Rise.Font} Returns Rise.Font instance\n         * @example\n         * new Rise.Font().setWeight('normal')\n         */\n        setWeight: function(weight) {\n            if (Rise.Font.isFontWeightValid(weight)) {\n                this.weight = weight;\n            } else {\n                Rise.Logger.warning('Rise.Font.setWeight() -> \"%s\" is not valid value', weight);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font size\n         * @return {String} Returns CSS font size\n         * @example\n         * new Rise.Font().getSize();\n         */\n        getSize: function() {\n            return this.size;\n        },\n\n        /**\n         * Set font size to Rise.Font\n         * @param {String} size New CSS font size\n         * @return {Rise.Font} Returns Rise.Font instance\n         * @example\n         * new Rise.Font().setSize('medium');\n         */\n        setSize: function(size) {\n            if (Rise.Font.isFontSizeValid(size)) {\n                this.size = size;\n            } else {\n                Rise.Logger.warning('Rise.Font.setSize() -> \"%s\" is not valid value', size);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font line height\n         * @return {String} Returns CSS font line-height\n         * @example\n         * new Rise.Font().getLineHeight();\n         */\n        getLineHeight: function() {\n            return this.lineHeight;\n        },\n\n        /**\n         * Set font line height to Rise.Font\n         * @param {String} lineHeight New CSS font line-height\n         * @return {Rise.Font} Returns Rise.Font instance\n         * @example\n         * new Rise.Font().setLineHeight('normal');\n         */\n        setLineHeight: function(lineHeight) {\n            if (Rise.Font.isFontLineHeightValid(lineHeight)) {\n                this.lineHeight = lineHeight;\n            } else {\n                Rise.Logger.warning('Rise.Font.setLineHeight() -> \"%s\" is not valid value', lineHeight);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get current font family\n         * @return {String} Returns CSS font family\n         * @example\n         * new Rise.Font().getFamily();\n         */\n        getFamily: function() {\n            return this.family;\n        },\n\n        /**\n         * Set font family to Rise.Font\n         * @param {String} family New CSS font family\n         * @return {Rise.Font} Returns Rise.Font instance\n         * @example\n         * new Rise.Font().setFamily('serif');\n         */\n        setFamily: function(family) {\n            if (Rise.Font.isFontFamilyValid(family)) {\n                this.family = family;\n            } else {\n                Rise.Logger.warning('Rise.Font.setFamily() -> \"%s\" is not valid value', family);\n            }\n\n            return this;\n        },\n\n        /**\n         * Convert Rise.Font to CSS string representation\n         * @return {String} Returns CSS string of Rise.Font representation\n         * @example\n         * new Rise.Font().toString();\n         */\n        toString: function() {\n            return (\n                [\n                    this.getStyle(),\n                    this.getVariant(),\n                    this.getWeight(),\n                    this.getSize(),\n                    '/' + this.getLineHeight(),\n                    this.getFamily()\n                ].join(' ')\n            );\n        }\n    }, {\n        /**\n         * Map of CSS units\n         * @static\n         * @type {Array}\n         */\n        unitsMap: ['em', 'ex', 'pt', 'px', '%'],\n\n        /**\n         * Map of CSS font styles\n         * @static\n         * @type {Array}\n         */\n        fontStyleMap: ['normal', 'italic', 'oblique', 'inherit'],\n\n        /**\n         * Map of CSS font variants\n         * @static\n         * @type {Array}\n         */\n        fontVariantMap: ['normal', 'small-caps', 'inherit'],\n\n        /**\n         * Map of CSS font weights\n         * @static\n         * @type {Array}\n         */\n        fontWeightMap: ['bold', 'bolder', 'lighter', 'normal', '100', '200', '300', '400', '500', '600', '700', '800', '900'],\n\n        /**\n         * Map of CSS font sizes\n         * @static\n         * @type {Array}\n         */\n        fontSizeMap: ['xx-small', 'x-small', 'smaller', 'small', 'medium', 'large', 'larger', 'x-large', 'xx-large'],\n\n        /**\n         * Map of CSS font line heights\n         * @static\n         * @type {Array}\n         */\n        fontLineHeightMap: ['normal', 'inherit'],\n\n        /**\n         * Check if provided value is valid CSS value\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid CSS value\n         */\n        isCssValueValid: function(value) {\n            return Rise.Font.unitsMap.some(function(unit) {\n                return value.lastIndexOf(unit) != -1;\n            });\n        },\n\n        /**\n         * Check if provided value is valid CSS font style\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontStyleValid: function(value) {\n            return Rise.Font.fontStyleMap.indexOf(value) != -1;\n        },\n\n        /**\n         * Check if provided value is valid CSS font variant\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontVariantValid: function(value) {\n            return Rise.Font.fontVariantMap.indexOf(value) != -1;\n        },\n\n        /**\n         * Check if provided value is valid CSS font weight\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontWeightValid: function(value) {\n            return Rise.Font.fontWeightMap.indexOf(value) != -1;\n        },\n\n        /**\n         * Check if provided value is valid CSS font size\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontSizeValid: function(value) {\n            return (\n                Rise.Font.fontSizeMap.indexOf(value) != -1 ||\n                Rise.Font.isCssValueValid(value)\n            );\n        },\n\n        /**\n         * Check if provided value is valid CSS font line height\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontLineHeightValid: function(value) {\n            return (\n                Rise.Font.isCssValueValid(value) ||\n                Rise.Font.fontLineHeightMap.indexOf(value) != -1\n            );\n        },\n\n        /**\n         * Check if provided value is valid CSS font family\n         * @static\n         * @param  {String}  value Value that need to check\n         * @return {Boolean}       Returns true if value is valid\n         */\n        isFontFamilyValid: function(value) {\n            // TODO: implement\n            return true;\n        },\n\n        /**\n         * Check whole Rise.Font instance for valid values\n         * @static\n         * @param  {Rise.Font}  font Rise.Font instance where need to check their font values\n         * @return {Boolean}         Returns true if Rise.Font is correct instance\n         */\n        isFontValid: function(font) {\n            return (\n                Rise.Font.isFontStyleValid(font.getStyle()) &&\n                Rise.Font.isFontVariantValid(font.getVariant()) &&\n                Rise.Font.isFontWeightValid(font.getWeight()) &&\n                Rise.Font.isFontSizeValid(font.getSize()) &&\n                Rise.Font.isFontLineHeightValid(font.getLineHeight()) &&\n                Rise.Font.isFontFamilyValid(font.getFamily())\n            );\n        },\n\n        /**\n         * Create Rise.Font instance from string representation\n         * @static\n         * @param  {String} font    Font string\n         * @return {Rise.Font}      Returns Rise.Font instance with parsed options from string\n         */\n        fromString: function(font) {\n            // TODO: implement\n            Rise.Logger.warning('Rise.Font -> fromString() not realized yet');\n            return new Rise.Font();\n        },\n\n        /**\n         * Create Rise.Font instance from exists node element\n         * @static\n         * @param  {Element} element Existing node element from where font options will parse\n         * @return {Rise.Font}       Returns Rise.Font instance\n         */\n        fromNode: function(element) {\n            var style = window.getComputedStyle(element, null);\n\n            return new Rise.Font({\n                style: style.getPropertyValue('font-style'),\n                variant: style.getPropertyValue('font-variant'),\n                weight: style.getPropertyValue('font-weight'),\n                size: style.getPropertyValue('font-size'),\n                lineHeight: style.getPropertyValue('line-height'),\n                family: style.getPropertyValue('font-family')\n            });\n        }\n    });\n})(this);\n(function(global) {\n    'use strict';\n\n    /**\n     * Current log level\n     * @type {Number}\n     * @private\n     */\n    var currentLogLevel = 3;\n\n    /**\n     * Check if level is allow to print message\n     * @param  {Integer}  level Level that need to check\n     * @return {Boolean}        Returns true if this level can be printed out\n     * @private\n     */\n    function isAllowedLevel(level) {\n        return level >= currentLogLevel;\n    }\n\n    /**\n     * Prepend message to every log message\n     * @param  {String} string Message to what will be prepended header message\n     * @return {String}        Returns resulting strint\n     * @private\n     */\n    function prependLoggerInfo(string) {\n        return ['Rise', new Date().toLocaleTimeString(), string].join(' -> ');\n    }\n\n    /**\n     * Invoke console methods\n     * @param  {String} type Type of console that need to be invoked\n     * @param  {Array} args Array of arguments to console method\n     * @private\n     * @example\n     * invokeConsole('log', ['test', 'test2']); // test test2\n     */\n    function invokeConsole(type, args) {\n        args = Array.prototype.slice.call(args, 0);\n\n        if (console[type] && Rise.Util.isFunction(console[type])) {\n            args[0] = prependLoggerInfo(args[0] ? args[0] : '');\n            console[type].apply(console, args);\n        }\n    }\n\n    /**\n     * Print welcome message to console\n     * @private\n     */\n    (function printWelcomeMessage() {\n        if (window.chrome) {\n            console.log.apply(console, [\n                '%c %c %c Rise v' + Rise.getVersion() + ' %c %c %c',\n                'background: #0E173E; font-size: 8pt;',\n                'background: #020C25; font-size: 9pt;',\n                'color: #FFFFFF; background: #0D0B0E; font-size: 10pt',\n                'background: #020C25; font-size: 9pt;',\n                'background: #0E173E; font-size: 8pt;',\n                'background: #0E173E; font-size: 8pt;'\n            ]);\n        } else {\n            console.log('Rise v' + Rise.getVersion());\n        }\n    })();\n\n    /**\n     * Logger object\n     * @static\n     * @type {Object}\n     */\n    var Logger = {\n        /**\n         * Allow print out all messages\n         * @static\n         * @type {Number}\n         */\n        VERBOSE: 1,\n\n        /**\n         * Allow print out only .debug(), .error(), .warn(), .info()\n         * @static\n         * @type {Number}\n         */\n        DEBUG: 2,\n\n        /**\n         * Allow print out only .error(), .warn(), .info()\n         * @static\n         * @type {Number}\n         */\n        ERROR: 3,\n\n        /**\n         * Allow print out only .warn() and .info()\n         * @static\n         * @type {Number}\n         */\n        WARNING: 4,\n\n        /**\n         * Allow print out only .info()\n         * @static\n         * @type {Number}\n         */\n        INFO: 5,\n\n        /**\n         * Disable all logs\n         * @static\n         * @type {Number}\n         */\n        OFF: 100,\n\n        /**\n         * Set current level for logger\n         * @param {Integer} level Predefined constant in Rise.Logger\n         * @return {Rise.Logger}\n         * @static\n         * @example\n         * Rise.Logger.setLevel(Rise.Logger.VERBOSE);\n         */\n        setLevel: function(level) {\n            currentLogLevel = level;\n            return this;\n        },\n\n        /**\n         * Get current log level\n         * @static\n         * @return {Integer} Returns integer value of current log level\n         */\n        getLevel: function() {\n            return currentLogLevel;\n        },\n\n        /**\n         * Log message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        log: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('log', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Debug message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        debug: function() {\n            if (isAllowedLevel(this.DEBUG)) {\n                invokeConsole('debug', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Error message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        error: function() {\n            if (isAllowedLevel(this.ERROR)) {\n                invokeConsole('error', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Warning message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        warning: function() {\n            if (isAllowedLevel(this.WARNING)) {\n                invokeConsole('warn', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Info message to console\n         * @static\n         * @return {Rise.Logger}\n         */\n        info: function() {\n            if (isAllowedLevel(this.INFO)) {\n                invokeConsole('info', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Start new group in console\n         * @static\n         * @param {Boolean} [startCollapsed] If first argument true, group will be collapsed\n         * @return {Rise.Logger}\n         */\n        startGroup: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                if (Rise.Util.isBoolean(arguments[0]) && arguments[0] === true) {\n                    invokeConsole('groupCollapsed', Array.prototype.slice.call(arguments, 1));\n                } else {\n                    invokeConsole('group', arguments);\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * End current group in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        endGroup: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('groupEnd', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Start profiling time in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        startTime: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('time', arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * End profiling time in console\n         * @static\n         * @return {Rise.Logger}\n         */\n        endTime: function() {\n            if (isAllowedLevel(this.VERBOSE)) {\n                invokeConsole('timeEnd', arguments);\n            }\n\n            return this;\n        }\n    };\n\n    global.Rise.Logger = Logger;\n\n})(this);\n(function(global) {\n    'use strict';\n\n    global.Rise.Opacity = Rise.Class.create({\n        /**\n         * Create new Rise.Opacity object\n         * @constructor\n         * @param {Float} opacity Percentage range [0, 100] (100% - transparent, 0% - blank) or [0, 1] range\n         * @return {Rise.Opacity} Returns new Rise.Opacity instance\n         * @example\n         * new Rise.Opacity(40).toString(); // 0.60\n         * new Rise.Opacity(0.20).getOpacity(); // 80\n         */\n        init: function(opacity) {\n            opacity = opacity || 0;\n\n            if (opacity instanceof Rise.Opacity) {\n                return opacity;\n            }\n\n            Rise.Logger.startGroup(true, 'Rise.Opacity -> init()');\n            Rise.Logger.log('Trying to parse opacity -> \"$s\"', opacity);\n            this.set(opacity);\n            Rise.Logger.endGroup();\n\n            return this;\n        },\n\n        /**\n         * Set opacity\n         * @param {Integer} opacity Opacity in percentage range [0, 100] or [0, 1] range\n         * @return {Rise.Opacity} Returns current Rise.Opacity instance\n         * @example\n         * new Rise.Opacity(20).set(60).toString(); // 0.4\n         */\n        set: function(opacity) {\n            if (Rise.Opacity.isDecimal01Value(opacity)) {\n                Rise.Logger.log('\"%s\" decimal value, converting to percentage', opacity);\n                this.opacity = Rise.Opacity.convertCssToPercentage(opacity);\n            } else if (Rise.Opacity.isPercentageValue(opacity)) {\n                Rise.Logger.log('\"%s\" percentage value, setting it', opacity);\n                this.opacity = opacity;\n            } else {\n                Rise.Logger.warning('Opacity -> %O not parsed, set to 0%', opacity);\n                this.opacity = 0;\n            }\n\n            return this;\n        },\n\n        /**\n         * Get opacity in percentage\n         * @return {Integer} Returns opacity in range from 0% to 100%\n         * @example\n         * new Rise.Opacity(60).get(); // 60\n         */\n        get: function() {\n            return this.opacity;\n        },\n\n        /**\n         * Convert opacity value to CSS string\n         * @return {String} Returns string which you can apply to CSS\n         */\n        toString: function() {\n            return Rise.Opacity.convertPercentageToCss(this.opacity);\n        }\n    }, {\n        /**\n         * Check if provided value is percentage value in [0, 100] range and not decimal\n         * @param  {Float} value Value that need to be checked\n         * @return {Boolean} True if value is percentage value\n         * @static\n         * @example\n         * isPercentageValue(20); // true\n         * isPercentageValue(0); // true\n         * isPercentageValue(400); // false\n         * isPercentageValue(0.40); //false\n         */\n        isPercentageValue: function(value) {\n            return (\n                Rise.Util.isNumber(value) &&\n                value >= 0 &&\n                value <= 100 &&\n                value == Math.floor(value)\n            );\n        },\n\n        /**\n         * Check if provided value is decimal value in [0, 1] range\n         * @param  {Float} value Value that need to be checked\n         * @return {Boolean} True if value is decimal\n         * @static\n         * @example\n         * isDecimal01Value(0.20); // true\n         * isDecimal01Value(2); // false\n         * isDecimal01Value(1.00); // false\n         */\n        isDecimal01Value: function(value) {\n            return (\n                Rise.Util.isNumber(value) &&\n                value >= 0 &&\n                value <= 1 &&\n                value != Math.floor(value)\n            );\n        },\n\n        /**\n         * Convert CSS opacity value to percentage value\n         * @param  {Float} value CSS opacity value that need to be converted\n         * @return {Float} Returns float value in percentage\n         * @static\n         * @example\n         * Rise.Opacity.convertCssToPercentage(0.40); // 60%\n         * Rise.Opacity.convertCssToPercentage(1); // 0%\n         */\n        convertCssToPercentage: function(value) {\n            return (100 - (value * 100.0).toFixed(0));\n        },\n\n        /**\n         * Convert percentage value to CSS opacity\n         * @param  {Float} value Percentage value\n         * @return {Float} Returns float value for CSS opacity\n         * @static\n         * @example\n         * Rise.Opacity.convertPercentageToCss(60); // 0.40\n         * Rise.Opacity.convertPercentageToCss(0); // 1\n         */\n        convertPercentageToCss: function(value) {\n            return (100 - value) / 100.0;\n        }\n    });\n})(this);\n(function(global) {\n    'use strict';\n\n    /**\n     * Factory method that returns new Rise.RQuery instance\n     * @static\n     * @return {Rise.RQuery} Returns Rise.RQuery instance\n     * @example\n     * Rise.$('div');\n     * Rise.$('.my-selector');\n     */\n    global.Rise.$ = function() {\n        return Rise.RQuery.apply(Object.create(Rise.RQuery.prototype), arguments);\n    };\n\n    /**\n     * Factory method that returns new Rise.RQuery instance with created Element\n     * @static\n     * @param  {String} tag Tag element that need to create\n     * @return {Rise.RQuery} Returns Rise.RQuery instance with created Element\n     * @example\n     * Rise.$.create('div');\n     * Rise.$.create('span').text('My text');\n     */\n    global.Rise.$.create = function(tag) {\n        return new Rise.RQuery(document.createElement(tag));\n    };\n\n    global.Rise.RQuery = Rise.Class.create({\n        /**\n         * Create new Rise.RQuery instance\n         * @constructor\n         * @param  {String|Rise.RQuery|Element|Array} selector Selector or exists Element\n         * @param  {Element|Document|Window} parent Parent from where selector will parse\n         * @return {Rise.RQuery} Returns Rise.RQuery instance\n         * @example\n         * new Rise.RQuery('.selector');\n         */\n        init: function(selector, parent) {\n            selector = selector || window;\n            parent = parent || document;\n\n            /**\n             * Push Element to this.elements if valid\n             * @this {Rise.RQuery}\n             * @param  {Element} element It should be Element instance\n             * @private\n             */\n            var pushElement = function(element) {\n                if (element instanceof Element) {\n                    this.elements.push(element);\n                }\n            }.bind(this);\n\n            this.elements = [];\n\n            Rise.Logger.startGroup(true, 'Rise.RQuery -> init()');\n            Rise.Logger.log('Parsing selector -> \"%O\" with parent -> %O', selector, parent);\n\n            if (selector instanceof Rise.RQuery) {\n                this.elements = selector.get();\n            } else if (\n                Rise.Util.isArray(selector) ||\n                selector instanceof HTMLCollection ||\n                selector instanceof NodeList\n            ) {\n                Array.prototype.forEach.call(selector, pushElement);\n            } else if (selector instanceof Element) {\n                this.elements[0] = selector;\n            } else if (Rise.Util.isString(selector)) {\n                Array.prototype.forEach.call(parent.querySelectorAll(selector), pushElement);\n            } else {\n                Rise.Logger.warning('Selector is not valid -> %O', selector);\n            }\n\n            Rise.Logger.log('Instantiated Rise.RQuery -> %O', this);\n            Rise.Logger.endGroup();\n\n            return this;\n        },\n\n        /**\n         * Get Element by index\n         * @param  {Integer} index Index\n         * @return {Array|Element} Returns Element with corresponding index or array of elements\n         * @example\n         * Rise.$('body').get(0);\n         * Rise.$('div').get();\n         */\n        get: function(index) {\n            return Rise.Util.isUndefined(index) ? this.elements : this.elements[index];\n        },\n\n        /**\n         * Get elements count\n         * @return {Integer} Returns elements count\n         * @example\n         * Rise.$('body').count(); // 1\n         */\n        count: function() {\n            return (this.elements && this.elements.length) || 0;\n        },\n\n        /**\n         * Iterate through all elements and call callback function\n         * @param  {Function} cb Callback which called at each iteration cb(element, index, array)\n         * @return {Rise.RQuery}\n         * @example\n         * Rise.$('div').each(function(element, index, array) {\n         *     console.log(element, index, array);\n         * });\n         */\n        each: function(cb) {\n            Array.prototype.forEach.call(this.get(), cb);\n            return this;\n        },\n\n        /**\n         * Get parent node\n         * @return {Rise.RQuery} Returns parent node of element\n         * @example\n         * Rise.$('body').parent();\n         */\n        parent: function() {\n            return new Rise.RQuery(this.get(0).parentNode);\n        },\n\n        /**\n         * Get array of children nodes\n         * @return {Rise.RQuery} Return Rise.RQuery object with child nodes\n         * @example\n         * Rise.$('body').children();\n         */\n        children: function() {\n            return new Rise.RQuery(this.get(0).children);\n        },\n\n        /**\n         * Check if node contains other node\n         * @param {Rise.RQuery} child Child node which need to check for exists in node\n         * @return {Boolean} True if contains\n         * @example\n         * Rise.$('body').contains(Rise.$('div'));\n         */\n        contains: function(child) {\n            child = child.get(0);\n\n            var element = this.get(0);\n\n            return element !== child && element.contains(child);\n        },\n\n        /**\n         * Get node's width\n         * @return {Integer} Returns offsetWidth of node\n         * @example\n         * Rise.$('div').offsetWidth();\n         */\n        offsetWidth: function() {\n            return this.get(0).offsetWidth;\n        },\n\n        /**\n         * Get node's height\n         * @return {Integer} Returns offsetHeight of node\n         * @example\n         * Rise.$('div').offsetHeight();\n         */\n        offsetHeight: function() {\n            return this.get(0).offsetHeight;\n        },\n\n        /**\n         * Get left offset of node\n         * @return {Integer} Returns offsetLeft of node\n         * @example\n         * Rise.$('div').offsetLeft();\n         */\n        offsetLeft: function() {\n            return this.get(0).offsetLeft;\n        },\n\n        /**\n         * Get top offset of node\n         * @return {Integer} Returns offsetTop of node\n         * @example\n         * Rise.$('div').offsetTop();\n         */\n        offsetTop: function() {\n            return this.get(0).offsetTop;\n        },\n\n        /**\n         * Focus at node\n         * @return {Rise.RQuery} Returns Rise.RQuery instance\n         * @example\n         * Rise.$('input').focus();\n         */\n        focus: function() {\n            this.get(0).focus();\n            return this;\n        },\n\n        /**\n         * Unfocus from node\n         * @return {Rise.RQuery} Returns Rise.RQuery instance\n         * @example\n         * Rise.$('input').blur();\n         */\n        blur: function() {\n            this.get(0).blur();\n            return this;\n        },\n\n        /**\n         * Iterate through nodes and filter them out\n         * @param  {Function} cb Callback function accept 3 arguments cb(node, index, array) and must return bool\n         * @return {Rise.RQuery} Returns Rise.RQuery instance with filtered nodes\n         * @example\n         * Rise.$('div').filter(function(node, index, array) {\n         *     return Rise.$(node).hasClass('example');\n         * });\n         */\n        filter: function(cb) {\n            if (Rise.Util.isFunction(cb)) {\n                return new Rise.RQuery(Array.prototype.filter.call(this.get(), cb));\n            } else {\n                Rise.Logger.warning('Rise.RQuery.filter() -> You must provide function');\n            }\n        },\n\n        /**\n         * Find nodes by selector, starting from current parent node\n         * @param  {String} selector Selector for find other nodes\n         * @return {Rise.RQuery} Returns new Rise.RQuery instance with finded nodes\n         * @example\n         * Rise.$('body').find('div').find('span');\n         */\n        find: function(selector) {\n            return new Rise.RQuery(selector, this.get(0));\n        },\n\n        /**\n         * Set or get attribute value to nodes\n         * @param  {String|Object} attr String for getting attribute value and object for set\n         * @return {Rise.RQuery|Mixed} Returns current Rise.RQuery instance or attribute value\n         * @example\n         * Rise.$('div').attr('id');\n         * Rise.$('div').attr({\n         *     id: 'test'\n         * });\n         */\n        attr: function(attr) {\n            if (Rise.Util.isString(attr)) {\n                return this.get(0).getAttribute(attr);\n            } else if (Rise.Util.isObject(attr)) {\n                Rise.Logger.startGroup(true, 'Rise.RQuery.attr() -> Set attributes');\n                this.each(function(element) {\n                    Object.keys(attr).forEach(function(key) {\n                        Rise.Logger.log('Set key-value \"%s\" -> \"%s\" to element %O', key, attr[key], element);\n                        if (attr[key] === false) {\n                            element.removeAttribute(key);\n                        } else {\n                            element.setAttribute(key, attr[key]);\n                        }\n                    });\n                });\n                Rise.Logger.endGroup();\n            }\n\n            return this;\n        },\n\n        /**\n         * Set or get css-rules\n         * @param  {String|Object} name String if you want get CSS-rule or Object for set\n         * @param {String} pseudoElement You can provide pseudoElement selector\n         * @return {Rise.RQuery|Mixed} Returns current Rise.RQuery instance or CSS value\n         * @example\n         * Rise.RQuery('div').css({\n         *     width: 200\n         * });\n         * Rise.RQuery('div').css('width', ':after');\n         * Rise.RQuery('div').css('width');\n         */\n        css: function(css, pseudoElement) {\n            pseudoElement = pseudoElement || null;\n\n            if (Rise.Util.isString(css)) {\n                return window.getComputedStyle(this.get(0), pseudoElement).getPropertyValue(Rise.Util.getDashedString(css));\n            } else if (Rise.Util.isObject(css)) {\n                Rise.Logger.startGroup(true, 'Rise.RQuery.css() -> Set CSS');\n                this.each(function(element) {\n                    Object.keys(css).forEach(function(key) {\n                        Rise.Logger.log('Set key-value \"%s\" -> \"%s\" to element %O', key, css[key], element);\n\n                        if (css[key] === false) {\n                            element.style.removeProperty(Rise.Util.getDashedString(key));\n                        } else if (isNaN(css[key]) || Rise.RQuery.cssNumbersMap.indexOf(key) != -1) {\n                            element.style[Rise.Util.getCamelizedString(key)] = css[key];\n                        } else {\n                            element.style[Rise.Util.getCamelizedString(key)] = css[key] + 'px';\n                        }\n                    });\n                });\n                Rise.Logger.endGroup();\n            }\n\n            return this;\n        },\n\n        /**\n         * Wrap nodes with new node\n         * @param  {Rise.RQuery} html Rise.RQuery instance with HTML which will be the wrapper\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').wrap(Rise.$.create('a')); // Wrap all div with a tag\n         */\n        wrap: function(html) {\n            var wrapper;\n\n            return this.each(function(element) {\n                wrapper = html.clone();\n                element.parentNode.insertBefore(wrapper.get(0), element);\n                wrapper.append(element);\n            });\n        },\n\n        /**\n         * Unwrap nodes, remove parent node from nodes\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').unwrap();\n         */\n        unwrap: function() {\n            return this.each(function(element) {\n                element.parentNode.parentNode.replaceChild(element, element.parentNode);\n            });\n        },\n\n        /**\n         * Check if this node is matches to selector\n         * @param  {String} selector Selector for checking\n         * @return {Boolean} Returns true if all elements is match to selector and false otherwise\n         * @example\n         * Rise.$('div').is('div'); // true\n         */\n        is: function(selector) {\n            var element;\n\n            if (this.count() > 0) {\n                element = this.get(0);\n\n                return (\n                    element.matches ||\n                    element.matchesSelector ||\n                    element.msMatchesSelector ||\n                    element.mozMatchesSelector ||\n                    element.webkitMatchesSelector ||\n                    element.oMatchesSelector\n                ).call(element, selector);\n            }\n\n            return false;\n        },\n\n        /**\n         * Add class name to nodes\n         * @param {String} names Class names splitted with spaces\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').addClass('foo bar');\n         */\n        addClass: function(names) {\n            names = names.split(/[ ]+/);\n\n            return this.each(function(element) {\n                names.forEach(function(name) {\n                    element.classList.add(name);\n                });\n            });\n        },\n\n        /**\n         * Remove class name from nodes\n         * @param  {String} names Class names that need to be removed from nodes\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').removeClass('foo bar');\n         */\n        removeClass: function(names) {\n            names = names.split(/[ ]+/);\n\n            return this.each(function(element) {\n                names.forEach(function(name) {\n                    element.classList.remove(name);\n                });\n            });\n        },\n\n        /**\n         * Toggle class name for nodes\n         * @param  {String} names Class names that need to be toggled\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').toggleClass('foo bar');\n         */\n        toggleClass: function(names) {\n            names = names.split(/[ ]+/);\n\n            return this.each(function(element) {\n                names.forEach(function(name) {\n                    element.classList.toggle(name);\n                });\n            });\n        },\n\n        /**\n         * Check if nodes have class name\n         * @param  {String}  className Class name that need check for exists in node\n         * @return {Boolean} Returns true if ALL nodes have className and false otherwise\n         * @example\n         * Rise.$('div').hasClass('foo');\n         */\n        hasClass: function(name) {\n            if (this.count() > 0) {\n                return Array.prototype.every.call(this.get(), function(element) {\n                    return element.classList.contains(name);\n                });\n            }\n\n            return false;\n        },\n\n        /**\n         * Bind event to nodes\n         * @param  {String|Object} eventType Event type\n         * @param  {Function} handler Your function which you want execute on event\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').on('click', function(event) {\n         *     console.log(this, event);\n         * });\n         * Rise.$('div').on({\n         *     click: function(event) {\n         *         console.log(this, event);\n         *     }\n         * });\n         */\n        on: function(eventType, handler) {\n            if (Rise.Util.isObject(eventType)) {\n                Object.keys(eventType).forEach(function(key) {\n                    this.on(key, eventType[key]);\n                });\n            } else {\n                Rise.Logger.startGroup(true, 'Rise.RQuery.on() -> Binding events');\n                this.each(function(element) {\n                    Rise.Logger.log('Bind event \"%s\" to %O', eventType, element);\n                    element.addEventListener(eventType, handler, false);\n                });\n                Rise.Logger.endGroup();\n            }\n\n            return this;\n        },\n\n        /**\n         * Unbind event from nodes\n         * @param  {String} eventType Event type\n         * @param  {Function} handler Your function which you want to unsubscribe from event\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').off('click', yourFunction);\n         * Rise.$('div').off({\n         *     click: yourFunction\n         * });\n         */\n        off: function(eventType, handler) {\n            if (Rise.Util.isObject(eventType)) {\n                Object.keys(eventType).forEach(function(key) {\n                    this.off(key, eventType[key]);\n                });\n            } else {\n                Rise.Logger.startGroup(true, 'Rise.RQuery.off() -> Unbinding events');\n                this.each(function(element) {\n                    Rise.Logger.log('Unbind event \"%s\" from element %O', eventType, element);\n                    element.removeEventListener(eventType, handler, false);\n                });\n                Rise.Logger.endGroup();\n            }\n\n            return this;\n        },\n\n        /**\n         * Trigger native mouse event for node\n         * @param  {String} eventName Name of event\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('button').triggerMouseEvent('click');\n         */\n        triggerMouseEvent: function(eventName) {\n            var event = document.createEvent('MouseEvents'),\n                element = this.get(0);\n\n            event.initMouseEvent(eventName, true, false, window);\n            element.dispatchEvent(event);\n\n            return this;\n        },\n\n        /**\n         * Remove nodes from DOM\n         * @return {Rise.RQuery} Returns current Rise.RQuery instance\n         * @example\n         * Rise.$('div').remove();\n         */\n        remove: function() {\n            return this.each(function(element) {\n                if (element && element.parentNode) {\n                    element.parentNode.removeChild(element);\n                }\n            });\n        },\n\n        /**\n         * Get or set HTML to nodes\n         * @param  {String|Rise.RQuery} [html] HTML string or Rise.RQuery instance\n         * @return {Rise.RQuery|String} Returns modified Rise.RQuery instance or HTML string\n         * @example\n         * Rise.$('div').html('test');\n         * Rise.$('div').html(); // 'test'\n         */\n        html: function(html) {\n            if (Rise.Util.isUndefined(html)) {\n                return this.get(0).innerHTML;\n            } else {\n                return this.each(function(element) {\n                    new Rise.RQuery(element).empty().append(html);\n                });\n            }\n        },\n\n        /**\n         * Append HTML before node's end\n         * @param  {String|Rise.RQuery|Element} html You can send String or exists node\n         * @return {Rise.RQuery} Returns modified Rise.RQuery instance\n         * @example\n         * Rise.$('div').append('test');\n         * Rise.$('div').append(Rise.$.create('span'));\n         * Rise.$('div').append(document.createElement('a'));\n         */\n        append: function(html) {\n            if (Rise.Util.isString(html)) {\n                this.each(function(element) {\n                    element.insertAdjacentHTML('beforeend', html);\n                });\n            } else if (html instanceof Rise.RQuery) {\n                this.each(function(element) {\n                    element.appendChild(html.get(0));\n                });\n            } else if (html instanceof Element) {\n                this.each(function(element) {\n                    element.appendChild(html);\n                });\n            }\n\n            return this;\n        },\n\n        /**\n         * Prepend HTML after node began\n         * @param  {String|Rise.RQuery|Element} html You can send String or existing Element\n         * @return {Rise.RQuery} Returns modified Rise.RQuery instance\n         * @example\n         * Rise.$('div').prepend('test');\n         * Rise.$('div').prepend(Rise.$.create('span'));\n         * Rise.$('div').prepend(document.createElement('a'));\n         */\n        prepend: function(html) {\n            if (Rise.Util.isString(html)) {\n                this.each(function(element) {\n                    element.insertAdjacentHTML('afterbegin', html);\n                });\n            } else if (html instanceof Rise.RQuery) {\n                this.each(function(element) {\n                    element.insertBefore(html.get(0), element.firstChild);\n                });\n            } else if (html instanceof Element) {\n                this.each(function(element) {\n                    element.insertBefore(html, element.firstChild);\n                });\n            }\n\n            return this;\n        },\n\n        /**\n         * Set or get inner text\n         * @param  {String} [text] Text which you want to set in elements\n         * @return {Rise.RQuery|String} Returns current Rise.RQuery instance or string with text\n         * @example\n         * Rise.$('div').text('test');\n         * Rise.$('div').text(); // 'test'\n         */\n        text: function(text) {\n            if (Rise.Util.isUndefined(text)) {\n                return this.get(0).textContent;\n            } else {\n                return this.each(function(element) {\n                    element.textContent = text;\n                });\n            }\n        },\n\n        /**\n         * Remove all child nodes from nodes\n         * @return {Rise.RQuery} Returns modified Rise.RQuery instance\n         * @example\n         * Rise.$('div').empty();\n         */\n        empty: function() {\n            return this.each(function(element) {\n                element.innerHTML = '';\n            });\n        },\n\n        /**\n         * Clone node\n         * @return {Rise.RQuery} Returns new Rise.RQuery instance with cloned nodes\n         * @example\n         * Rise.$('div').clone();\n         */\n        clone: function() {\n            var clones = [];\n\n            this.each(function(element) {\n                clones.push(element.cloneNode(true));\n            });\n\n            return new Rise.RQuery(clones);\n        }\n    }, {\n        /**\n         * Map of CSS attributes which have only numbers at value\n         * @static\n         * @type {Array}\n         */\n        cssNumbersMap: [\n            \"columnCount\",\n            \"fillOpacity\",\n            \"flexGrow\",\n            \"flexShrink\",\n            \"fontWeight\",\n            \"lineHeight\",\n            \"opacity\",\n            \"order\",\n            \"orphans\",\n            \"widows\",\n            \"zIndex\",\n            \"zoom\"\n        ]\n    });\n})(this);\n(function(global) {\n    'use strict';\n\n    global.Rise.Shadow = Rise.Class.create({\n        /**\n         * Create new Rise.Shadow instance\n         * @constructor\n         * @param {Object} shadow Object with color, blur, offsetX, offsetY attributes or string\n         * @return {Rise.Shadow} Returns new Rise.Shadow instance\n         * @example\n         * new Rise.Shadow({\n         *     color: new Rise.Color('aqua'),\n         *     blur: 2,\n         *     offsetX: 5,\n         *     offsetY: 10\n         * });\n         */\n        init: function(shadow) {\n            shadow = shadow || {};\n\n            if (shadow instanceof Rise.Shadow) {\n                return shadow;\n            } else if (Rise.Util.isString(shadow)) {\n                return Rise.Shadow.fromString(shadow);\n            } else if (Rise.Util.isObject(shadow)) {\n                Rise.Logger.startGroup(true, 'Rise.Shadow -> init()');\n                Rise.Logger.log('Trying to parse options -> %O', shadow);\n\n                this.color = shadow.color ? new Rise.Color(shadow.color) : new Rise.Color('black');\n                this.blur = shadow.blur || 0;\n                this.offsetX = shadow.offsetX || 0;\n                this.offsetY = shadow.offsetY || 0;\n\n                Rise.Logger.log('Instantiated new Rise.Shadow -> %O', this);\n                Rise.Logger.endGroup();\n            } else {\n                Rise.Logger.warning('Shadow -> %O not parsed', shadow);\n                return false;\n            }\n\n            return this;\n        },\n\n        /**\n         * Set color\n         * @param {Rise.Color|String|Object} color Color that you want set to shadow\n         * @return {Rise.Shadow} Returns current Rise.Shadow instance\n         * @example\n         * new Rise.Shadow().setColor(new Rise.Color('aqua'));\n         */\n        setColor: function(color) {\n            this.color = new Rise.Color(color);\n            return this;\n        },\n\n        /**\n         * Get color\n         * @return {Rise.Color} Returns Rise.Color instance\n         * @example\n         * new Rise.Shadow().getColor();\n         */\n        getColor: function() {\n            return this.color;\n        },\n\n        /**\n         * Set blur\n         * @param {Integer} blur Blur in integer\n         * @return {Rise.Shadow} Returns current Rise.Shadow instance\n         * @example\n         * new Rise.Shadow().setBlur(3);\n         */\n        setBlur: function(blur) {\n            this.blur = blur;\n            return this;\n        },\n\n        /**\n         * Get blur\n         * @return {Integer} Returns current value of blur\n         * @example\n         * new Rise.Shadow().getBlur();\n         */\n        getBlur: function() {\n            return this.blur;\n        },\n\n        /**\n         * Set offsetX\n         * @param {Integer} x OffsetX\n         * @return {Rise.Shadow} Returns current Rise.Shadow instance\n         * @example\n         * new Rise.Shadow().setOffsetX(5);\n         */\n        setOffsetX: function(x) {\n            this.offsetX = x;\n            return this;\n        },\n\n        /**\n         * Get offsetX\n         * @return {Integer} Returns offsetX\n         * @example\n         * new Rise.Shadow().getOffsetX();\n         */\n        getOffsetX: function() {\n            return this.offsetX;\n        },\n\n        /**\n         * Set offsetY\n         * @param {Integer} y OffsetY\n         * @return {Rise.Shadow} Returns Rise.Shadow instance\n         * @example\n         * new Rise.Shadow().setOffsetY(5);\n         */\n        setOffsetY: function(y) {\n            this.offsetY = y;\n            return this;\n        },\n\n        /**\n         * Get offsetY\n         * @return {Integer} Returns offsetY\n         * @example\n         * new Rise.Shadow().getOffsetY();\n         */\n        getOffsetY: function() {\n            return this.offsetY;\n        },\n\n        /**\n         * Returns CSS string\n         * @return {String} Returns CSS shadow string representation\n         * @example\n         * new Rise.Shadow().toString();\n         */\n        toString: function() {\n            return [\n                this.offsetX,\n                this.offsetY,\n                this.blur,\n                this.color.toRgbString()\n            ].join('px ');\n        }\n    }, {\n        /**\n         * Regex that match shadow offsetX, offsetY and blur\n         * @static\n         * @example\n         * 2px 2px 10px rgba(0, 0, 0, 0.2)\n         * rgb(0,255,0) 2px 2px\n         */\n        shadowRegex: /(?:\\s|^)(-?\\d+(?:px)?(?:\\s?|$))?(-?\\d+(?:px)?(?:\\s?|$))?(\\d+(?:px)?)?(?:\\s?|$)(?:$|\\s)/,\n\n        /**\n         * Create Rise.Shadow from shadow string representation\n         * @static\n         * @param {String} shadow Shadow value that need to parse\n         * @return {Rise.Shadow} Rise.Shadow instance\n         * @example\n         * var shadow = Rise.Shadow.fromString('2px 2px 10px rgba(0, 0, 0, 0.2)');\n         */\n        fromString: function(shadow) {\n            shadow = shadow.trim();\n\n            var offsetsAndBlur = Rise.Shadow.shadowRegex.exec(shadow) || [],\n                color = shadow.replace(Rise.Shadow.shadowRegex, '') || 'rgb(0, 0, 0)';\n\n            return new Rise.Shadow({\n                color: new Rise.Color(color),\n                blur: parseInt(offsetsAndBlur[3], 10) || 0,\n                offsetX: parseInt(offsetsAndBlur[1], 10) || 0,\n                offsetY: parseInt(offsetsAndBlur[2], 10) || 0\n            });\n        }\n    });\n})(this);"],"sourceRoot":"/source/"}